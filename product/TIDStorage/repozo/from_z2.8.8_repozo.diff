--- /home/vincent/bin/zope2.8/bin/repozo.py	2007-02-09 13:52:35.000000000 +0100
+++ repozo.py	2007-10-26 15:30:43.311046075 +0200
@@ -50,6 +50,12 @@
         Compress with gzip the backup files.  Uses the default zlib
         compression level.  By default, gzip compression is not used.
 
+    -m / --max-tid
+        Stop at given TID when saving the Data.fs.
+
+    -M / --print-max-tid
+        Print the last saved transaction's tid.
+
 Options for -R/--recover:
     -D str
     --date=str
@@ -70,6 +76,7 @@
 import time
 import errno
 import getopt
+import base64
 
 from ZODB.FileStorage import FileStorage
 
@@ -104,10 +111,11 @@
 def parseargs():
     global VERBOSE
     try:
-        opts, args = getopt.getopt(sys.argv[1:], 'BRvhf:r:FD:o:Qz',
+        opts, args = getopt.getopt(sys.argv[1:], 'BRvhf:r:FD:o:Qzm:M',
                                    ['backup', 'recover', 'verbose', 'help',
                                     'file=', 'repository=', 'full', 'date=',
-                                    'output=', 'quick', 'gzip'])
+                                    'output=', 'quick', 'gzip', 'max-tid=',
+                                    'print-max-tid'])
     except getopt.error, msg:
         usage(1, msg)
 
@@ -120,6 +128,8 @@
         output = None       # where to write recovered data; None = stdout
         quick = False       # -Q flag state
         gzip = False        # -z flag state
+        print_tid = False   # -M flag state
+        max_tid = None      # -m argument, if any
 
     options = Options()
 
@@ -150,6 +160,10 @@
             options.output = arg
         elif opt in ('-z', '--gzip'):
             options.gzip = True
+        elif opt in ('-M', '--print-max-tid'):
+             options.print_tid = True
+        elif opt in ('-m', '--max-tid'):
+             options.max_tid = base64.decodestring(arg)
         else:
             assert False, (opt, arg)
 
@@ -174,6 +188,12 @@
         if options.file is not None:
             log('--file option is ignored in recover mode')
             options.file = None
+        if options.print_tid:
+            log('--print-max-tid is ignored in recover mode')
+            options.print_tid = False
+        if options.max_tid is not None:
+            log('--max-tid is ignored in recover mode')
+            options.max_tid = None
     return options
 
 
@@ -349,13 +369,19 @@
 
 def do_full_backup(options):
     # Find the file position of the last completed transaction.
-    fs = FileStorage(options.file, read_only=True)
+    fs = FileStorage(options.file, read_only=True, stop=options.max_tid)
     # Note that the FileStorage ctor calls read_index() which scans the file
     # and returns "the position just after the last valid transaction record".
     # getSize() then returns this position, which is exactly what we want,
     # because we only want to copy stuff from the beginning of the file to the
     # last valid transaction record.
     pos = fs.getSize()
+    if options.print_tid:
+      undo_log = fs.undoLog(last=-1)
+      if len(undo_log):
+        print >> sys.stdout, 'Last TID: %s' % (undo_log[0]['id'], )
+      else:
+        print >> sys.stderr, 'Cannot get latest TID'
     fs.close()
     options.full = True
     dest = os.path.join(options.repository, gen_filename(options))
@@ -375,13 +401,19 @@
 
 def do_incremental_backup(options, reposz, repofiles):
     # Find the file position of the last completed transaction.
-    fs = FileStorage(options.file, read_only=True)
+    fs = FileStorage(options.file, read_only=True, stop=options.max_tid)
     # Note that the FileStorage ctor calls read_index() which scans the file
     # and returns "the position just after the last valid transaction record".
     # getSize() then returns this position, which is exactly what we want,
     # because we only want to copy stuff from the beginning of the file to the
     # last valid transaction record.
     pos = fs.getSize()
+    if options.print_tid:
+      undo_log = fs.undoLog(last=-1)
+      if len(undo_log):
+        print >> sys.stdout, 'Last TID: %s' % (undo_log[0]['id'], )
+      else:
+        print >> sys.stderr, 'Cannot get latest TID'
     fs.close()
     options.full = False
     dest = os.path.join(options.repository, gen_filename(options))
