<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

portal = context.getPortalObject()\n
translateString = portal.Base_translateString\n
getWorkflowsFor = portal.portal_workflow.getWorkflowsFor\n
state_variable_set = set()\n
add = state_variable_set.add\n
type_state_variable_workflow_dict = {}\n
type_workflow_state_count_dict_dict = {}\n
workflow_translated_title_dict = {}\n
workflow_translated_state_title_dict = {}\n
portal_type_translated_title_dict = {}\n
for portal_type in context.allowedContentTypes():\n
  portal_type_id = portal_type.getId()\n
  portal_type_translated_title_dict[portal_type_id] = translateString(portal_type.getTitle())\n
  for workflow in getWorkflowsFor(portal_type_id):\n
    state_container = getattr(workflow, \'states\', None)\n
    if state_container is not None and len(state_container) > 1:\n
      state_var = workflow.state_var\n
      workflow_id = workflow.getId()\n
      workflow_translated_title_dict[workflow_id] = translateString(workflow.title)\n
      type_state_variable_workflow_dict[(portal_type_id, state_var)] = workflow_id\n
      state_count_dict = type_workflow_state_count_dict_dict.setdefault((portal_type_id, workflow_id), {})\n
      translated_state_title_dict = workflow_translated_state_title_dict.setdefault(workflow_id, {})\n
      for state in state_container.objectValues():\n
        state_id = state.getId()\n
        # TODO: support workflow-specific translations\n
        translated_state_title_dict[state_id] = translateString(state.title)\n
        state_count_dict[state_id] = 0\n
      add(state_var)\n
column_list = [\'portal_type\'] + list(state_variable_set)\n
COUNT = \'count(*)\'\n
if use_selection:\n
  selection_kw = portal.portal_selections.getSelectionParamsFor(selection_name).copy()\n
  selection_kw.pop(\'limit\', None)\n
  query = portal.portal_catalog.getSQLCatalog().buildQuery(selection_kw)\n
else:\n
  query = None\n
for line in context.searchFolder(group_by=column_list, select_list=[COUNT] + column_list, query=query):\n
  portal_type = line.portal_type\n
  count = getattr(line, COUNT)\n
  for state_variable in state_variable_set:\n
    workflow = type_state_variable_workflow_dict.get((line.portal_type, state_variable))\n
    state = getattr(line, state_variable)\n
    if workflow is None:\n
      assert not state, (portal_type, state_variable, state)\n
      continue\n
    state_count_dict = type_workflow_state_count_dict_dict[(portal_type, workflow)]\n
    state_count_dict[state] = count + state_count_dict[state]\n
listbox = []\n
append = listbox.append\n
for (portal_type, workflow), state_count_dict in sorted(type_workflow_state_count_dict_dict.iteritems(), key=lambda x: x[0]):\n
  if sum(state_count_dict.values()):\n
    append({\n
      \'translated_portal_type\': \'%s - %s\' % (portal_type_translated_title_dict[portal_type], workflow_translated_title_dict[workflow]),\n
      \'state\' : \'\',\n
      \'count\' : \'\',\n
    })\n
    translated_state_title_dict = workflow_translated_state_title_dict[workflow]\n
    for state, count in sorted(state_count_dict.iteritems(), key=lambda x: x[0]):\n
      if count:\n
        append({\n
          \'translated_portal_type\': \'\',\n
          \'state\': translated_state_title_dict[state],\n
          \'count\': count,\n
        })\n
portal.Base_updateDialogForm(listbox=listbox, empty_line_number=0)\n
return context.Folder_viewWorkflowReport()\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>use_selection, selection_name</string> </value>
        </item>
        <item>
            <key> <string>_proxy_roles</string> </key>
            <value>
              <tuple>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>Folder_generateWorkflowReport</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
