<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <tuple>
          <string>Products.PythonScripts.PythonScript</string>
          <string>PythonScript</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Python_magic</string> </key>
            <value> <string encoding="base64">O/INCg==</string> </value>
        </item>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>__ac_local_roles__</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

from Products.ERP5OOo.OOoUtils import OOoParser\n
from Products.ERP5Type.Utils import convertToUpperCase\n
OOoParser = OOoParser()\n
\n
\n
def getIdFromString(string=None):\n
  """\n
    This function transform a string to a safe id.\n
    It is used here to create a safe category id from a string.\n
  """\n
  clean_id = \'\'\n
  if string == None:\n
    return None\n
  translation_map = { "a": [\'\\xe0\']\n
                    , "e": [\'\\xe9\', \'\\xe8\']\n
                    }\n
  string = string.lower()\n
  string = string.strip()\n
  for char in string.encode(\'iso8859_1\'):\n
    if char == \'_\' or char.isalnum():\n
      clean_id += char\n
    elif char.isspace() or char in (\'+\', \'-\'):\n
      clean_id += \'_\'\n
    else:\n
      for (safe_char, char_list) in translation_map.items():\n
        if char in char_list:\n
          clean_id += safe_char\n
          break\n
  return clean_id\n
\n
\n
# Extract tables from the speadsheet file\n
OOoParser.openFile(import_file)\n
filename = OOoParser.getFilename()\n
spreadsheets = OOoParser.getSpreadsheetsMapping()\n
\n
\n
for table_name in spreadsheets.keys():\n
\n
  # Get the header of the table\n
  columns_header = spreadsheets[table_name][0]\n
  # Get the mapping to help us to know the property according a cell index\n
  property_map = {}\n
  column_index = 0\n
  path_index = 0\n
  for column in columns_header:\n
    column_id = getIdFromString(column)\n
    # This give us the information that the path definition has started\n
    path_def_started = \'path_0\' in property_map.values()\n
    # The path of the category has started to be expressed\n
    if column_id == \'path\':\n
      property_map[column_index] = \'path_\' + str(path_index)\n
      path_index += 1\n
    # The column has no header information\n
    elif column_id in (None, \'\'):\n
      # Are we in the middle of the path definition ?\n
      # If the path definition has started and not ended\n
      if path_def_started and path_index != None:\n
        property_map[column_index] = \'path_\' + str(path_index)\n
        path_index += 1\n
      # else : The path definition is not started or is finished, so ignore the column\n
    # The column has a normal header\n
    else:\n
      # If there is a new column with a header and the path definition has started, that seems the path definition has ended\n
      if \'path_0\' in property_map.values():\n
        path_index == None\n
      property_map[column_index] = column_id\n
    column_index += 1\n
\n
  # Construct categories data (with absolut path) from table lines\n
  categories = []\n
  # The first category is the Base category\n
  # 1 table = 1 base category\n
  base_category_name = table_name\n
  base_category_id = getIdFromString(base_category_name)\n
  categories.append({ \'path\'  : base_category_id\n
                    , \'title\' : base_category_name\n
                    })\n
  # This path_elements help us to reconstruct the absolute path\n
  path_elements = []\n
  for line in spreadsheets[table_name][1:]:\n
    category_properties = {}\n
    # Exclude empty lines\n
    if line.count(\'\') + line.count(None) == len(line):\n
      continue\n
    # Analyse every cells of the line\n
    cell_index = 0\n
    for cell in line:\n
      # Ignore empty cells, do the test on the generated id because getIdFromString() is more restrictive\n
      cell_id = getIdFromString(cell)\n
      if cell_id not in (\'\', None):\n
        # Get the property corresponding to the cell data\n
        property_id = property_map[cell_index]\n
        # Handle normal properties\n
        if not property_id.startswith(\'path_\'):\n
          category_properties[property_id] = cell\n
        # Handle \'path\' property\n
        else:\n
          path_element_id = cell_id\n
          # Initialize the list of path elements to the cell element\n
          absolut_path_element_list = [path_element_id,]\n
          # Get the depth of the current element\n
          element_depth = int(property_id[5:])\n
          # Get a path element for each depth level to reach the 0-level\n
          for searched_depth in range(element_depth)[::-1]:\n
            # Get the first path element that correspond to the searched depth\n
            for element in path_elements[::-1]:\n
              if element[\'depth\'] == searched_depth:\n
                # Element found, add it to the list\n
                absolut_path_element_list.append(element[\'value\'])\n
                # Get the next depth\n
                break\n
          category_properties[\'path\'] = \'/\'.join([base_category_id,] + absolut_path_element_list[::-1])\n
          # If no title, get it from raw cell value\n
          if \'title\' not in category_properties.keys():\n
            clean_title = cell.strip()\n
            if clean_title != cell_id:\n
              category_properties[\'title\'] = clean_title\n
          # Save the path element\n
          path_elements.append({ \'depth\' : element_depth\n
                               , \'value\' : path_element_id\n
                               })\n
      cell_index += 1\n
    if len(category_properties) > 0 and \'path\' in category_properties.keys():\n
      categories.append(category_properties)\n
\n
\n
  # Create categories\n
  for category in categories:\n
    keys = category.keys()\n
    if \'path\' in keys:\n
      base_path_obj = context.portal_categories\n
      is_base_category = True\n
      for category_id in category[\'path\'].split(\'/\'):\n
        # The current category is not existing\n
        if category_id not in base_path_obj.contentIds():\n
          # Create the category\n
          if is_base_category:\n
            category_type = \'Base Category\'\n
          else:\n
            category_type = \'Category\'\n
          base_path_obj.newContent( portal_type       = category_type\n
                                  , id                = category_id\n
                                  , immediate_reindex = 1\n
                                  )\n
        base_path_obj = base_path_obj[category_id]\n
        is_base_category = False\n
      new_category = base_path_obj\n
\n
      # Set the category properties\n
      for key in keys:\n
        if key != \'path\':\n
          method_id = "set" + convertToUpperCase(key)\n
          value = category[key]\n
          if value not in (\'\', None):\n
            if hasattr(new_category, method_id):\n
              method = getattr(new_category, method_id)\n
              # Convert the value to something like \'\\xc3\\xa9\' not \'\\xc3\\xa9\'\n
              method(value.encode(\'UTF-8\'))\n
\n
\n
# Import is a success, go back to the portal_categories tool\n
return context.REQUEST.RESPONSE.redirect(context.portal_categories.absolute_url() + \'/view?portal_status_message=\' + filename + \'+successfully+imported\')\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_code</string> </key>
            <value> <string encoding="base64">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
IGEgc3RyaW5nLgogICgBAAAAcwkAAABPT29QYXJzZXIoAQAAAHMSAAAAY29udmVydFRvVXBwZXJD
YXNlYwEAAAAJAAAAEQAAAEMAAABzNQEAAGQBAH0BAHwAAHQCAGoCAG8IAAF0AgBTbgEAAWgAAARk
AgBkAwBnAQADPARkBABkBQBkBgBnAgADPH0DAHQEAHwAAGQHAIMCAIMAAH0AAHQEAHwAAGQIAIMC
AIMAAH0AAHjKAHQFAHQEAHwAAGQJAIMCAGQKAIMBAIMBAERdrQB9BgB8BgBkCwBqAgBwEAABdAQA
fAYAZAwAgwIAgwAAbw4AAXwBAHwGADd9AQBxfAABdAQAfAYAZA0AgwIAgwAAcBAAAXwGAGQOAGQP
AGYCAGoGAG8OAAF8AQBkCwA3fQEAcXwAAXhCAHQFAHQEAHwDAGQQAIMCAIMAAIMBAERdKABcAgB9
BwB9CAB8BgB8CABqBgBvDwABfAEAfAcAN30BAFBx/QABcf0AV3F8AFd8AQBTZBEAUygSAAAAc3YA
AAAKICAgIFRoaXMgZnVuY3Rpb24gdHJhbnNmb3JtIGEgc3RyaW5nIHRvIGEgc2FmZSBpZC4KICAg
IEl0IGlzIHVzZWQgaGVyZSB0byBjcmVhdGUgYSBzYWZlIGNhdGVnb3J5IGlkIGZyb20gYSBzdHJp
bmcuCiAgcwAAAABzAQAAAGFzAQAAAOBzAQAAAGVzAQAAAOlzAQAAAOhzBQAAAGxvd2VycwUAAABz
dHJpcHMGAAAAZW5jb2RlcwkAAABpc284ODU5XzFzAQAAAF9zBwAAAGlzYWxudW1zBwAAAGlzc3Bh
Y2VzAQAAACtzAQAAAC1zBQAAAGl0ZW1zTigJAAAAcwgAAABjbGVhbl9pZHMGAAAAc3RyaW5ncwQA
AABOb25lcw8AAAB0cmFuc2xhdGlvbl9tYXBzCQAAAF9nZXRhdHRyX3MJAAAAX2dldGl0ZXJfcwQA
AABjaGFycwkAAABzYWZlX2NoYXJzCQAAAGNoYXJfbGlzdCgJAAAAcwYAAABzdHJpbmdzCAAAAGNs
ZWFuX2lkcwQAAABOb25lcw8AAAB0cmFuc2xhdGlvbl9tYXBzCQAAAF9nZXRhdHRyX3MJAAAAX2dl
dGl0ZXJfcwQAAABjaGFycwkAAABzYWZlX2NoYXJzCQAAAGNoYXJfbGlzdCgAAAAAKAAAAABzDwAA
AFNjcmlwdCAoUHl0aG9uKXMPAAAAZ2V0SWRGcm9tU3RyaW5nBgAAAHMmAAAAAAUGAQ0BCAETAQ4C
EgESARwABgEgAREBIwEOAhkADAENAQoBDQFzCAAAAG9wZW5GaWxlcwsAAABnZXRGaWxlbmFtZXMW
AAAAZ2V0U3ByZWFkc2hlZXRzTWFwcGluZ3MEAAAAa2V5c2kAAAAAcwYAAABwYXRoXzBzBgAAAHZh
bHVlc3MEAAAAcGF0aHMFAAAAcGF0aF9pAQAAAHMAAAAAcwYAAABhcHBlbmRzBQAAAHRpdGxlTnMF
AAAAY291bnRzCgAAAHN0YXJ0c3dpdGhpBQAAAHMFAAAAZGVwdGhzBQAAAHZhbHVlcwEAAAAvcwQA
AABqb2lucwUAAABzdHJpcHMRAAAAcG9ydGFsX2NhdGVnb3JpZXNzBQAAAHNwbGl0cwoAAABjb250
ZW50SWRzcw0AAABCYXNlIENhdGVnb3J5cwgAAABDYXRlZ29yeXMKAAAAbmV3Q29udGVudHMLAAAA
cG9ydGFsX3R5cGVzAgAAAGlkcxEAAABpbW1lZGlhdGVfcmVpbmRleHMDAAAAc2V0cwYAAABlbmNv
ZGVzBQAAAFVURi04cwcAAABSRVFVRVNUcwgAAABSRVNQT05TRXMIAAAAcmVkaXJlY3RzDAAAAGFi
c29sdXRlX3VybHMcAAAAL3ZpZXc/cG9ydGFsX3N0YXR1c19tZXNzYWdlPXMWAAAAK3N1Y2Nlc3Nm
dWxseStpbXBvcnRlZCg5AAAAcxkAAABQcm9kdWN0cy5FUlA1T09vLk9Pb1V0aWxzcwkAAABPT29Q
YXJzZXJzFwAAAFByb2R1Y3RzLkVSUDVUeXBlLlV0aWxzcxIAAABjb252ZXJ0VG9VcHBlckNhc2Vz
BAAAAE5vbmVzDwAAAGdldElkRnJvbVN0cmluZ3MJAAAAX2dldGF0dHJfcwsAAABpbXBvcnRfZmls
ZXMIAAAAZmlsZW5hbWVzDAAAAHNwcmVhZHNoZWV0c3MJAAAAX2dldGl0ZXJfcwoAAAB0YWJsZV9u
YW1lcwkAAABfZ2V0aXRlbV9zDgAAAGNvbHVtbnNfaGVhZGVycwwAAABwcm9wZXJ0eV9tYXBzDAAA
AGNvbHVtbl9pbmRleHMKAAAAcGF0aF9pbmRleHMGAAAAY29sdW1ucwkAAABjb2x1bW5faWRzEAAA
AHBhdGhfZGVmX3N0YXJ0ZWRzAwAAAHN0cnMHAAAAX3dyaXRlX3MKAAAAY2F0ZWdvcmllc3MSAAAA
YmFzZV9jYXRlZ29yeV9uYW1lcxAAAABiYXNlX2NhdGVnb3J5X2lkcw0AAABwYXRoX2VsZW1lbnRz
cwQAAABsaW5lcxMAAABjYXRlZ29yeV9wcm9wZXJ0aWVzcwMAAABsZW5zCgAAAGNlbGxfaW5kZXhz
BAAAAGNlbGxzBwAAAGNlbGxfaWRzCwAAAHByb3BlcnR5X2lkcw8AAABwYXRoX2VsZW1lbnRfaWRz
GQAAAGFic29sdXRfcGF0aF9lbGVtZW50X2xpc3RzAwAAAGludHMNAAAAZWxlbWVudF9kZXB0aHMF
AAAAcmFuZ2VzDgAAAHNlYXJjaGVkX2RlcHRocwcAAABlbGVtZW50cwsAAABjbGVhbl90aXRsZXMI
AAAAY2F0ZWdvcnlzBAAAAGtleXNzBwAAAGNvbnRleHRzDQAAAGJhc2VfcGF0aF9vYmpzBAAAAFRy
dWVzEAAAAGlzX2Jhc2VfY2F0ZWdvcnlzCwAAAGNhdGVnb3J5X2lkcw0AAABjYXRlZ29yeV90eXBl
cwUAAABGYWxzZXMMAAAAbmV3X2NhdGVnb3J5cwMAAABrZXlzCQAAAG1ldGhvZF9pZHMFAAAAdmFs
dWVzBwAAAGhhc2F0dHJzBwAAAGdldGF0dHJzBgAAAG1ldGhvZCg6AAAAcwsAAABpbXBvcnRfZmls
ZXMCAAAAa3dzGQAAAFByb2R1Y3RzLkVSUDVPT28uT09vVXRpbHNzCQAAAE9Pb1BhcnNlcnMXAAAA
UHJvZHVjdHMuRVJQNVR5cGUuVXRpbHNzEgAAAGNvbnZlcnRUb1VwcGVyQ2FzZXMEAAAATm9uZXMP
AAAAZ2V0SWRGcm9tU3RyaW5ncwkAAABfZ2V0YXR0cl9zCAAAAGZpbGVuYW1lcwwAAABzcHJlYWRz
aGVldHNzCQAAAF9nZXRpdGVyX3MKAAAAdGFibGVfbmFtZXMJAAAAX2dldGl0ZW1fcw4AAABjb2x1
bW5zX2hlYWRlcnMMAAAAcHJvcGVydHlfbWFwcwwAAABjb2x1bW5faW5kZXhzCgAAAHBhdGhfaW5k
ZXhzBgAAAGNvbHVtbnMJAAAAY29sdW1uX2lkcxAAAABwYXRoX2RlZl9zdGFydGVkcwMAAABzdHJz
BwAAAF93cml0ZV9zCgAAAGNhdGVnb3JpZXNzEgAAAGJhc2VfY2F0ZWdvcnlfbmFtZXMQAAAAYmFz
ZV9jYXRlZ29yeV9pZHMNAAAAcGF0aF9lbGVtZW50c3MEAAAAbGluZXMTAAAAY2F0ZWdvcnlfcHJv
cGVydGllc3MDAAAAbGVucwoAAABjZWxsX2luZGV4cwQAAABjZWxscwcAAABjZWxsX2lkcwsAAABw
cm9wZXJ0eV9pZHMPAAAAcGF0aF9lbGVtZW50X2lkcxkAAABhYnNvbHV0X3BhdGhfZWxlbWVudF9s
aXN0cwMAAABpbnRzDQAAAGVsZW1lbnRfZGVwdGhzBQAAAHJhbmdlcw4AAABzZWFyY2hlZF9kZXB0
aHMHAAAAZWxlbWVudHMLAAAAY2xlYW5fdGl0bGVzCAAAAGNhdGVnb3J5cwQAAABrZXlzcwcAAABj
b250ZXh0cw0AAABiYXNlX3BhdGhfb2JqcwQAAABUcnVlcxAAAABpc19iYXNlX2NhdGVnb3J5cwsA
AABjYXRlZ29yeV9pZHMNAAAAY2F0ZWdvcnlfdHlwZXMFAAAARmFsc2VzDAAAAG5ld19jYXRlZ29y
eXMDAAAAa2V5cwkAAABtZXRob2RfaWRzBQAAAHZhbHVlcwcAAABoYXNhdHRycwcAAABnZXRhdHRy
cwYAAABtZXRob2QoAAAAACgAAAAAcw8AAABTY3JpcHQgKFB5dGhvbilzHwAAAENhdGVnb3J5VG9v
bF9pbXBvcnRDYXRlZ29yeUZpbGUBAAAAc7oAAAANAQ0BCQMPGxABEgESAxkABgMYAgYBBgEGAQ0A
BgEMAhgCDQEaAQ4CEwMUARoBEgUZAQ4BEAEOAwYDBgEPARkBCQMGASUABgEGAjUBBwIGAQ0ABgIM
ARMCDwIXARQDBgIJAhsCJgAGAiAABgEZAhkCDQE5AhkBEgENARsCGQENAg4BLwEYBA0ABgESAQ0B
DwEGASUABgIZAgcBCgIJARIBEQMPAQoBBgMNAAYBDQEQAQ8BEwEQAQ8CNQQoAQAAAHMfAAAAQ2F0
ZWdvcnlUb29sX2ltcG9ydENhdGVnb3J5RmlsZSgBAAAAcx8AAABDYXRlZ29yeVRvb2xfaW1wb3J0
Q2F0ZWdvcnlGaWxlKAAAAAAoAAAAAHMPAAAAU2NyaXB0IChQeXRob24pcwgAAAA8bW9kdWxlPgEA
AABzAAAAAA==</string> </value>
        </item>
        <item>
            <key> <string>_filepath</string> </key>
            <value> <string>Script (Python):/nexedi/portal_skins/erp5_core/CategoryTool_importCategoryFile</string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>import_file, **kw</string> </value>
        </item>
        <item>
            <key> <string>errors</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>func_code</string> </key>
            <value>
              <object>
                <klass>
                  <global name="FuncCode" module="Shared.DC.Scripts.Signature"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>co_argcount</string> </key>
                        <value> <int>1</int> </value>
                    </item>
                    <item>
                        <key> <string>co_varnames</string> </key>
                        <value>
                          <tuple>
                            <string>import_file</string>
                            <string>kw</string>
                            <string>Products.ERP5OOo.OOoUtils</string>
                            <string>OOoParser</string>
                            <string>Products.ERP5Type.Utils</string>
                            <string>convertToUpperCase</string>
                            <string>None</string>
                            <string>getIdFromString</string>
                            <string>_getattr_</string>
                            <string>filename</string>
                            <string>spreadsheets</string>
                            <string>_getiter_</string>
                            <string>table_name</string>
                            <string>_getitem_</string>
                            <string>columns_header</string>
                            <string>property_map</string>
                            <string>column_index</string>
                            <string>path_index</string>
                            <string>column</string>
                            <string>column_id</string>
                            <string>path_def_started</string>
                            <string>str</string>
                            <string>_write_</string>
                            <string>categories</string>
                            <string>base_category_name</string>
                            <string>base_category_id</string>
                            <string>path_elements</string>
                            <string>line</string>
                            <string>category_properties</string>
                            <string>len</string>
                            <string>cell_index</string>
                            <string>cell</string>
                            <string>cell_id</string>
                            <string>property_id</string>
                            <string>path_element_id</string>
                            <string>absolut_path_element_list</string>
                            <string>int</string>
                            <string>element_depth</string>
                            <string>range</string>
                            <string>searched_depth</string>
                            <string>element</string>
                            <string>clean_title</string>
                            <string>category</string>
                            <string>keys</string>
                            <string>context</string>
                            <string>base_path_obj</string>
                            <string>True</string>
                            <string>is_base_category</string>
                            <string>category_id</string>
                            <string>category_type</string>
                            <string>False</string>
                            <string>new_category</string>
                            <string>key</string>
                            <string>method_id</string>
                            <string>value</string>
                            <string>hasattr</string>
                            <string>getattr</string>
                            <string>method</string>
                          </tuple>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>func_defaults</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>CategoryTool_importCategoryFile</string> </value>
        </item>
        <item>
            <key> <string>warnings</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
