#! /usr/bin/python
##############################################################################
#
# Copyright (c) 2002 Nexedi SARL and Contributors. All Rights Reserved.
#                    Yoshinori Okuji <yo@nexedi.com>
#
# WARNING: This program as such is intended to be used by professional
# programmers who take the whole responsability of assessing all potential
# consequences resulting from its eventual inadequacies and bugs
# End users who are looking for a ready-to-use solution with commercial
# garantees and support are strongly adviced to contract a Free Software
# Service Company
#
# This program is Free Software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
##############################################################################


"""Generate repository information on Business Templates.
"""

import tarfile
import os
import sys
import cgi
from cStringIO import StringIO

property_list = '''
title
version
revision
description
license
dependency_list
provision_list
copyright_list
'''.split()

bt_title_path = os.path.join('bt', 'title')

def readProperty(property_dict, property_name, property_file):
    try:
      text = property_file.read()
      if property_name.endswith('_list'):
        property_dict[property_name[:-5]] = text.splitlines()
      else:
        property_dict[property_name] = text
    finally:
      property_file.close()

def readBusinessTemplate(tar):
  """Read an archived Business Template info.
  """
  property_dict = {}
  for info in tar:
    name_list = info.name.split('/')
    if len(name_list) == 3 and name_list[1] == 'bt' and name_list[2] in property_list:
      property_file = tar.extractfile(info)
      property_name = name_list[2]
      readProperty(property_dict, property_name, property_file)

  return property_dict

def readBusinessTemplateDirectory(dir):
  """Read Business Template Directory info.
  """
  property_dict = {}
  for property_name in property_list:
    filename = os.path.join(dir, 'bt', property_name)
    if os.path.isfile(filename):
      property_file = open(filename, 'rb')
      readProperty(property_dict, property_name, property_file)

  return property_dict

def generateInformation(dir, info=id, err=None):
  xml = StringIO()
  xml.write('<?xml version="1.0"?>\n<repository>\n')
  for name in sorted(os.listdir(dir)):
    path = os.path.join(dir, name)
    if name.endswith('.bt5'):
      info('Reading %s... ' % name)
      try:
        tar = tarfile.open(path, 'r:gz')
      except tarfile.TarError:
        if err:
          err('An error happened in %s; skipping\n' % name)
          continue
        raise
      try:
        property_dict = readBusinessTemplate(tar)
      finally:
        tar.close()
    elif os.path.isfile(os.path.join(path, bt_title_path)):
      info('Reading Directory %s... ' % name)
      property_dict = readBusinessTemplateDirectory(path)
    else:
      continue
    xml.write('  <template id="%s">\n' % name)
    for k, v in sorted(property_dict.iteritems()):
      for v in (v,) if type(v) is str else v:
        xml.write('    <%s>%s</%s>\n' % (k, cgi.escape(v), k))
    xml.write('  </template>\n')
    info('done\n')
  xml.write('</repository>\n')
  return xml

def main(dir_list=None, **kw):
  if dir_list is None:
    kw.setdefault('info', sys.stdout.write)
    kw.setdefault('err', sys.stderr.write)
    dir_list = sys.argv[1:] or '.'

  for d in dir_list:
    bt5list = generateInformation(d, **kw).getvalue()
    d = os.path.join(d, 'bt5list.new')
    try:
      with open(d, 'wb') as f:
        f.write(bt5list)
      os.rename(d, d[:-4])
    finally:
      try:
        os.remove(d)
      except OSError:
        pass

if __name__ == "__main__":
  main()
