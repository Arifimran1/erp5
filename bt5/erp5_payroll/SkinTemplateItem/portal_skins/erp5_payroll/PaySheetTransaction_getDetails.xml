<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <tuple>
          <string>Products.PythonScripts.PythonScript</string>
          <string>PythonScript</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Python_magic</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>__ac_local_roles__</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

# Get Precision\n
precision = context.Base_getPreferredPrecision()\n
r_ = lambda x: context.Base_getRoundValue(x, precision)\n
\n
# this dict contain all paysheet details\n
details = {}\n
\n
# initialize total share\n
total_employer_share         = 0.0\n
total_taxable_employee_share = 0.0\n
\n
paysheet_cat = {}\n
object_list = []\n
\n
# get all Pay Sheet Line\n
gross_salary   = 0.0\n
net_salary     = 0.0\n
for object in context.objectValues():\n
  if object.getPortalType()==\'Pay Sheet Line\':\n
    # get the gross salary\n
    if object.getResource() == \'payroll_service_module/labour\':\n
      for cell in object.objectValues():\n
        if cell.getCategoriesList() == [\'tax_category/social/employer_share\', \'salary_range/france\']:\n
          gross_salary = r_(cell.getPrice())\n
        elif cell.getCategoriesList() == [\'tax_category/social/employee_share\', \'salary_range/france\']:\n
          net_salary = r_(cell.getPrice())\n
    else:\n
      object_list += [object]\n
\n
# change the sign\n
gross_salary = r_(-gross_salary)\n
net_salary   = r_(-net_salary)\n
\n
total_employee_share = r_(gross_salary - net_salary)\n
\n
\n
# Get the CSG salary\n
# This is only used for report\n
csg_salary = r_(0.97 * gross_salary)\n
\n
# Calculate the ceiling salary\n
# This is only used for report\n
ceiling_salary = 0.0\n
ceiling_salary_list = { 2003 : 2432.0\n
                      , 2004 : 2476.0\n
                      , 2005 : 2516.0\n
                      , 2006 : 2589.0\n
                      }\n
# the default ceiling salary is the last one\n
paysheet_year = context.getStartDate().year()\n
ceiling_salary_available_years = ceiling_salary_list.keys()\n
if paysheet_year not in ceiling_salary_available_years:\n
  paysheet_year = ceiling_salary_available_years[-1]\n
salary_limit = ceiling_salary_list[paysheet_year]\n
# limited salary = salaire plafonnee\n
if gross_salary < salary_limit:\n
  ceiling_salary = gross_salary\n
else:\n
  ceiling_salary = salary_limit\n
\n
# Get the list of all slice the employee fall in\n
# This is only used for report\n
slice_a_salary = 0.0\n
slice_b_salary = 0.0\n
slice_c_salary = 0.0\n
# "Char" slice type\n
slice_a_value = salary_limit\n
slice_b_value = salary_limit * 4\n
slice_c_value = salary_limit * 8\n
if gross_salary < slice_a_value:\n
  slice_a_salary = gross_salary\n
else:\n
  slice_a_salary = slice_a_value\n
  if gross_salary < slice_b_value:\n
    slice_b_salary = float(gross_salary) - float(slice_a_value)\n
  else:\n
    slice_b_salary = slice_b_value\n
    if gross_salary < slice_c_value:\n
      slice_c_salary = float(gross_salary) - float(slice_b_value)\n
    else:\n
      slice_c_salary = slice_c_value\n
\n
# Sort the list by id since lines are already ordered by id.\n
object_list.sort(lambda x, y: cmp(int(x.getId()), int(y.getId())))\n
for pay_sheet_line in object_list:\n
  variation_list = pay_sheet_line.getVariationCategoryList()\n
  range_variation = []\n
  for variation in variation_list:\n
    if variation.find(\'salary_range\') == 0:\n
      if not variation in range_variation: # Extra checking because\n
                                           # get VariationCategoryList returns\n
                                           # the same 1 items 2 times\n
                                           # This is normally no longer true, I fix this bug years ago (!)\n
        range_variation += [variation]\n
  for range in range_variation:\n
    pay_sheet_dict = {}\n
    pay_sheet_dict[\'id\'] = pay_sheet_line.getId()\n
    pay_sheet_dict[\'title\'] = pay_sheet_line.getResourceTitle()\n
    for cell in pay_sheet_line.objectValues():\n
      cat_list = cell.getCategoryList()\n
      if range in cat_list:\n
        pay_sheet_dict[\'base_name\'] = context.portal_categories.resolveCategory(range).getTitleOrId()\n
        for category in cat_list:\n
          # BUG: why cell.getTotalPrice() use the method from Amount instead of the one defined in Movement ?\n
          cell_price       = cell.getPrice()\n
          cell_quantity    = cell.getQuantity()\n
          cell_total_price = r_(cell_price * cell_quantity)\n
          # Hack not to display prime and ser\n
          if cell_total_price != 0 or cell.getResourceId() not in (\'primes\', \'retenue_maladie\'):\n
            if category.find(\'employee_share\') >= 0:\n
              pay_sheet_dict[\'base\'] = -cell_quantity # change the sign to beautify\n
              pay_sheet_dict[\'employee_share\'] = -cell_total_price\n
              pay_sheet_dict[\'employee_share_rate\'] = cell_price * 100\n
              # here we decide if a resource is taxable\n
              if str(pay_sheet_line.getResource())[-14:] == \'non_deductible\' or \\\n
                 str(pay_sheet_line.getResource())[-4:]  == \'crds\'           or \\\n
                 str(pay_sheet_line.getResource())[-7:]  == \'taxable\':\n
                pay_sheet_dict[\'taxable\'] = \'yes\'\n
              elif str(pay_sheet_line.getResource())[-10:] == \'deductible\':\n
                pay_sheet_dict[\'taxable\'] = \'no\'\n
              else:\n
                pay_sheet_dict[\'taxable\'] = \'no\'\n
              if pay_sheet_dict[\'taxable\'] == \'yes\':\n
                if pay_sheet_dict[\'employee_share\'] not in (\'\', None):\n
                  total_taxable_employee_share = r_(total_taxable_employee_share + r_(pay_sheet_dict[\'employee_share\']))\n
            elif category.find(\'employer_share\') >= 0:\n
              pay_sheet_dict[\'base\'] = -cell_quantity # change the sign for the beautification effect\n
              pay_sheet_dict[\'employer_share\'] = -cell_total_price\n
              pay_sheet_dict[\'employer_share_rate\'] = cell_price * 100\n
              if pay_sheet_dict[\'employer_share\'] not in (\'\', None):\n
                total_employer_share = r_(total_employer_share + r_(pay_sheet_dict[\'employer_share\']))\n
    for key in [\'employee_share\',\'employee_share_rate\',\'employer_share\',\'employer_share_rate\']:\n
      if not (pay_sheet_dict.has_key(key)):\n
        pay_sheet_dict[key] = \'\' # so that we can display nothing\n
\n
    # find the category of the current pay sheet line\n
    cat_id = None\n
    cat_path = None\n
    for var in variation_list:\n
      sub_cat = var.split(\'/\')\n
      if sub_cat[0] == \'tax_category\':\n
        cat_id = sub_cat[1]\n
        cat_path = sub_cat[0] + \'/\' + sub_cat[1]\n
        break\n
    if cat_id == None:\n
      cat_id = \'no_cat\'\n
    # add the current pay sheet line to its category\n
    if not paysheet_cat.has_key(cat_id):\n
      paysheet_cat[cat_id] = {}\n
      paysheet_cat[cat_id][\'lines\'] = []\n
    if cat_path != None:\n
      paysheet_cat[cat_id][\'title\'] = context.portal_categories.resolveCategory(cat_path).getTitleOrId()\n
    paysheet_cat[cat_id][\'lines\'].append(pay_sheet_dict)\n
\n
\n
# get all paysheet transaction to calculate the sum of different value in a year\n
accounting_folder = context.aq_parent\n
paysheet_transactions = accounting_folder.searchFolder(portal_type=\'Pay Sheet Transactionss\')\n
\n
# initialize every yearly variable\n
yearly_net_salary         = 0.0\n
yearly_gross_salary       = 0.0\n
yearly_csg_salary         = 0.0\n
yearly_ceiling_salary     = 0.0\n
yearly_slice_a_salary     = 0.0\n
yearly_slice_b_salary     = 0.0\n
yearly_slice_c_salary     = 0.0\n
yearly_employee_share     = 0.0\n
yearly_employer_share     = 0.0\n
yearly_taxable_net_salary = 0.0\n
\n
# get the current paysheet start date and employee\n
from DateTime import DateTime\n
start_date = context.getStartDate()\n
start_date = DateTime("%i/01/01" % start_date.year())\n
stop_date  = context.getStopDate()\n
employee   = context.restrictedTraverse(context.getDestinationSectionRelativeUrl())\n
\n
#start_date = start_date.strftime(\'%Y-%m-%d\')\n
#stop_date = start_date.strftime(\'%Y-%m-%d\')\n
#yearly_employee_share = -float(context.PaySheetTransaction_zGetDetailedTotal(start_date=start_date,stop_date=stop_date,tax_category=\'employee_share\')[0].total)\n
#yearly_employer_share = -float(context.PaySheetTransaction_zGetDetailedTotal(start_date=start_date,stop_date=stop_date,tax_category=\'employer_share\')[0].total)\n
\n
#try:\n
#  yearly_employer_share = -float(context.PaySheetTransaction_zGetDetailedTotal(start_date=start_date,stop_date=stop_date,tax_category=\'employer_share\')[0].total)\n
#except KeyError:\n
#  pass\n
\n
# browse through paysheet transaction\n
for paysheet_obj in paysheet_transactions:\n
  # ignore the current paysheet to avoid infinite loop\n
  if paysheet_obj.getId() != context.getId():\n
    # the paysheet must have the same employee\n
    if (employee == None) or \\\n
       (employee != None and \\\n
         context.restrictedTraverse(paysheet_obj.getDestinationSectionRelativeUrl()) == employee):\n
      # check the date\n
      if (start_date == None) or \\\n
         (start_date != None                                       and \\\n
           paysheet_obj.getStartDate() != None                     and \\\n
           start_date.year() == paysheet_obj.getStartDate().year() and \\\n
           paysheet_obj.getStartDate() <= start_date):\n
        # get all detailed values of the paysheet\n
        old_ps = paysheet_obj.PaySheetTransaction_getDetails()\n
        # sum of yearly values\n
        yearly_net_salary         = r_(yearly_net_salary         + r_(old_ps[\'net_salary\']))\n
        yearly_gross_salary       = r_(yearly_gross_salary       + r_(old_ps[\'gross_salary\']))\n
        yearly_csg_salary         = r_(yearly_csg_salary         + r_(old_ps[\'csg_salary\']))\n
        yearly_ceiling_salary     = r_(yearly_ceiling_salary     + r_(old_ps[\'ceiling_salary\']))\n
        yearly_slice_a_salary     = r_(yearly_slice_a_salary     + r_(old_ps[\'slice_a_salary\']))\n
        yearly_slice_b_salary     = r_(yearly_slice_b_salary     + r_(old_ps[\'slice_b_salary\']))\n
        yearly_slice_c_salary     = r_(yearly_slice_c_salary     + r_(old_ps[\'slice_c_salary\']))\n
        yearly_employee_share     = r_(yearly_employee_share     + r_(old_ps[\'total_employee_share\']))\n
        yearly_employer_share     = r_(yearly_employer_share     + r_(old_ps[\'total_employer_share\']))\n
        yearly_taxable_net_salary = r_(yearly_taxable_net_salary + r_(old_ps[\'taxable_net_salary\']))\n
\n
# save the total share values in the exported dict\n
details[\'net_salary\']                   = net_salary\n
details[\'gross_salary\']                 = gross_salary\n
details[\'csg_salary\']                   = csg_salary\n
details[\'ceiling_salary\']               = ceiling_salary\n
details[\'slice_a_salary\']               = slice_a_salary\n
details[\'slice_b_salary\']               = slice_b_salary\n
details[\'slice_c_salary\']               = slice_c_salary\n
details[\'paysheet_categories\']          = paysheet_cat\n
details[\'total_employee_share\']         = total_employee_share\n
details[\'total_employer_share\']         = total_employer_share\n
details[\'total_taxable_employee_share\'] = -total_taxable_employee_share # change the sign for the beautification effect\n
details[\'taxable_net_salary\']           = r_(total_taxable_employee_share + r_(details[\'net_salary\']))\n
\n
# don\'t forget to add the current values to the yearly sum\n
details[\'yearly_net_salary\']         = r_(yearly_net_salary         + r_(details[\'net_salary\']))\n
details[\'yearly_gross_salary\']       = r_(yearly_gross_salary       + r_(details[\'gross_salary\']))\n
details[\'yearly_csg_salary\']         = r_(yearly_csg_salary         + r_(details[\'csg_salary\']))\n
details[\'yearly_ceiling_salary\']     = r_(yearly_ceiling_salary     + r_(details[\'ceiling_salary\']))\n
details[\'yearly_slice_a_salary\']     = r_(yearly_slice_a_salary     + r_(details[\'slice_a_salary\']))\n
details[\'yearly_slice_b_salary\']     = r_(yearly_slice_b_salary     + r_(details[\'slice_b_salary\']))\n
details[\'yearly_slice_c_salary\']     = r_(yearly_slice_c_salary     + r_(details[\'slice_c_salary\']))\n
details[\'yearly_employee_share\']     = r_(yearly_employee_share     + r_(details[\'total_employee_share\']))\n
details[\'yearly_employer_share\']     = r_(yearly_employer_share     + r_(details[\'total_employer_share\']))\n
details[\'yearly_taxable_net_salary\'] = r_(yearly_taxable_net_salary + r_(details[\'taxable_net_salary\']))\n
\n
return details\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_code</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_dav_writelocks</string> </key>
            <value>
              <persistent> <string encoding="base64">AAAAAAAAAAI=</string> </persistent>
            </value>
        </item>
        <item>
            <key> <string>_filepath</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_owner</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>errors</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>func_code</string> </key>
            <value>
              <object>
                <klass>
                  <global name="FuncCode" module="Shared.DC.Scripts.Signature"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>co_argcount</string> </key>
                        <value> <int>0</int> </value>
                    </item>
                    <item>
                        <key> <string>co_varnames</string> </key>
                        <value>
                          <tuple>
                            <string>_getattr_</string>
                            <string>context</string>
                            <string>precision</string>
                            <string>r_</string>
                            <string>details</string>
                            <string>total_employer_share</string>
                            <string>total_taxable_employee_share</string>
                            <string>paysheet_cat</string>
                            <string>object_list</string>
                            <string>gross_salary</string>
                            <string>net_salary</string>
                            <string>_getiter_</string>
                            <string>object</string>
                            <string>cell</string>
                            <string>total_employee_share</string>
                            <string>csg_salary</string>
                            <string>ceiling_salary</string>
                            <string>ceiling_salary_list</string>
                            <string>paysheet_year</string>
                            <string>ceiling_salary_available_years</string>
                            <string>_getitem_</string>
                            <string>salary_limit</string>
                            <string>slice_a_salary</string>
                            <string>slice_b_salary</string>
                            <string>slice_c_salary</string>
                            <string>slice_a_value</string>
                            <string>slice_b_value</string>
                            <string>slice_c_value</string>
                            <string>float</string>
                            <string>pay_sheet_line</string>
                            <string>variation_list</string>
                            <string>range_variation</string>
                            <string>variation</string>
                            <string>range</string>
                            <string>pay_sheet_dict</string>
                            <string>_write_</string>
                            <string>cat_list</string>
                            <string>category</string>
                            <string>cell_price</string>
                            <string>cell_quantity</string>
                            <string>cell_total_price</string>
                            <string>str</string>
                            <string>None</string>
                            <string>key</string>
                            <string>cat_id</string>
                            <string>cat_path</string>
                            <string>var</string>
                            <string>sub_cat</string>
                            <string>accounting_folder</string>
                            <string>paysheet_transactions</string>
                            <string>yearly_net_salary</string>
                            <string>yearly_gross_salary</string>
                            <string>yearly_csg_salary</string>
                            <string>yearly_ceiling_salary</string>
                            <string>yearly_slice_a_salary</string>
                            <string>yearly_slice_b_salary</string>
                            <string>yearly_slice_c_salary</string>
                            <string>yearly_employee_share</string>
                            <string>yearly_employer_share</string>
                            <string>yearly_taxable_net_salary</string>
                            <string>DateTime</string>
                            <string>start_date</string>
                            <string>stop_date</string>
                            <string>employee</string>
                            <string>paysheet_obj</string>
                            <string>old_ps</string>
                          </tuple>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>func_defaults</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>PaySheetTransaction_getDetails</string> </value>
        </item>
        <item>
            <key> <string>warnings</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="2" aka="AAAAAAAAAAI=">
    <pickle>
      <tuple>
        <tuple>
          <string>Persistence</string>
          <string>PersistentMapping</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_container</string> </key>
            <value>
              <dictionary/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
