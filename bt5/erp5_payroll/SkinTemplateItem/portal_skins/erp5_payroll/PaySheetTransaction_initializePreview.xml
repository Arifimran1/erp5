<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <tuple>
          <string>Products.PythonScripts.PythonScript</string>
          <string>PythonScript</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Python_magic</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>__ac_local_roles__</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

"""\n
  This script create the data structure of the pay sheet preview (= the PaySheetTransaction_viewPreview fast input).\n
  Then it fill this data structure with rates and amounts of money from the localized pre calculation script.\n
"""\n
\n
from Products.ERP5Type.Document import newTempBase\n
from string import zfill\n
\n
portal = context.getPortalObject()\n
\n
# Get Precision\n
precision = context.getResourceValue().getQuantityPrecision()\n
r_ = lambda x: context.Base_getRoundValue(x, precision)\n
\n
\n
##########################\n
# This part of the script create the data structure designed to hold the result of pre calculation.\n
##########################\n
\n
# \'d\' is the dict which contain the default values of the Pay Sheet fast input\n
# TODO: Bad name ! Find something more explicit.\n
d = {}\n
\n
# During 06/2005 service module has been renamed service_module\n
# both names are supported\n
# XXX This should definitly use portal_catalog !!!\n
# XXX The following code will be deprecated when the Payroll Service portal type will be used.\n
if hasattr(portal, \'payroll_service_module\'):\n
  service_module = portal.payroll_service_module\n
elif hasattr(portal, \'service_module\'):\n
  service_module = portal.service_module\n
else:\n
  service_module = portal.service\n
\n
# Get all services related to pay sheet transaction\n
# TODO: Only choose services of the current localisation.\n
paysheet_services = []\n
for service in service_module.objectValues():\n
  # Check service validity\n
  # TODO: Use a validation workflow on Payroll Service and check the validity of a Service there\n
  base_categories = service.getVariationBaseCategoryList()\n
  if \'salary_range\' in base_categories and \'tax_category\' in base_categories:\n
    paysheet_services.append(service)\n
\n
# Create the pre-calculation data structure\n
for service in paysheet_services:\n
  # XXX Is there a better way to get categorylist ? Something like getCategoryList(base=\'tax_category\')\n
  #     will be nice to have.\n
  service_categories = service.getCategoryList()\n
  tax_categories          = []\n
  salary_range_categories = []\n
  for category in service_categories:\n
    if   category.startswith(\'tax_category/\'): tax_categories.append(category)\n
    elif category.startswith(\'salary_range/\'): salary_range_categories.append(category)\n
  # Create a preview line for each salary_range of the service.\n
  # This method is valid as long as we assume each line is composed of a base, an employee share\n
  #   and an employer share only.\n
  for salary_range in salary_range_categories:\n
    salary_range_object = context.portal_categories.resolveCategory(salary_range)\n
    if salary_range_object is None:\n
      context.log( "PaySheetTransaction_initializePreview"\n
                 , "WARNING! Category not found: %s" % salary_range\n
                 )\n
    else:\n
      preview_line_uid = "%s/%s" % (service.getId(), salary_range_object.getId())\n
      d[preview_line_uid] = { \'service\'       : service\n
                            , \'tax_categories\': tax_categories\n
                            , \'salary_range\'  : salary_range\n
                            , \'employer_share\': None\n
                            , \'employee_share\': None\n
                            , \'base\'          : None\n
                            , \'description\'   : None\n
                            }\n
\n
\n
\n
#########################################\n
# Get new values that came from "Update" action on Pay Sheet fast input.\n
# Currently we only keep fixed values which are part of the gross salary and addendum calculation.\n
#\n
# IDEA: Compare values from preCalculation script (rates and base) with the updated listbox\n
#       to keep user-defined values. Then merge them with current one. This is a good idea but\n
#       the decision algorithm must be smart.\n
#########################################\n
\n
UPDATE_SCRIPT = \'PaySheetTransaction_updateCalculation\'\n
# Get the updated listbox\n
selection_params = context.portal_selections.getSelectionParams(UPDATE_SCRIPT)\n
# Reset the selection (defensive strategy)\n
context.portal_selections.setSelectionParamsFor(UPDATE_SCRIPT, {})\n
updated_listbox = []\n
if selection_params.has_key(\'updated_listbox\'):\n
  updated_listbox = selection_params[\'updated_listbox\']\n
\n
\n
# Scan the listbox and look for complementary lines to add to the gross salary\n
new_gross_salary = r_(context.getGrossSalary())\n
for line in updated_listbox:\n
  salary_range = line[\'salary_range\']\n
  if salary_range not in [None, \'\'] and salary_range.startswith(\'salary_range/france/fixed/gross\'):\n
    # Get the employee or employer share as part of the multiline gross salary\n
    # The payroll service "setup convention" require that the fixed value should be defined on \'employer_share\'\n
    share_value = line[\'employer_share\']\n
    if share_value not in [None, \'\']: \n
      new_gross_salary = r_(new_gross_salary + r_(share_value))\n
\n
# Reset new salary if calculation goes bad\n
if new_gross_salary <= 0.0:\n
  new_gross_salary = None\n
\n
\n
# Everything which is part of gross salary and addendum calculation should be kept untouched.\n
# To keep thoses value, we should use the same dict format as in preCalculation script.\n
update_kw = {}\n
for line in updated_listbox:\n
  salary_range   = line[\'salary_range\']\n
  service_id     = line[\'service_id\']\n
  employee_share = line[\'employee_share\']\n
  employer_share = line[\'employer_share\']\n
  base           = line[\'base\']\n
  description    = line[\'description\']\n
  if salary_range not in [None, \'\']                                and \\\n
     service_id   not in [None, \'\']                                and \\\n
     base         not in [None, \'\']                                and \\\n
     (salary_range.startswith(\'salary_range/france/fixed/gross\')    or \\\n
      salary_range.startswith(\'salary_range/france/fixed/addendum\') ) and \\\n
     (employee_share not in [None, \'\'] or employer_share not in [None, \'\']):\n
    salary_range_id = salary_range.split(\'/\')[-1]\n
    line_uid = "%s/%s" % (service_id, salary_range_id)\n
    new_dict = { \'employer_share\': employer_share\n
               , \'employee_share\': employee_share\n
               , \'base\'          : base\n
               , \'description\'   : description\n
               }\n
    update_kw[line_uid] = new_dict\n
\n
\n
\n
#########################################\n
# This part of the script select the right localized version of\n
#   PaySheetTransaction_preCalculation_l10n script.\n
#\n
# TODO: implement here a generic method to get the right precalculation script automaticcaly.\n
#########################################\n
\n
# Force which script to use - BAD\n
country = \'fr\'\n
year    = \'2006\'\n
\n
script_name = \'_\'.join([ "PaySheetTransaction_preCalculation_l10n"\n
                       , country\n
                       , year\n
])\n
calculation_method = getattr(context, script_name)\n
pre_calculation = calculation_method(gross_salary=new_gross_salary)\n
\n
# Merge pre_calculation and preview line dict, or finaly override value from the update dict\n
preview_line_keys = d.items()[0][1].keys()\n
for k in pre_calculation.keys():\n
  if k in d.keys():\n
    for required_key in preview_line_keys:\n
      # Merge\n
      if not pre_calculation[k].has_key(required_key):\n
        pre_calculation[k][required_key] = d[k][required_key]\n
      # Override\n
      if update_kw.has_key(k) and update_kw[k].has_key(required_key):\n
        pre_calculation[k][required_key] = update_kw[k][required_key]\n
  else:\n
    context.log( "PaySheetTransaction_initializePreview"\n
               , "Preview line key \'%s\' not found in default services" % k\n
               )\n
    # Remove line\n
    del pre_calculation[k]\n
\n
# Create a preview line for every salary_range value of the service\n
preview_line_list = []\n
for (preview_line_id, preview_line_item) in pre_calculation.items():\n
  service      = preview_line_item[\'service\']\n
  salary_range = preview_line_item[\'salary_range\']\n
  service_id   = service.getId()\n
  # Create stable UID based on a combination of unique data per lines\n
  new_uid = "new_%s_%s" % (service_id, salary_range)\n
  o = newTempBase(portal, new_uid)\n
  o.setUid(new_uid)\n
  o.edit(uid=new_uid)\n
  o.edit( id                 = new_uid\n
        , base               = preview_line_item[\'base\']\n
        , employer_share     = preview_line_item[\'employer_share\']\n
        , employee_share     = preview_line_item[\'employee_share\']\n
        , service_title      = service.getTitleOrId()\n
        , service_id         = service_id\n
        , salary_range       = salary_range\n
        , salary_range_title = context.portal_categories.resolveCategory(salary_range).getTitleOrId()\n
        , tax_category       = preview_line_item[\'tax_categories\']\n
        , description        = preview_line_item[\'description\']\n
        )\n
  preview_line_list.append(o)\n
\n
# return the list of preview lines\n
return preview_line_list\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_code</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_filepath</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>**kw</string> </value>
        </item>
        <item>
            <key> <string>_proxy_roles</string> </key>
            <value>
              <tuple>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>errors</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>func_code</string> </key>
            <value>
              <object>
                <klass>
                  <global name="FuncCode" module="Shared.DC.Scripts.Signature"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>co_argcount</string> </key>
                        <value> <int>0</int> </value>
                    </item>
                    <item>
                        <key> <string>co_varnames</string> </key>
                        <value>
                          <tuple>
                            <string>kw</string>
                            <string>Products.ERP5Type.Document</string>
                            <string>newTempBase</string>
                            <string>string</string>
                            <string>zfill</string>
                            <string>_getattr_</string>
                            <string>context</string>
                            <string>portal</string>
                            <string>precision</string>
                            <string>r_</string>
                            <string>d</string>
                            <string>hasattr</string>
                            <string>service_module</string>
                            <string>paysheet_services</string>
                            <string>_getiter_</string>
                            <string>service</string>
                            <string>base_categories</string>
                            <string>service_categories</string>
                            <string>tax_categories</string>
                            <string>salary_range_categories</string>
                            <string>category</string>
                            <string>salary_range</string>
                            <string>salary_range_object</string>
                            <string>None</string>
                            <string>preview_line_uid</string>
                            <string>_write_</string>
                            <string>UPDATE_SCRIPT</string>
                            <string>selection_params</string>
                            <string>updated_listbox</string>
                            <string>_getitem_</string>
                            <string>new_gross_salary</string>
                            <string>line</string>
                            <string>share_value</string>
                            <string>update_kw</string>
                            <string>service_id</string>
                            <string>employee_share</string>
                            <string>employer_share</string>
                            <string>base</string>
                            <string>description</string>
                            <string>salary_range_id</string>
                            <string>line_uid</string>
                            <string>new_dict</string>
                            <string>country</string>
                            <string>year</string>
                            <string>script_name</string>
                            <string>getattr</string>
                            <string>calculation_method</string>
                            <string>pre_calculation</string>
                            <string>preview_line_keys</string>
                            <string>k</string>
                            <string>required_key</string>
                            <string>preview_line_list</string>
                            <string>preview_line_id</string>
                            <string>preview_line_item</string>
                            <string>new_uid</string>
                            <string>o</string>
                          </tuple>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>func_defaults</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>PaySheetTransaction_initializePreview</string> </value>
        </item>
        <item>
            <key> <string>warnings</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
