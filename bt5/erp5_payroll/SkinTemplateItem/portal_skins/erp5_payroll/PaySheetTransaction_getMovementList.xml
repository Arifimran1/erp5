<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string>\'\'\'\n
  This script return a Pay Sheet Line list with some new parameters on\n
  each Pay Sheet Line (like base, base_name, base_contribution_list,\n
  service,...)\n
  It\'s used in the PaySheetTransaction_view to display PaySheetLines\n
\'\'\'\n
\n
\n
from Products.ERP5Type.Utils import cartesianProduct\n
import pprint\n
from Products.ERP5Type.Message import translateString\n
\n
portal = context.getPortalObject();\n
paysheet_line_list = context.contentValues(portal_type=(\'Pay Sheet Line\', \'Pay Sheet Model Line\'))\n
if context.getPriceCurrencyValue() is not None:\n
  precision = context.getPriceCurrencyValue().getQuantityPrecision()\n
else:\n
  precision = 2\n
\n
\n
line_list = []\n
\n
for paysheet_line in paysheet_line_list:\n
  base_category_list = paysheet_line.getVariationBaseCategoryList()\n
  base_application_list = paysheet_line.getBaseApplicationTitleList()\n
  translated_base_application_list = [str(translateString(x)) for x in base_application_list]\n
  base_application_list = \', \'.join(translated_base_application_list)\n
  service = paysheet_line.getResourceValue(portal_type=\'Service\')\n
  base_contribution_list = paysheet_line.getBaseContributionList()\n
  causality = paysheet_line.getCausality()\n
\n
  base_list = [str(translateString(base_application)) for base_application in \\\n
      paysheet_line.getBaseApplicationTitleList()]\n
  base_name = \'+\'.join(base_list)\n
\n
  list_of_list = []\n
  for base_category in base_category_list:\n
    list = paysheet_line.getVariationCategoryList(base_category_list=\\\n
        base_category)\n
    list_of_list.append(list)\n
  cartesian_product = cartesianProduct(list_of_list)\n
\n
  previous_share = None\n
  indice = 0\n
\n
  if cartesian_product == [[]] or cartesian_product == []:\n
    params = {\n
                  \'base\':paysheet_line.getTotalPrice(),\n
                  \'base_contribution_list\':base_contribution_list,\n
                  \'base_application_list\': base_application_list,\n
                  \'service\': service is not None and\\\n
                                      service.getId() or \'\',\n
                  \'causality\': causality,}\n
    line_list.append(paysheet_line.asContext(**params))\n
    continue\n
\n
  object_dict = {}\n
  for product in cartesian_product:\n
    indice += 1\n
    share_dict = {}\n
    cell = paysheet_line.getCell(base_id=\'movement\', *product)\n
    if cell is None:\n
      continue\n
\n
    base = cell.getQuantity()\n
\n
    cell_contribution_share = cell.getBaseContributionTitle('').lower() or \'\'\n
    share_dict[cell_contribution_share+\'_price\'] = cell.getPrice()\n
    share_dict[cell_contribution_share+\'_quantity\'] = cell.getQuantity()\n
    share_dict[cell_contribution_share+\'_total_price\'] = \\\n
                    round(cell.getTotalPrice(), precision)\n
\n
    tuple_dict = {}\n
    for item in product:\n
      # the dict key is the base category and value is the category path\n
      tuple_dict[item.split(\'/\')[0]] = \\\n
        portal.portal_categories.restrictedTraverse(item).getShortTitle() or \\\n
        portal.portal_categories.restrictedTraverse(item).getTitle()\n
      tuple_dict[item.split(\'/\')[0]+\'_relative_url\']=item\n
\n
    # we want to display as lines as a paysheet line as slices\n
    # this is easier to read\n
    slice = cell.getSalaryRange()\n
    if slice is None:\n
      slice = \'no_slice\'\n
    if not object_dict.has_key(slice):\n
      slice_title = None\n
      if tuple_dict.has_key(\'salary_range\'):\n
        slice_title=tuple_dict[\'salary_range\']\n
      object_dict[slice]={\n
                    \'slice\':slice_title,\n
                    \'base_name\':base_name,\n
                    \'base\':base,\n
                    \'base_contribution_list\':base_contribution_list,\n
                    \'base_application_list\': base_application_list,\n
                    \'service\': service is not None and\\\n
                                        service.getId() or \'\',\n
                    \'causality\': causality,}\n
      object_dict[slice].update(share_dict)\n
    else:\n
      object_dict[slice].update(**share_dict)\n
\n
  if not object_dict:\n
    # when the variation categories are set, but no cells.\n
    slice_title = None\n
    salary_range_list = [category for category in paysheet_line.getVariationCategoryList()\n
                                  if category.startswith(\'salary_range\')]\n
    if salary_range_list:\n
      salary_range = portal.portal_categories.restrictedTraverse(salary_range_list[0])\n
      slice_title = salary_range.getShortTitle() or salary_range.getTitle()\n
\n
    params = {\n
      \'slice\': slice_title,\n
      \'base\': paysheet_line.getTotalPrice(),\n
      \'base_contribution_list\': base_contribution_list,\n
      \'base_application_list\': base_application_list,\n
      \'service\': service is not None and\\\n
                 service.getId() or \'\',\n
      \'causality\': causality,}\n
    line_list.append(paysheet_line.asContext(**params))\n
    continue\n
\n
#  print pprint.pformat(object_dict)\n
\n
  for object_key in paysheet_line.getSalaryRangeList():\n
    line_list.append(paysheet_line.asContext(**object_dict[object_key]))\n
  if object_dict.has_key(\'no_slice\'):\n
    line_list.append(paysheet_line.asContext(**object_dict[\'no_slice\']))\n
\n
\n
\n
# sort results\n
def sortByTitleAscending(x, y):\n
  return cmp(x.getTitle(), y.getTitle())\n
\n
def sortByTitleDescending(x, y):\n
  return cmp(y.getTitle(), x.getTitle())\n
\n
def sortByIntIndexAscending(x, y):\n
  return cmp(x.getIntIndex(), y.getIntIndex())\n
\n
def sortByIntIndexDescending(x, y):\n
  return cmp(y.getIntIndex(), x.getIntIndex())\n
\n
sortByDefaultSortMethod = sortByIntIndexAscending\n
\n
if kw.has_key(\'sort_on\'):\n
  list = kw[\'sort_on\']\n
  if list[0][0] == \'title\' and list[0][1]==\'ascending\':\n
    line_list.sort(sortByTitleAscending)\n
  elif list[0][0] == \'title\' and list[0][1]==\'descending\':\n
    line_list.sort(sortByTitleDescending)\n
  elif list[0][0] == \'int_index\' and list[0][1]==\'ascending\':\n
    line_list.sort(sortByIntIndexAscending)\n
  elif list[0][0] == \'int_index\' and list[0][1]==\'descending\':\n
    line_list.sort(sortByIntIndexDescending)\n
  else:\n
    line_list.sort(sortByDefaultSortMethod)\n
else:\n
  line_list.sort(sortByDefaultSortMethod)\n
\n
\n
\n
return line_list\n
</string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>**kw</string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>PaySheetTransaction_getMovementList</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
