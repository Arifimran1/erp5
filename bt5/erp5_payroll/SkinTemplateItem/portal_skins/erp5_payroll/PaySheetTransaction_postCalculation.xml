<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <tuple>
          <string>Products.PythonScripts.PythonScript</string>
          <string>PythonScript</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Python_magic</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>__ac_local_roles__</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

"""\n
  This script get lines and cells from the PaySheetTransaction_viewPreview Fast Input and\n
  contruct the Pay Sheet Lines object according their own data model.\n
  TODO: this script is too complicated and should be refactor a little to reduce is uneeded\n
        complexity (and increase its maintainability).\n
"""\n
\n
portal = context.getPortalObject()\n
N_     = portal.Base_translateString\n
\n
# Get Precision\n
precision = context.Base_getPreferredPrecision()\n
r_ = lambda x: context.Base_getRoundValue(x, precision)\n
\n
# Delete all objects in the paysheet\n
id_list = []\n
for paysheet_item in context.objectValues(portal_type=[\'Pay Sheet Transaction Line\', \'Pay Sheet Line\']):\n
  # Delete lines which became outdated and keep the payment_condition_payment_date sub-object\n
  id_list.append(paysheet_item.getId())\n
context.manage_delObjects(id_list)\n
\n
# This function register all paysheet informations in paysheet lines and cells\n
def createPaySheetItem(title=\'\', res=\'\', dest_org=\'\', desc=\'\', cells=[]):\n
  # Select good cells only\n
  good_cells = []\n
  for cell in cells:\n
    if cell["base"] not in (\'\', 0, None) and cell["rate"] not in (\'\', 0, None):\n
      good_cells.append(cell)\n
  if len(good_cells) == 0:\n
    return\n
  # Get all variation categories used in cells\n
  var_cat_list = []\n
  for cell in good_cells:\n
    # Don\'t add a variation category if already in it\n
    if cell["x"] not in var_cat_list:\n
      var_cat_list.append(cell["x"])\n
    if cell["y"] not in var_cat_list:\n
      var_cat_list.append(cell["y"])\n
  # Construct the description\n
  description = None\n
  if len(desc) > 0:\n
    description = \'\\n\'.join(desc)\n
  # Add a new Pay Sheet Line\n
  payline = context.newContent( portal_type                  = \'Pay Sheet Line\'\n
                              , title                        = title\n
                              , description                  = description\n
                              , source                       = context.getSourceSection()\n
                              , resource                     = res\n
                              , destination_section          = dest_org\n
                              , destination                  = dest_org\n
                              , variation_base_category_list = (\'tax_category\', \'salary_range\')\n
                              , variation_category_list      = var_cat_list\n
                              )\n
  base_id = \'movement\'\n
  payline.updateCellRange( script_id = \'PaySheetLine_asCellRange\'\n
                         , base_id   = base_id\n
                         )\n
  # create cells\n
  for cell in good_cells:\n
    cell_cat_list = [cell["x"], cell["y"]]\n
    paycell = payline.newCell(cell["x"], cell["y"], base_id = base_id)\n
    paycell.edit( mapped_value_property_list = (\'price\', \'quantity\')\n
                , quantity                   = cell["base"]\n
                , price                      = cell["rate"]\n
                , force_update               = 1\n
                , category_list              = cell_cat_list\n
                )\n
\n
# Set the title of the paysheet if empty\n
months = [ \'january\', \'february\', \'march\', \'april\', \'may\', \'june\', \'july\'\n
         , \'august\', \'september\', \'october\', \'november\', \'december\'\n
         ]\n
if context.getTitle() in (\'\', None):\n
  new_title = \'%s %s\' % ( N_(\'Salary\')\n
                        , context.getDestinationSectionValue().getTitle()\n
                        )\n
  if context.getStartDate() not in (\'\', None):\n
    payroll_date = context.getStartDate()\n
    new_title += \' %s %s\' % ( N_(months[payroll_date.month() - 1])\n
                            , payroll_date.year()\n
                            )\n
  context.setTitle(new_title)\n
\n
# This list contain all paysheet items, indexed by service\n
paysheet_items = {}\n
\n
# Initialise the user preview line index\n
user_line_index = 0\n
total_employee_share = 0.0\n
\n
# Scan every preview line to create an item for each service\n
for line in listbox:\n
  service_id     = line[\'service_id\']\n
  salary_range   = line[\'salary_range\']\n
  tax_categories = line[\'tax_category\']\n
  # Get the service object\n
  service = context.restrictedTraverse("payroll_service_module/%s" % service_id)\n
  # Check that the service doesn\'t exist\n
  if not paysheet_items.has_key(service_id):\n
    paysheet_items[service_id] = { \'title\'   : service.getTitleOrId()\n
                                 , \'desc\'    : []\n
                                 , \'res\'     : service.getRelativeUrl()\n
                                 , \'dest_org\': service.getSource()\n
                                 , \'cells\'   : []\n
                                 }\n
\n
# Get user paysheet parameters stored in listbox\n
for line in listbox:\n
  service_id = line[\'service_id\']\n
  base = line[\'base\']\n
  if base not in (None, \'\'):\n
    # Get the base salary if given by the user\n
    base = r_(base)\n
    # Scan allowed tax categories to get employee and/or employer share rate\n
    tax_categories = line[\'tax_category\']\n
    for cat in tax_categories:\n
      salary_range = line[\'salary_range\']\n
      # Define an empty new cell\n
      new_cell = None\n
      # Convert rate from percent\n
      employer_share = line[\'employer_share\']\n
      employee_share = line[\'employee_share\']\n
      if cat.endswith(\'/employer_share\') and employer_share not in (None, \'\'):\n
        share = float(employer_share)\n
        new_cell = { "x"    : cat\n
                   , "y"    : salary_range\n
                   , "base" : -base\n
                   , "rate" : share\n
                   }\n
      if cat.endswith(\'/employee_share\') and employee_share not in (None, \'\'):\n
        share = float(employee_share)\n
        new_cell = { "x"    : cat\n
                   , "y"    : salary_range\n
                   , "base" : -base\n
                   , "rate" : share\n
                   }\n
      #context.log("PaySheetTransaction_postCalculation","cat=%s base=%s rate=%s" % (cat, base, rate))\n
\n
        total_employee_share = r_(total_employee_share + r_(base * float(share)))\n
      # Add the cell to the conresponding paysheet item\n
      if new_cell != None:\n
        paysheet_items[service_id][\'cells\'].append(new_cell)\n
        # Save the comment as description\n
        if line[\'description\'] not in [\'\', None]:\n
          paysheet_items[service_id][\'desc\'].append(line[\'description\'])\n
\n
# Create a paysheet item for each service with user data in it\n
for item in paysheet_items.values():\n
  if item[\'cells\'] not in ([], None, \'\'):\n
    createPaySheetItem( title    = item[\'title\']\n
                      , res      = item[\'res\']\n
                      , dest_org = item[\'dest_org\']\n
                      , desc     = item[\'desc\']\n
                      , cells    = item[\'cells\']\n
                      )\n
\n
# Finaly add the salary line, with labour service as resource\n
portal = context.getPortalObject()\n
labour_service = portal.restrictedTraverse(\'payroll_service_module/labour\', None)\n
if labour_service is None:\n
  labour_service = portal.restrictedTraverse(\'service_module/labour\', None)\n
if labour_service is None:\n
  raise ValueError, "Unable to find `labour` service"\n
\n
gross_salary = r_(context.getGrossSalary())\n
\n
labour_employee_share_category = None\n
labour_employer_share_category = None\n
for c in labour_service.getCategoryList():\n
  if c.startswith(\'tax_category\'):\n
    if c.endswith(\'employee_share\'): labour_employee_share_category = c\n
    if c.endswith(\'employer_share\'): labour_employer_share_category = c\n
  if c.startswith(\'salary_range\'):\n
    labour_salary_range = c\n
\n
createPaySheetItem( title    = \'Salary\' # labour_service.getTitleOrId()\n
                  , res      = labour_service.getRelativeUrl()\n
                  , dest_org = context.getDestinationSection()\n
                  , cells    = [{ "x"    : labour_employee_share_category\n
                                , "y"    : labour_salary_range\n
                                , "base" : -1.0\n
                                , "rate" : r_(gross_salary - total_employee_share)\n
                                },\n
                                { "x"    : labour_employer_share_category\n
                                , "y"    : labour_salary_range\n
                                , "base" : -1.0\n
                                , "rate" : gross_salary\n
                                }]\n
                  )\n
\n
# Return to pay sheet\n
if not(kw.has_key(\'skip_redirect\') and kw[\'skip_redirect\'] == True):\n
  return context.REQUEST.RESPONSE.redirect(context.absolute_url() + \'?portal_status_message=Pay+sheet+calculation+done.\')\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_code</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_dav_writelocks</string> </key>
            <value>
              <persistent> <string encoding="base64">AAAAAAAAAAI=</string> </persistent>
            </value>
        </item>
        <item>
            <key> <string>_filepath</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>listbox=[], **kw</string> </value>
        </item>
        <item>
            <key> <string>errors</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>func_code</string> </key>
            <value>
              <object>
                <klass>
                  <global name="FuncCode" module="Shared.DC.Scripts.Signature"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>co_argcount</string> </key>
                        <value> <int>1</int> </value>
                    </item>
                    <item>
                        <key> <string>co_varnames</string> </key>
                        <value>
                          <tuple>
                            <string>listbox</string>
                            <string>kw</string>
                            <string>_getattr_</string>
                            <string>context</string>
                            <string>portal</string>
                            <string>N_</string>
                            <string>precision</string>
                            <string>r_</string>
                            <string>id_list</string>
                            <string>_getiter_</string>
                            <string>paysheet_item</string>
                            <string>createPaySheetItem</string>
                            <string>months</string>
                            <string>None</string>
                            <string>new_title</string>
                            <string>payroll_date</string>
                            <string>_getitem_</string>
                            <string>paysheet_items</string>
                            <string>user_line_index</string>
                            <string>total_employee_share</string>
                            <string>line</string>
                            <string>service_id</string>
                            <string>salary_range</string>
                            <string>tax_categories</string>
                            <string>service</string>
                            <string>_write_</string>
                            <string>base</string>
                            <string>cat</string>
                            <string>new_cell</string>
                            <string>employer_share</string>
                            <string>employee_share</string>
                            <string>float</string>
                            <string>share</string>
                            <string>item</string>
                            <string>labour_service</string>
                            <string>ValueError</string>
                            <string>gross_salary</string>
                            <string>labour_employee_share_category</string>
                            <string>labour_employer_share_category</string>
                            <string>c</string>
                            <string>labour_salary_range</string>
                            <string>True</string>
                          </tuple>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>func_defaults</string> </key>
            <value>
              <tuple>
                <list/>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>PaySheetTransaction_postCalculation</string> </value>
        </item>
        <item>
            <key> <string>warnings</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="2" aka="AAAAAAAAAAI=">
    <pickle>
      <tuple>
        <tuple>
          <string>Persistence</string>
          <string>PersistentMapping</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_container</string> </key>
            <value>
              <dictionary/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
