<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <tuple>
          <string>Products.PythonScripts.PythonScript</string>
          <string>PythonScript</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Python_magic</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>__ac_local_roles__</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

"""\n
  This script define all rates to apply in 2006 to calculate an entire paysheet\n
    according french fiscal & social rules for a SME.\n
"""\n
\n
\n
\n
##########################\n
# This part of the script define usefull variables to help us calculate dynamic rates and contributions.\n
# This part depend mostly of the current localisation.\n
##########################\n
\n
global paysheet\n
paysheet      = context.getObject()\n
paysheet_type = paysheet.getPortalType()\n
\n
employee = paysheet.getDestinationSectionValue()\n
company  = paysheet.getSourceSectionValue()\n
\n
# Get Paysheet datas\n
gross_salary = abs(paysheet.getGrossSalary())\n
start_date   = paysheet.getStartDate()\n
stop_date    = paysheet.getStopDate()\n
\n
# Each year, look at http://www.urssaf.fr to complete the table\n
ceiling_salary_list = { 2003: 2432.0\n
                      , 2004: 2476.0\n
                      , 2005: 2516.0\n
                      , 2006: 2589.0\n
                      }\n
# The default ceiling salary is the last one\n
paysheet_year = start_date.year()\n
ceiling_salary_available_years = ceiling_salary_list.keys()\n
if paysheet_year not in ceiling_salary_available_years:\n
  paysheet_year = ceiling_salary_available_years[-1]\n
ceiling_salary = ceiling_salary_list[paysheet_year]\n
\n
# Limited salary = salaire plafonnee\n
if gross_salary < ceiling_salary:\n
  limited_salary = gross_salary\n
else:\n
  limited_salary = ceiling_salary\n
\n
# Check if the employee is executive or not\n
if employee.getCareerGrade().endswith(\'engineer\'):\n
  executive = True\n
else:\n
  executive = False\n
\n
# Get company related data\n
company_birth = company.getCreationDate()\n
employee_list = company.Organisation_getEmployeeList( start_date = start_date\n
                                                    , stop_date  = stop_date\n
                                                    )\n
company_size  = len(employee_list)\n
\n
# Get the list of all slice the employee fall in\n
salary_slices = {}\n
\n
# "Char" slice type\n
slice_a_value = ceiling_salary\n
slice_b_value = ceiling_salary * 4\n
slice_c_value = ceiling_salary * 8\n
if gross_salary < slice_a_value:\n
  salary_slices[\'A\'] = gross_salary\n
else:\n
  salary_slices[\'A\'] = slice_a_value\n
  if gross_salary < slice_b_value:\n
    salary_slices[\'B\'] = float(gross_salary) - float(slice_a_value)\n
  else:\n
    salary_slices[\'B\'] = slice_b_value\n
    if gross_salary < slice_c_value:\n
      salary_slices[\'C\'] = float(gross_salary) - float(slice_b_value)\n
    else:\n
      salary_slices[\'C\'] = slice_c_value\n
\n
# "Number" slice type\n
slice_1_value = ceiling_salary\n
slice_2_value = ceiling_salary * 3\n
if gross_salary < slice_1_value:\n
  salary_slices[\'1\'] = gross_salary\n
else:\n
  salary_slices[\'1\'] = slice_1_value\n
  if gross_salary < slice_2_value:\n
    salary_slices[\'2\'] = gross_salary - slice_1_value\n
  else:\n
    salary_slices[\'2\'] = slice_2_value\n
\n
# Age-slice of the company\n
old_limit = DateTime(1997, 1, 1)\n
if company_birth < old_limit:\n
  comp_type = \'old\'\n
else:\n
  comp_type = \'new\'\n
\n
\n
\n
##########################\n
# This part of the script create the data structure designed to hold the result of pre calculation.\n
# TODO: This part must be generic to be moved outside this localized script. Probably in PaySheetTransaction_preCalculation.\n
##########################\n
\n
# \'d\' is the dict which contain the default values of the Pay Sheet fast input\n
d = {}\n
\n
# During 06/2005 service module has been renamed service_module\n
# both names are supported\n
# XXX This should definitly use portal_catalog !!!\n
# XXX The following code will be deprecated when the Payroll Service portal type will be used\n
erp5site = context.portal_url.getPortalObject()\n
if hasattr(erp5site, \'payroll_service_module\'):\n
  service_module = erp5site.payroll_service_module\n
elif hasattr(erp5site, \'service_module\'):\n
  service_module = erp5site.service_module\n
else:\n
  service_module = erp5site.service\n
\n
# Check service validity\n
# TODO: Use a validation workflow on Payroll Service and check the validity of a Service there\n
# TODO: Only choose services of the current localisation.\n
paysheet_services = []\n
for service in service_module.objectValues():\n
  base_cat = service.getVariationRangeBaseCategoryList()\n
  if \'tax_category\' in base_cat and \'salary_range\' in base_cat:\n
    paysheet_services.append(service)\n
\n
\n
for service in paysheet_services:\n
  # XXX Is there a better way to get categorylist ? Something like getCategoryList(base=\'tax_category\') will be nice to have.\n
  service_categories = service.getCategoryList()\n
  tax_categories          = []\n
  salary_range_categories = []\n
  for category in service_categories:\n
    if   category.startswith(\'tax_category/\'): tax_categories.append(category)\n
    elif category.startswith(\'salary_range/\'): salary_range_categories.append(category)\n
  for salary_range in salary_range_categories:\n
    salary_range_object = context.portal_categories.resolveCategory(salary_range)\n
    if salary_range_object is None:\n
      context.log( "PaySheetTransaction_preCalculation"\n
                 , "WARNING! Category not found: %s" % salary_range\n
                 )\n
    else:\n
      preview_line_uid = "%s/%s" % (service.getId(), salary_range_object.getId())\n
      d[preview_line_uid] = { \'employer_rate\': None\n
                            , \'employee_rate\': None\n
                            , \'base\'         : None\n
                            }\n
\n
\n
\n
##########################\n
# This part of the script calculate the default salaey range and rates.\n
# This part is the core of the script: all rates and amounts are defined below.\n
#\n
# Here is a model of a line definition:\n
#   d[\'payroll_service_id/salary_range_category_id\'] = \\\n
#   { \'employer_rate\' : employer_rate_in_percent\n
#   , \'employee_rate\' : employee_rate_in_percent\n
#   , \'base\'          : contribution_base_in_currency\n
#   }\n
# Rates and base must be floats.\n
# Be carefull: Rates are not in percents !\n
##########################\n
\n
# Sickness insurance = Assurance maladie\n
if executive:\n
  employer_rate = None\n
  employee_rate = 0.85\n
else:\n
  employer_rate = 13.10\n
  employee_rate = 0.75\n
d[\'sickness_insurance/salaire_brut\'] = \\\n
{ \'employer_rate\' : employer_rate\n
, \'employee_rate\' : employee_rate\n
, \'base\'          : gross_salary\n
}\n
\n
# Old-age insurance = Assurance vieillesse\n
if executive:\n
  d[\'oldage_insurance/salaire_plafonne\'] = \\\n
  { \'employer_rate\' : None\n
  , \'employee_rate\' : 6.65\n
  , \'base\'          : limited_salary\n
  }\n
else:\n
  d[\'oldage_insurance/salaire_brut\'] = \\\n
  { \'employer_rate\' : 1.60\n
  , \'employee_rate\' : 0.10\n
  , \'base\'          : gross_salary\n
  }\n
  d[\'oldage_insurance/salaire_plafonne\'] = \\\n
  { \'employer_rate\' : 8.30\n
  , \'employee_rate\' : 6.65\n
  , \'base\'          : limited_salary\n
  }\n
\n
# Family benefits = Allocations familliale\n
if not executive:\n
  d[\'family_benefits/salaire_brut\'] = \\\n
  { \'employer_rate\' : 5.40\n
  , \'employee_rate\' : None\n
  , \'base\'          : gross_salary\n
  }\n
\n
# Industrial accident = Accidents du travail\n
if not executive:\n
  d[\'industrial_accident/salaire_brut\'] = \\\n
  { \'employer_rate\' : 1.10\n
  , \'employee_rate\' : None\n
  , \'base\'          : gross_salary\n
  }\n
\n
# Lodging helps = Aide au logemenent\n
# if company_size > 9:\n
#   d[\'lodging_helps/salaire_brut\'] = \\\n
#   { \'employer_rate\' : 0.40\n
#   , \'employee_rate\' : None\n
#   , \'base\'          : gross_salary\n
#   }\n
# else:\n
#   d[\'lodging_helps/salaire_plafonne\'] = \\\n
#   { \'employer_rate\' : 0.10\n
#   , \'employee_rate\' : None\n
#   , \'base\'          : limited_salary\n
#   }\n
\n
# Transport payment\n
# TODO: rate depending of the town, 1.80 is the \'default\' value (when the town isn\'t referenced by laws)\n
if company_size > 9:\n
  d[\'transport_payment/salaire_brut\'] = \\\n
  { \'employer_rate\' : 1.80\n
  , \'employee_rate\' : None\n
  , \'base\'          : gross_salary\n
  }\n
\n
# CSG\n
d[\'csg_deductible/salaire_brut_csg\'] = \\\n
{ \'employer_rate\' : None\n
, \'employee_rate\' : 5.10\n
, \'base\'          : 0.97 * gross_salary\n
}\n
d[\'csg_non_deductible/salaire_brut_csg\'] = \\\n
{ \'employer_rate\' : None\n
, \'employee_rate\' : 2.9\n
, \'base\'          : 0.97 * gross_salary\n
}\n
\n
# CRDS\n
# d[\'crds/salaire_brut_crds\'] = \\\n
# { \'employer_rate\' : None\n
# , \'employee_rate\' : 0.50\n
# , \'base\'          : 0.97 * gross_salary\n
# }\n
\n
# Unemployment insurance = Assurance chomage\n
d[\'unemployment_insurance/salaire_brut\'] = \\\n
{ \'employer_rate\' : 4.04\n
, \'employee_rate\' : 2.44\n
, \'base\'          : gross_salary\n
}\n
\n
# FNGS\n
# Employer rate has changed starting from jul, 1st 2006\n
fngs_employer_rate = 0.25\n
if start_date >= DateTime(2006, 7, 1):\n
  fngs_employer_rate = 0.15\n
d[\'fngs/salaire_brut\'] = \\\n
{ \'employer_rate\' : fngs_employer_rate\n
, \'employee_rate\' : None\n
, \'base\'          : gross_salary\n
}\n
\n
# ARRCO\n
if not executive:\n
  if salary_slices.has_key(\'1\'):\n
    d[\'arrco/tranche_1\'] = \\\n
    { \'employer_rate\' : 4.5\n
    , \'employee_rate\' : 3.0\n
    , \'base\'          : salary_slices[\'1\']\n
    }\n
  if salary_slices.has_key(\'2\'):\n
    if comp_type == \'old\':\n
      employee_share_rate = 6.0\n
      employer_share_rate = 9.0\n
    else:\n
      employee_share_rate = 8.0\n
      employer_share_rate = 12.0\n
    d[\'arrco/tranche_2\'] = \\\n
    { \'employer_rate\' : employer_share_rate\n
    , \'employee_rate\' : employee_share_rate\n
    , \'base\'          : salary_slices[\'2\']\n
    }\n
elif salary_slices.has_key(\'A\'):\n
  d[\'arrco/tranche_a\'] = \\\n
  { \'employer_rate\' : 4.5\n
  , \'employee_rate\' : 3.0\n
  , \'base\'          : salary_slices[\'A\']\n
  }\n
\n
# AGFF\n
if executive:\n
  if salary_slices.has_key(\'A\'):\n
    d[\'agff_tranche_a/tranche_a\'] = \\\n
    { \'employer_rate\' : 1.20\n
    , \'employee_rate\' : 0.80\n
    , \'base\'          : salary_slices[\'A\']\n
    }\n
  if salary_slices.has_key(\'B\'):\n
    d[\'agff_tranche_b/tranche_b\'] = \\\n
    { \'employer_rate\' : 1.30\n
    , \'employee_rate\' : 0.90\n
    , \'base\'          : salary_slices[\'B\']\n
    }\n
else:\n
  if salary_slices.has_key(\'1\'):\n
    d[\'agff_tranche_a/tranche_1\'] = \\\n
    { \'employer_rate\' : 1.20\n
    , \'employee_rate\' : 0.80\n
    , \'base\'          : salary_slices[\'1\']\n
    }\n
  if salary_slices.has_key(\'2\'):\n
    d[\'agff_tranche_b/tranche_2\'] = \\\n
    { \'employer_rate\' : 1.30\n
    , \'employee_rate\' : 0.90\n
    , \'base\'          : salary_slices[\'2\']\n
    }\n
\n
# ARGIC\n
# TODO: fix the repartition of share rate in case of slice C\n
if executive:\n
  if salary_slices.has_key(\'B\'):\n
    d[\'argic/tranche_b\'] = \\\n
    { \'employer_rate\' : 12.60\n
    , \'employee_rate\' : 7.70\n
    , \'base\'          : salary_slices[\'B\']\n
    }\n
  if salary_slices.has_key(\'C\'):\n
    # free repartition (20.30% to share between employee & employer)\n
    d[\'argic/tranche_c\'] = \\\n
    { \'employer_rate\' : 10.15\n
    , \'employee_rate\' : 10.15\n
    , \'base\'          : salary_slices[\'C\']\n
    }\n
\n
# CET\n
if executive:\n
  if salary_slices.has_key(\'A\'):\n
    d[\'cet/tranche_a\'] = \\\n
    { \'employer_rate\' : 0.22\n
    , \'employee_rate\' : 0.13\n
    , \'base\'          : salary_slices[\'A\']\n
    }\n
  if salary_slices.has_key(\'B\'):\n
    d[\'cet/tranche_b\'] = \\\n
    { \'employer_rate\' : 0.22\n
    , \'employee_rate\' : 0.13\n
    , \'base\'          : salary_slices[\'B\']\n
    }\n
  if salary_slices.has_key(\'C\'):\n
    d[\'cet/tranche_c\'] = \\\n
    { \'employer_rate\' : 0.22\n
    , \'employee_rate\' : 0.13\n
    , \'base\'          : salary_slices[\'C\']\n
    }\n
\n
# Life insurance = Assurance vie\n
# if executive == True and salary_slices.has_key(\'A\'):\n
#   d[\'life_insurance/tranche_a\'] = \\\n
#   { \'employer_rate\' : 1.5\n
#   , \'employee_rate\' : None\n
#   , \'base\'          : salary_slices[\'A\']\n
#   }\n
\n
# APEC forfaitaire\n
if executive:\n
  d[\'apec/forfait\'] = \\\n
  { \'employer_rate\' : 3.72\n
  , \'employee_rate\' : 2.49\n
  , \'base\'          : 1.0\n
  }\n
  if salary_slices.has_key(\'B\'):\n
    d[\'apec/tranche_b\'] = \\\n
    { \'employer_rate\' : 0.036\n
    , \'employee_rate\' : 0.024\n
    , \'base\'          : salary_slices[\'B\']\n
    }\n
\n
# Retirement = Retraite Cadre forfaitaire\n
if executive:\n
  d[\'cavcic/forfait\'] = \\\n
  { \'employer_rate\' : 35.62\n
  , \'employee_rate\' : 21.21\n
  , \'base\'          : 1.0\n
  }\n
\n
# construction tax\n
# if company_size > 9:\n
#   d[\'construction_tax/salaire_brut\'] = \\\n
#   { \'employer_rate\' : 0.45\n
#   , \'employee_rate\' : None\n
#   , \'base\'          : gross_salary\n
#   }\n
\n
# training tax\n
# d[\'training_tax/salaire_brut\'] = \\\n
# { \'employer_rate\' : 0.50\n
# , \'employee_rate\' : None\n
# , \'base\'          : gross_salary\n
# }\n
\n
# courses tax\n
# if company_size < 10:\n
#   rate = 0.15\n
# else:\n
#   rate = 1.5\n
# d[\'courses_tax/salaire_brut\'] = \\\n
# { \'employer_rate\' : rate\n
# , \'employee_rate\' : None\n
# , \'base\'          : gross_salary\n
# }\n
\n
# Syntec convention\n
# TODO: We can\'t take the decision based on the CollectiveAgreementTitle since each\n
#       employee has the right to choose if they want benefit from the insurance or not.\n
#       We can use instead the social_contract property of the (near-)future HR-related stuff.\n
col_agr = employee.getCareerCollectiveAgreementTitle()\n
if col_agr not in (None, \'\') and \'syntec\' in col_agr.lower():\n
  # set the syntec rate according to the employee marital status\n
  syntec_rate = 0.96\n
  if employee.getMaritalStatusId() == \'married\':\n
    syntec_rate *= 2\n
  d[\'syntec_insurance/salaire_plafonne_syntec\'] = \\\n
  { \'employer_rate\' : syntec_rate\n
  , \'employee_rate\' : syntec_rate\n
  , \'base\'          : ceiling_salary\n
  }\n
\n
# Add blank lines for:\n
#   * wickness holding (= retenue maladie)\n
#   * pay bonus (= primes)\n
#   * non-working days (= absences)\n
# Thanks to this, the accountant has the freedom to add the missing amount of money\n
#   that this script can\'t guess.\n
d[\'retenue_maladie/forfait\'] = \\\n
{ \'employer_rate\' : None\n
, \'employee_rate\' : None\n
, \'base\'          : 1.0\n
}\n
d[\'primes/forfait\'] = \\\n
{ \'employer_rate\' : None\n
, \'employee_rate\' : None\n
, \'base\'          : 1.0\n
}\n
d[\'absences/forfait\'] = \\\n
{ \'employer_rate\' : None\n
, \'employee_rate\' : None\n
, \'base\'          : 1.0\n
}\n
\n
# Also add a brand new line for "Reduction Fillon", a negative contribution.\n
# This tax can be calculated automaticcaly.\n
# Because of lack of time we just let the accountant do the work.\n
# See coresponding service description for more details.\n
d[\'reduction_fillon_forfait/forfait\'] = \\\n
{ \'employer_rate\' : None\n
, \'employee_rate\' : None\n
, \'base\'          : 1.0\n
}\n
\n
# Because all rates above are written in percents, we must convert them in pure floats.\n
# TODO: this part is generic, so move it to PaySheetTransaction_preCalculation script.\n
for line_id in d.keys():\n
  # Only \'Fixed\' (or \'Forfait\' in french) base are expressed in percents\n
  if not line_id.endswith(\'/forfait\'):\n
    # Fix percents\n
    for share_type in [\'employer_rate\', \'employee_rate\']:\n
      share_value = d[line_id][share_type]\n
      if share_value not in (\'\', None):\n
        d[line_id][share_type] = share_value / 100.0\n
  # Normalize the value of \'Fixed\' (or \'Forfait\' in french) base to 1.0\n
  else:\n
    d[line_id][\'base\'] = 1.0\n
\n
return d\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_code</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_dav_writelocks</string> </key>
            <value>
              <persistent> <string encoding="base64">AAAAAAAAAAI=</string> </persistent>
            </value>
        </item>
        <item>
            <key> <string>_filepath</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_owner</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>errors</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>func_code</string> </key>
            <value>
              <object>
                <klass>
                  <global name="FuncCode" module="Shared.DC.Scripts.Signature"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>co_argcount</string> </key>
                        <value> <int>0</int> </value>
                    </item>
                    <item>
                        <key> <string>co_varnames</string> </key>
                        <value>
                          <tuple>
                            <string>_getattr_</string>
                            <string>context</string>
                            <string>paysheet</string>
                            <string>paysheet_type</string>
                            <string>employee</string>
                            <string>company</string>
                            <string>abs</string>
                            <string>gross_salary</string>
                            <string>start_date</string>
                            <string>stop_date</string>
                            <string>ceiling_salary_list</string>
                            <string>paysheet_year</string>
                            <string>ceiling_salary_available_years</string>
                            <string>_getitem_</string>
                            <string>ceiling_salary</string>
                            <string>limited_salary</string>
                            <string>True</string>
                            <string>executive</string>
                            <string>False</string>
                            <string>company_birth</string>
                            <string>employee_list</string>
                            <string>len</string>
                            <string>company_size</string>
                            <string>salary_slices</string>
                            <string>slice_a_value</string>
                            <string>slice_b_value</string>
                            <string>slice_c_value</string>
                            <string>_write_</string>
                            <string>float</string>
                            <string>slice_1_value</string>
                            <string>slice_2_value</string>
                            <string>DateTime</string>
                            <string>old_limit</string>
                            <string>comp_type</string>
                            <string>d</string>
                            <string>erp5site</string>
                            <string>hasattr</string>
                            <string>service_module</string>
                            <string>paysheet_services</string>
                            <string>_getiter_</string>
                            <string>service</string>
                            <string>base_cat</string>
                            <string>service_categories</string>
                            <string>tax_categories</string>
                            <string>salary_range_categories</string>
                            <string>category</string>
                            <string>salary_range</string>
                            <string>salary_range_object</string>
                            <string>None</string>
                            <string>preview_line_uid</string>
                            <string>employer_rate</string>
                            <string>employee_rate</string>
                            <string>fngs_employer_rate</string>
                            <string>employee_share_rate</string>
                            <string>employer_share_rate</string>
                            <string>col_agr</string>
                            <string>syntec_rate</string>
                            <string>line_id</string>
                            <string>share_type</string>
                            <string>share_value</string>
                          </tuple>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>func_defaults</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>PaySheetTransaction_preCalculation_l10n_fr_2006</string> </value>
        </item>
        <item>
            <key> <string>warnings</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="2" aka="AAAAAAAAAAI=">
    <pickle>
      <tuple>
        <tuple>
          <string>Persistence</string>
          <string>PersistentMapping</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_container</string> </key>
            <value>
              <dictionary/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
