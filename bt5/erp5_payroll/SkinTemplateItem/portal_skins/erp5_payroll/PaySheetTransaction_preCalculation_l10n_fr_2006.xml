<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <tuple>
          <string>Products.PythonScripts.PythonScript</string>
          <string>PythonScript</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Python_magic</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>__ac_local_roles__</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

"""\n
  This script define all rates to apply in 2006 to calculate an entire paysheet\n
    according french fiscal & social rules for a SME.\n
\n
  This script accept gross_salary parameter to override the default one.\n
  This is helpfull in case of update made on PaySheetTransaction_viewPreview fast input.\n
"""\n
\n
kw = {}\n
\n
# Get Precision\n
precision = context.getResourceValue().getQuantityPrecision()\n
r_ = lambda x: context.Base_getRoundValue(x, precision)\n
\n
\n
##########################\n
# This part of the script define usefull variables to help us calculate dynamic rates and contributions.\n
# This part depend mostly of the current localisation.\n
##########################\n
\n
paysheet      = context.getObject()\n
paysheet_type = paysheet.getPortalType()\n
\n
employee = paysheet.getDestinationSectionValue()\n
company  = paysheet.getSourceSectionValue()\n
\n
# Use the gross salary given as parameter or not\n
if gross_salary == None:\n
  gross_salary = abs(paysheet.getGrossSalary())\n
\n
start_date = paysheet.getStartDate()\n
stop_date  = paysheet.getStopDate()\n
\n
# Each year, look at http://www.urssaf.fr to complete the table\n
ceiling_salary_list = { 2003: 2432.0\n
                      , 2004: 2476.0\n
                      , 2005: 2516.0\n
                      , 2006: 2589.0\n
                      }\n
# The default ceiling salary is the last one\n
paysheet_year = start_date.year()\n
ceiling_salary_available_years = ceiling_salary_list.keys()\n
if paysheet_year not in ceiling_salary_available_years:\n
  paysheet_year = ceiling_salary_available_years[-1]\n
ceiling_salary = ceiling_salary_list[paysheet_year]\n
\n
# Limited salary = salaire plafonnee\n
if gross_salary < ceiling_salary:\n
  limited_salary = gross_salary\n
else:\n
  limited_salary = ceiling_salary\n
\n
# Check if the employee is executive or not\n
if employee.getCareerGrade().endswith(\'engineer\'):\n
  executive = True\n
else:\n
  executive = False\n
\n
# Get company related data\n
company_birth = company.getCreationDate()\n
employee_list = company.Organisation_getEmployeeList( start_date = start_date\n
                                                    , stop_date  = stop_date\n
                                                    )\n
company_size  = len(employee_list)\n
\n
# Get the list of all slice the employee fall in\n
salary_slices = {}\n
\n
# "Char" slice type\n
# TODO: Slices should be calculated based on the total gross salary over the year divided by 12 month.\n
#       This is why there is a problem for people who have changing gross salary over the year.\n
#       That\'s why accountants must do manual regulations in those cases.\n
slice_a_value = ceiling_salary\n
slice_b_value = r_(ceiling_salary * 4)\n
slice_c_value = r_(ceiling_salary * 8)\n
if gross_salary < slice_a_value:\n
  salary_slices[\'A\'] = gross_salary\n
else:\n
  salary_slices[\'A\'] = slice_a_value\n
  if gross_salary < slice_b_value:\n
    salary_slices[\'B\'] = float(gross_salary) - float(slice_a_value)\n
  else:\n
    salary_slices[\'B\'] = slice_b_value\n
    if gross_salary < slice_c_value:\n
      salary_slices[\'C\'] = float(gross_salary) - float(slice_b_value)\n
    else:\n
      salary_slices[\'C\'] = slice_c_value\n
\n
# "Number" slice type\n
slice_1_value = ceiling_salary\n
slice_2_value = r_(ceiling_salary * 3)\n
if gross_salary < slice_1_value:\n
  salary_slices[\'1\'] = gross_salary\n
else:\n
  salary_slices[\'1\'] = slice_1_value\n
  if gross_salary < slice_2_value:\n
    salary_slices[\'2\'] = gross_salary - slice_1_value\n
  else:\n
    salary_slices[\'2\'] = slice_2_value\n
\n
# Age-slice of the company\n
old_limit = DateTime(1997, 1, 1)\n
if company_birth < old_limit:\n
  comp_type = \'old\'\n
else:\n
  comp_type = \'new\'\n
\n
\n
\n
##########################\n
# This part of the script calculate the default salaey range and rates.\n
# This part is the core of the script: all rates and amounts are defined below.\n
#\n
# Here is a model of a line definition:\n
#   kw[\'payroll_service_id/salary_range_category_id\'] = \\\n
#   { \'employer_share\': employer_rate_in_percent\n
#   , \'employee_share\': employee_rate_in_percent\n
#   , \'base\'          : contribution_base_in_currency\n
#   }\n
# Rates and base must be floats.\n
# Rates are expressed in percents during the decision process but normalized at the end of that script.\n
##########################\n
\n
# Sickness insurance = Assurance maladie\n
if executive:\n
  employer_rate = None\n
  employee_rate = 0.85\n
else:\n
  employer_rate = 12.80\n
  employee_rate = 0.75\n
kw[\'sickness_insurance/salaire_brut\'] = \\\n
{ \'employer_share\': employer_rate\n
, \'employee_share\': employee_rate\n
, \'base\'          : gross_salary\n
}\n
\n
# Old-age insurance = Assurance vieillesse\n
if executive:\n
  kw[\'oldage_insurance/salaire_plafonne\'] = \\\n
  { \'employer_share\': None\n
  , \'employee_share\': 6.65\n
  , \'base\'          : limited_salary\n
  }\n
else:\n
  kw[\'oldage_insurance/salaire_brut\'] = \\\n
  { \'employer_share\': 1.60\n
  , \'employee_share\': 0.10\n
  , \'base\'          : gross_salary\n
  }\n
  kw[\'oldage_insurance/salaire_plafonne\'] = \\\n
  { \'employer_share\': 8.30\n
  , \'employee_share\': 6.65\n
  , \'base\'          : limited_salary\n
  }\n
\n
# Family benefits = Allocations familliale\n
if not executive:\n
  kw[\'family_benefits/salaire_brut\'] = \\\n
  { \'employer_share\': 5.40\n
  , \'employee_share\': None\n
  , \'base\'          : gross_salary\n
  }\n
\n
# Industrial accident = Accidents du travail\n
if not executive:\n
  kw[\'industrial_accident/salaire_brut\'] = \\\n
  { \'employer_share\': 1.10\n
  , \'employee_share\': None\n
  , \'base\'          : gross_salary\n
  }\n
\n
# Lodging helps = Aide au logemenent\n
# if company_size > 9:\n
#   kw[\'lodging_helps/salaire_brut\'] = \\\n
#   { \'employer_share\': 0.40\n
#   , \'employee_share\': None\n
#   , \'base\'          : gross_salary\n
#   }\n
# else:\n
kw[\'lodging_helps/salaire_plafonne\'] = \\\n
{ \'employer_share\': 0.10\n
, \'employee_share\': None\n
, \'base\'          : limited_salary\n
}\n
\n
# Solidarity day = Journee de Solidaritee\n
kw[\'solidarity_day/salaire_brut\'] = \\\n
{ \'employer_share\': 0.30\n
, \'employee_share\': None\n
, \'base\'          : gross_salary\n
}\n
\n
# Transport payment\n
# TODO: rate depending of the town, 1.80 is the \'default\' value (when the town isn\'t referenced by laws)\n
# TODO: Even if the company size is more than 9, you don\'t pay this contribution until 3 years.\n
#       The 4th year you pay 25%\n
#       The 5th year you pay 50%\n
#       The 6th year you pay 75%\n
#       Starting from the 7th year you pay 100%\n
# if company_size > 9:\n
#   kw[\'transport_payment/salaire_brut\'] = \\\n
#   { \'employer_share\': 1.80\n
#   , \'employee_share\': None\n
#   , \'base\'          : gross_salary\n
#   }\n
\n
# CRDS\n
# kw[\'crds/salaire_brut_crds\'] = \\\n
# { \'employer_share\': None\n
# , \'employee_share\': 0.50\n
# , \'base\'          : 0.97 * gross_salary\n
# }\n
\n
# Unemployment insurance = Assurance chomage\n
kw[\'unemployment_insurance/salaire_brut\'] = \\\n
{ \'employer_share\': 4.04\n
, \'employee_share\': 2.44\n
, \'base\'          : gross_salary\n
}\n
\n
# FNGS\n
# Employer rate has changed starting from jul, 1st 2006\n
fngs_employer_rate = 0.25\n
if start_date >= DateTime(2006, 7, 1):\n
  fngs_employer_rate = 0.15\n
kw[\'fngs/salaire_brut\'] = \\\n
{ \'employer_share\': fngs_employer_rate\n
, \'employee_share\': None\n
, \'base\'          : gross_salary\n
}\n
\n
# ARRCO\n
if not executive:\n
  if salary_slices.has_key(\'1\'):\n
    kw[\'arrco/tranche_1\'] = \\\n
    { \'employer_share\': 4.5\n
    , \'employee_share\': 3.0\n
    , \'base\'          : salary_slices[\'1\']\n
    }\n
  if salary_slices.has_key(\'2\'):\n
    if comp_type == \'old\':\n
      employee_share_rate = 6.0\n
      employer_share_rate = 9.0\n
    else:\n
      employee_share_rate = 8.0\n
      employer_share_rate = 12.0\n
    kw[\'arrco/tranche_2\'] = \\\n
    { \'employer_share\': employer_share_rate\n
    , \'employee_share\': employee_share_rate\n
    , \'base\'          : salary_slices[\'2\']\n
    }\n
elif salary_slices.has_key(\'A\'):\n
  kw[\'arrco/tranche_a\'] = \\\n
  { \'employer_share\': 4.5\n
  , \'employee_share\': 3.0\n
  , \'base\'          : salary_slices[\'A\']\n
  }\n
\n
# AGFF\n
if executive:\n
  if salary_slices.has_key(\'A\'):\n
    kw[\'agff_tranche_a/tranche_a\'] = \\\n
    { \'employer_share\': 1.20\n
    , \'employee_share\': 0.80\n
    , \'base\'          : salary_slices[\'A\']\n
    }\n
  if salary_slices.has_key(\'B\'):\n
    kw[\'agff_tranche_b/tranche_b\'] = \\\n
    { \'employer_share\': 1.30\n
    , \'employee_share\': 0.90\n
    , \'base\'          : salary_slices[\'B\']\n
    }\n
else:\n
  if salary_slices.has_key(\'1\'):\n
    kw[\'agff_tranche_a/tranche_1\'] = \\\n
    { \'employer_share\': 1.20\n
    , \'employee_share\': 0.80\n
    , \'base\'          : salary_slices[\'1\']\n
    }\n
  if salary_slices.has_key(\'2\'):\n
    kw[\'agff_tranche_b/tranche_2\'] = \\\n
    { \'employer_share\': 1.30\n
    , \'employee_share\': 0.90\n
    , \'base\'          : salary_slices[\'2\']\n
    }\n
\n
# ARGIC\n
# TODO: fix the repartition of share rate in case of slice C\n
if executive:\n
  if salary_slices.has_key(\'B\'):\n
    kw[\'argic/tranche_b\'] = \\\n
    { \'employer_share\': 12.60\n
    , \'employee_share\': 7.70\n
    , \'base\'          : salary_slices[\'B\']\n
    }\n
  if salary_slices.has_key(\'C\'):\n
    # free repartition (20.30% to share between employee & employer)\n
    kw[\'argic/tranche_c\'] = \\\n
    { \'employer_share\': 10.15\n
    , \'employee_share\': 10.15\n
    , \'base\'          : salary_slices[\'C\']\n
    }\n
\n
# CET\n
if executive:\n
  if salary_slices.has_key(\'A\'):\n
    kw[\'cet/tranche_a\'] = \\\n
    { \'employer_share\': 0.22\n
    , \'employee_share\': 0.13\n
    , \'base\'          : salary_slices[\'A\']\n
    }\n
  if salary_slices.has_key(\'B\'):\n
    kw[\'cet/tranche_b\'] = \\\n
    { \'employer_share\': 0.22\n
    , \'employee_share\': 0.13\n
    , \'base\'          : salary_slices[\'B\']\n
    }\n
  if salary_slices.has_key(\'C\'):\n
    kw[\'cet/tranche_c\'] = \\\n
    { \'employer_share\': 0.22\n
    , \'employee_share\': 0.13\n
    , \'base\'          : salary_slices[\'C\']\n
    }\n
\n
# Life insurance = Assurance vie\n
# if executive == True and salary_slices.has_key(\'A\'):\n
#   kw[\'life_insurance/tranche_a\'] = \\\n
#   { \'employer_share\': 1.5\n
#   , \'employee_share\': None\n
#   , \'base\'          : salary_slices[\'A\']\n
#   }\n
\n
# APEC forfaitaire\n
if executive:\n
  # This contribution is due for March only\n
  comp_date = DateTime(start_date.year(), 3, 31)\n
  while comp_date < comp_date:\n
    comp_date = DateTime(comp_date.year() + 1, 3, 31)\n
  if start_date <= comp_date <= stop_date:\n
    kw[\'apec/forfait\'] = \\\n
    { \'employer_share\': 3.72\n
    , \'employee_share\': 2.49\n
    , \'base\'          : 1.0\n
    }\n
  if salary_slices.has_key(\'B\'):\n
    kw[\'apec/tranche_b\'] = \\\n
    { \'employer_share\': 0.036\n
    , \'employee_share\': 0.024\n
    , \'base\'          : salary_slices[\'B\']\n
    }\n
\n
# Retirement = Retraite Cadre forfaitaire\n
if executive and not salary_slices.has_key(\'B\') and not salary_slices.has_key(\'C\'):\n
  kw[\'cavcic/forfait\'] = \\\n
  { \'employer_share\': 35.62\n
  , \'employee_share\': 21.21\n
  , \'base\'          : 1.0\n
  }\n
\n
# construction tax\n
# if company_size > 9:\n
#   kw[\'construction_tax/salaire_brut\'] = \\\n
#   { \'employer_share\': 0.45\n
#   , \'employee_share\': None\n
#   , \'base\'          : gross_salary\n
#   }\n
\n
# training tax\n
# kw[\'training_tax/salaire_brut\'] = \\\n
# { \'employer_share\': 0.50\n
# , \'employee_share\': None\n
# , \'base\'          : gross_salary\n
# }\n
\n
# courses tax\n
# if company_size < 10:\n
#   rate = 0.15\n
# else:\n
#   rate = 1.5\n
# kw[\'courses_tax/salaire_brut\'] = \\\n
# { \'employer_share\': rate\n
# , \'employee_share\': None\n
# , \'base\'          : gross_salary\n
# }\n
\n
# CSG base salary is hard to calculate because it add "mutuelle" and "prevoyance" employer share\n
#   contribution to the base salary and reduce it to 97%.\n
CSG_BASE_RATE = 0.97\n
csg_base_salary = gross_salary\n
\n
# Syntec convention insurances\n
# TODO: We should use the social_contract property of the (near-)future HR-related stuff to\n
#         define collective conventions the employee belong to. Same to add custom paysheet\n
#         calculation which depend of the employment contract between the employee and the\n
#         employer.\n
col_agr = employee.getCareerCollectiveAgreementTitle()\n
if col_agr not in (None, \'\') and \'syntec\' in col_agr.lower():\n
  insurrances_base = 0.0\n
  # Add "mutuelle" and "prevoyance" employer share to csg_base_salary when required\n
  # Set the syntec rate according to the employee marital status\n
  syntec_rate = 0.96\n
  if employee.getMaritalStatusId() == \'married\':\n
    syntec_rate *= 2\n
  kw[\'syntec_insurance/salaire_plafonne_syntec\'] = \\\n
  { \'employer_share\': syntec_rate\n
  , \'employee_share\': syntec_rate\n
  , \'base\'          : ceiling_salary\n
  }\n
  insurrances_base += r_(ceiling_salary * (syntec_rate / 100.0))\n
  # Prevoyance insurance (part of SYNTEC requirements)\n
  if salary_slices.has_key(\'A\'):\n
    RATE = 0.70\n
    BASE = salary_slices[\'A\']\n
    kw[\'prevoyance/tranche_a\'] = \\\n
    { \'employer_share\': RATE\n
    , \'employee_share\': None\n
    , \'base\'          : BASE\n
    }\n
    insurrances_base += r_(BASE * (RATE / 100.0))\n
  if salary_slices.has_key(\'B\'):\n
    RATE = 0.54\n
    BASE = salary_slices[\'B\']\n
    kw[\'prevoyance/tranche_b\'] = \\\n
    { \'employer_share\': RATE\n
    , \'employee_share\': RATE\n
    , \'base\'          : BASE\n
    }\n
    insurrances_base += r_(BASE * (RATE / 100.0))\n
  # Final tax on the contribution (!)\n
  kw[\'taxe_prevoyance/variable\'] = \\\n
  { \'employer_share\': 8.0\n
  , \'employee_share\': None\n
  , \'base\'          : insurrances_base\n
  }\n
  csg_base_salary += insurrances_base\n
\n
# CSG\n
kw[\'csg_deductible/salaire_brut_csg\'] = \\\n
{ \'employer_share\': None\n
, \'employee_share\': 5.10\n
, \'base\'          : CSG_BASE_RATE * csg_base_salary\n
}\n
kw[\'csg_non_deductible/salaire_brut_csg\'] = \\\n
{ \'employer_share\': None\n
, \'employee_share\': 2.9\n
, \'base\'          : CSG_BASE_RATE * csg_base_salary\n
}\n
\n
# Also add a brand new line for "Reduction Fillon", a "negative" contribution.\n
# This tax can be calculated automaticcaly.\n
# Because of lack of time we just let the accountant do the work.\n
# See coresponding service description for more details.\n
kw[\'reduction_fillon_forfait/forfait\'] = \\\n
{ \'employer_share\': None\n
, \'employee_share\': None\n
, \'base\'          : 1.0\n
}\n
\n
# Add blank lines for services which is a variable part od the gross salary.\n
# Thanks to this, the accountant has the freedom to add the missing amount of money\n
#   that this script can\'t guess.\n
kw[\'retenue_maladie/gross\'] = \\\n
{ \'employer_share\': None\n
, \'employee_share\': None\n
, \'base\'          : 1.0\n
}\n
kw[\'primes/gross\'] = \\\n
{ \'employer_share\': None\n
, \'employee_share\': None\n
, \'base\'          : 1.0\n
}\n
kw[\'absences/gross\'] = \\\n
{ \'employer_share\': None\n
, \'employee_share\': None\n
, \'base\'          : 1.0\n
}\n
kw[\'iccp/gross\'] = \\\n
{ \'employer_share\': None\n
, \'employee_share\': None\n
, \'base\'          : 1.0\n
}\n
kw[\'precarite/gross\'] = \\\n
{ \'employer_share\': None\n
, \'employee_share\': None\n
, \'base\'          : 1.0\n
}\n
kw[\'acompte/addendum\'] = \\\n
{ \'employer_share\': None\n
, \'employee_share\': None\n
, \'base\'          : 1.0\n
}\n
kw[\'remboursement_loyer/addendum\'] = \\\n
{ \'employer_share\': None\n
, \'employee_share\': None\n
, \'base\'          : 1.0\n
}\n
kw[\'remboursement_frais/addendum\'] = \\\n
{ \'employer_share\': None\n
, \'employee_share\': None\n
, \'base\'          : 1.0\n
}\n
\n
\n
# Normalize\n
for line_key in kw.keys():\n
  # Only \'variable\' contribution are expressed in percents of a base\n
  line = kw[line_key]\n
  # \'Fixed\' contributions\n
  if line_key.endswith(\'/gross\')  or \\\n
     line_key.endswith(\'/forfait\'):\n
    # Defensive programming: be sure conventions are respected\n
    kw[line_key][\'base\'] = 1.0\n
    # Round values\n
    for (key, value) in kw[line_key].items():\n
      if key in [\'employee_share\', \'employer_share\'] and value != None:\n
        kw[line_key][key] = r_(kw[line_key][key])\n
  # \'Variable\' contributions\n
  else:\n
    # All rates in this script are written in percents, we must convert them in pure floats.\n
    for share_type in [\'employer_share\', \'employee_share\']:\n
      share_value = line[share_type]\n
      if share_value not in [\'\', None]:\n
        # Fix percents\n
        kw[line_key][share_type] = share_value / 100.0\n
    # Round base\n
    if line[\'base\'] not in [\'\', None]:\n
      kw[line_key][\'base\'] = r_(line[\'base\'])\n
\n
return kw\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_code</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_filepath</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_owner</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>gross_salary=None</string> </value>
        </item>
        <item>
            <key> <string>errors</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>func_code</string> </key>
            <value>
              <object>
                <klass>
                  <global name="FuncCode" module="Shared.DC.Scripts.Signature"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>co_argcount</string> </key>
                        <value> <int>1</int> </value>
                    </item>
                    <item>
                        <key> <string>co_varnames</string> </key>
                        <value>
                          <tuple>
                            <string>gross_salary</string>
                            <string>kw</string>
                            <string>_getattr_</string>
                            <string>context</string>
                            <string>precision</string>
                            <string>r_</string>
                            <string>paysheet</string>
                            <string>paysheet_type</string>
                            <string>employee</string>
                            <string>company</string>
                            <string>None</string>
                            <string>abs</string>
                            <string>start_date</string>
                            <string>stop_date</string>
                            <string>ceiling_salary_list</string>
                            <string>paysheet_year</string>
                            <string>ceiling_salary_available_years</string>
                            <string>_getitem_</string>
                            <string>ceiling_salary</string>
                            <string>limited_salary</string>
                            <string>True</string>
                            <string>executive</string>
                            <string>False</string>
                            <string>company_birth</string>
                            <string>employee_list</string>
                            <string>len</string>
                            <string>company_size</string>
                            <string>salary_slices</string>
                            <string>slice_a_value</string>
                            <string>slice_b_value</string>
                            <string>slice_c_value</string>
                            <string>_write_</string>
                            <string>float</string>
                            <string>slice_1_value</string>
                            <string>slice_2_value</string>
                            <string>DateTime</string>
                            <string>old_limit</string>
                            <string>comp_type</string>
                            <string>employer_rate</string>
                            <string>employee_rate</string>
                            <string>fngs_employer_rate</string>
                            <string>employee_share_rate</string>
                            <string>employer_share_rate</string>
                            <string>comp_date</string>
                            <string>CSG_BASE_RATE</string>
                            <string>csg_base_salary</string>
                            <string>col_agr</string>
                            <string>insurrances_base</string>
                            <string>syntec_rate</string>
                            <string>RATE</string>
                            <string>BASE</string>
                            <string>_getiter_</string>
                            <string>line_key</string>
                            <string>line</string>
                            <string>key</string>
                            <string>value</string>
                            <string>share_type</string>
                            <string>share_value</string>
                          </tuple>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>func_defaults</string> </key>
            <value>
              <tuple>
                <none/>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>PaySheetTransaction_preCalculation_l10n_fr_2006</string> </value>
        </item>
        <item>
            <key> <string>warnings</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
