<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <tuple>
          <string>Products.PythonScripts.PythonScript</string>
          <string>PythonScript</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Python_magic</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>__ac_local_roles__</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

"""\n
The main search script. Receives one big string - a SearchableText, in\n
the search syntax, parses the string using external method parseSearchString,\n
then does the following:\n
- processes arguments for searching by any category (this requires SQLCatalog patch)\n
- selects search mode\n
- adds creation and modification date clauses\n
- searches\n
- if requested, filters result so that only the user\'s docs are returned\n
- if requested, filters result to return only the newest versions\n
\n
TODO: use catalog to get only the user\'s docs - this implementation is slow.\n
"""\n
\n
# if no args we return empty list\n
# we use only SearchableText - all params are passed through this\n
\n
# SearchableText can be supplied in request or stored in selection\n
sstr = context.REQUEST.get(\'SearchableText\')\n
if not sstr:\n
  sstr = kw.get(\'SearchableText\')\n
if not sstr: return []\n
\n
args = context.parseSearchString(sstr)\n
\n
# if no portal type specified, take all\n
if not args.has_key(\'portal_type\') or args[\'portal_type\'] == ():\n
  args[\'portal_type\'] = context.Base_getSearchableTypeList()\n
\n
# process searching by category\n
cats = []\n
bases = context.portal_categories.getBaseCategoryList()\n
for k,v in args.items():\n
  if k in bases:\n
    cats.append(\'/\'.join((k, v)))\n
if cats != []:\n
  args[\'category\'] = cats\n
\n
# expand simplified notation of search mode\n
mode = args.get(\'mode\')\n
modemap = {\'natural\':0, \'boolean\':\'in_boolean_mode\', \'expanded\':\'with_query_expansion\'}\n
if mode and modemap.has_key(mode):\n
  args[\'search_mode\'] = modemap[mode]\n
\n
kw.update(args)\n
\n
# a hack because SQLCatalog wants table.key now \n
# dunno if it is a bug or a feature\n
if kw.has_key(\'SearchableText\'):\n
  kw[\'full_text.SearchableText\'] = kw[\'SearchableText\']\n
  kw.pop(\'SearchableText\')\n
\n
cf = kw.get(\'creation_from\')\n
ct = kw.get(\'creation_to\')\n
mf = kw.get(\'modification_from\')\n
mt = kw.get(\'modification_to\')\n
\n
wheres = []\n
if cf:\n
  wheres.append(\'creation_date>"\' + cf.strftime(\'%Y-%m-%d\') + \'"\')\n
if ct:\n
  wheres.append(\'creation_date<"\' + cf.strftime(\'%Y-%m-%d\') + \'"\')\n
if mf:\n
  wheres.append(\'modification_date>"\' + cf.strftime(\'%Y-%m-%d\') + \'"\')\n
if mt:\n
  wheres.append(\'modification_date<"\' + cf.strftime(\'%Y-%m-%d\') + \'"\')\n
if wheres != []:\n
  kw[\'where_expression\'] = \' AND \'.join(wheres)\n
\n
# now we search\n
# any language?\n
if kw.get(\'language\') == \'0\': kw.pop(\'language\')\n
context.log(\'SEARCH:\',args)\n
res = context.portal_catalog(**kw)\n
\n
# user wants only his documents\n
if args.get(\'mine\'): \n
  context.log(\'mine\')\n
  from AccessControl import getSecurityManager\n
  sm = getSecurityManager()\n
  u = sm.getUser()\n
  # now we need to filter by owner\n
  # some day we will do it in catalog\n
  res = [r for r in res if u.allowed(r.getObject(), (\'Owner\',))]\n
\n
#...and now we check for only the newest versions\n
# but we need to preserve order\n
if args.get(\'newest\'):\n
  context.log(\'newest\')\n
  idx = {} # for keeping the last version of every reference\n
  # this way we do reduce the number of docs very fast (without calling catalog)\n
  newest = [] # for keeping order as it was\n
  counter = 0\n
  for r in res:\n
    ref = r.getReference()\n
    try:\n
      ver = int(r.getVersion())\n
    except ValueError:\n
      continue\n
    if idx.has_key(ref):\n
      if idx[ref][0] >= ver:\n
        continue\n
      else:\n
        del newest[idx[ref][1]]\n
        counter -= 1\n
    newest.append(r)\n
    idx[ref] = (ver, counter)\n
    counter += 1\n
  # now that we have only one per reference, we can play with languages and revisions\n
  res = [doc.getLatestVersionValue() for doc in newest]\n
\n
\n
return res\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_code</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_filepath</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_owner</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>**kw</string> </value>
        </item>
        <item>
            <key> <string>errors</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>func_code</string> </key>
            <value>
              <object>
                <klass>
                  <global name="FuncCode" module="Shared.DC.Scripts.Signature"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>co_argcount</string> </key>
                        <value> <int>0</int> </value>
                    </item>
                    <item>
                        <key> <string>co_varnames</string> </key>
                        <value>
                          <tuple>
                            <string>kw</string>
                            <string>_getattr_</string>
                            <string>context</string>
                            <string>sstr</string>
                            <string>args</string>
                            <string>_getitem_</string>
                            <string>_write_</string>
                            <string>cats</string>
                            <string>bases</string>
                            <string>_getiter_</string>
                            <string>k</string>
                            <string>v</string>
                            <string>mode</string>
                            <string>modemap</string>
                            <string>cf</string>
                            <string>ct</string>
                            <string>mf</string>
                            <string>mt</string>
                            <string>wheres</string>
                            <string>_apply_</string>
                            <string>res</string>
                            <string>AccessControl</string>
                            <string>getSecurityManager</string>
                            <string>sm</string>
                            <string>u</string>
                            <string>append</string>
                            <string>$append0</string>
                            <string>r</string>
                            <string>idx</string>
                            <string>newest</string>
                            <string>counter</string>
                            <string>ref</string>
                            <string>int</string>
                            <string>ver</string>
                            <string>ValueError</string>
                            <string>doc</string>
                          </tuple>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>func_defaults</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>Base_getAdvancedSearchResultList</string> </value>
        </item>
        <item>
            <key> <string>warnings</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
