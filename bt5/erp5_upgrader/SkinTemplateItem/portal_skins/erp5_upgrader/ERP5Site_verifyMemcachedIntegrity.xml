<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string>"""\n
  Verify if this instance is a properly configured one.\n
  This script could be used in functional tests\n
"""\n
plugin_id_list = [\'default_memcached_plugin\',\'persistent_memcached_plugin\']\n
portal = context.getPortalObject()\n
key_prefix = \'upgrade_verification\'\n
if getattr(portal, "erp5_site_global_id", None) == "test_client_chroot":\n
    # This is a test environment so all instance will have the same prefix.\n
    # change key_prefix to prevent useless failure.\n
    key_prefix = \'upgrade_verification%s\' % str(float(DateTime()))\n
\n
message_list = []\n
\n
def assertEquals(value1, value2, label=""):\n
  if not (value1 == value2):\n
    message_list.append("Memcached: %s Fail (%s != %s)" % (label, value1, value2))\n
\n
def assertNotEquals(value1, value2, label=""):\n
  if not (value1 != value2):\n
    message_list.append("Memcached: %s Fail (%s == %s)" % (label, value1, value2))\n
\n
# Verify if memcached and plugins are present into the instance\n
portal_memcached = getattr(portal, "portal_memcached", None)\n
if portal_memcached is not None:\n
  plugin_object_id_list = portal_memcached.objectIds()\n
  for plugin_id in plugin_id_list:\n
    if plugin_id not in plugin_object_id_list:\n
      message_list.append("Memcached plugin %s is not present." % plugin_id)\n
else: \n
  message_list.append("Portal Memcached is not present.")\n
\n
# Test Plugins\n
def getMemcachedDict(plugin_path):\n
  return portal_memcached.getMemcachedDict(key_prefix=key_prefix, \n
                   plugin_path=plugin_path)\n
\n
# If this is not None the value was get from another instance\n
site_id = getattr(portal, "erp5_site_global_id", None)\n
for plugin_id in plugin_id_list:\n
  plugin_object = getMemcachedDict(\'portal_memcached/%s\' % plugin_id)\n
  if plugin_object.get("upgrade_verification_key") in ("Foo Bar", None):\n
    # Solve some possible legacy.\n
    plugin_object["upgrade_verification_key"] = site_id\n
  assertEquals(plugin_object.get("upgrade_verification_key", site_id),\n
    site_id, "upgrade_verification_key")\n
  plugin_object.set("upgrade_verification_key", site_id)\n
  assertEquals(plugin_object.get("upgrade_verification_key", None),\n
    site_id, "upgrade_verification_key")\n
\n
return message_list\n
</string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>_proxy_roles</string> </key>
            <value>
              <tuple>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>ERP5Site_verifyMemcachedIntegrity</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
