<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <global name="File" module="OFS.Image"/>
        <tuple/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts65545388.59</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>jquery.simulate.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/x-javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/*\n
 * jquery.simulate - simulate browser mouse and keyboard events\n
 *\n
 * Copyright (c) 2009 Eduardo Lundgren (eduardolundgren@gmail.com)\n
 * and Richard D. Worth (rdworth@gmail.com)\n
 *\n
 * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php) \n
 * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.\n
 *\n
 */\n
\n
;(function($) {\n
\n
$.fn.extend({\n
\tsimulate: function(type, options) {\n
\t\treturn this.each(function() {\n
\t\t\tvar opt = $.extend({}, $.simulate.defaults, options || {});\n
\t\t\tnew $.simulate(this, type, opt);\n
\t\t});\n
\t}\n
});\n
\n
$.simulate = function(el, type, options) {\n
\tthis.target = el;\n
\tthis.options = options;\n
\n
\tif (/^drag$/.test(type)) {\n
\t\tthis[type].apply(this, [this.target, options]);\n
\t} else {\n
\t\tthis.simulateEvent(el, type, options);\n
\t}\n
}\n
\n
$.extend($.simulate.prototype, {\n
\tsimulateEvent: function(el, type, options) {\n
\t\tvar evt = this.createEvent(type, options);\n
\t\tthis.dispatchEvent(el, type, evt, options);\n
\t\treturn evt;\n
\t},\n
\tcreateEvent: function(type, options) {\n
\t\tif (/^mouse(over|out|down|up|move)|(dbl)?click$/.test(type)) {\n
\t\t\treturn this.mouseEvent(type, options);\n
\t\t} else if (/^key(up|down|press)$/.test(type)) {\n
\t\t\treturn this.keyboardEvent(type, options);\n
\t\t}\n
\t},\n
\tmouseEvent: function(type, options) {\n
\t\tvar evt;\n
\t\tvar e = $.extend({\n
\t\t\tbubbles: true, cancelable: (type != "mousemove"), view: window, detail: 0,\n
\t\t\tscreenX: 0, screenY: 0, clientX: 0, clientY: 0,\n
\t\t\tctrlKey: false, altKey: false, shiftKey: false, metaKey: false,\n
\t\t\tbutton: 0, relatedTarget: undefined\n
\t\t}, options);\n
\n
\t\tvar relatedTarget = $(e.relatedTarget)[0];\n
\n
\t\tif ($.isFunction(document.createEvent)) {\n
\t\t\tevt = document.createEvent("MouseEvents");\n
\t\t\tevt.initMouseEvent(type, e.bubbles, e.cancelable, e.view, e.detail,\n
\t\t\t\te.screenX, e.screenY, e.clientX, e.clientY,\n
\t\t\t\te.ctrlKey, e.altKey, e.shiftKey, e.metaKey,\n
\t\t\t\te.button, e.relatedTarget || document.body.parentNode);\n
\t\t} else if (document.createEventObject) {\n
\t\t\tevt = document.createEventObject();\n
\t\t\t$.extend(evt, e);\n
\t\t\tevt.button = { 0:1, 1:4, 2:2 }[evt.button] || evt.button;\n
\t\t}\n
\t\treturn evt;\n
\t},\n
\tkeyboardEvent: function(type, options) {\n
\t\tvar evt;\n
\n
\t\tvar e = $.extend({ bubbles: true, cancelable: true, view: window,\n
\t\t\tctrlKey: false, altKey: false, shiftKey: false, metaKey: false,\n
\t\t\tkeyCode: 0, charCode: 0\n
\t\t}, options);\n
\n
\t\tif ($.isFunction(document.createEvent)) {\n
\t\t\ttry {\n
\t\t\t\tevt = document.createEvent("KeyEvents");\n
\t\t\t\tevt.initKeyEvent(type, e.bubbles, e.cancelable, e.view,\n
\t\t\t\t\te.ctrlKey, e.altKey, e.shiftKey, e.metaKey,\n
\t\t\t\t\te.keyCode, e.charCode);\n
\t\t\t} catch(err) {\n
\t\t\t\tevt = document.createEvent("Events");\n
\t\t\t\tevt.initEvent(type, e.bubbles, e.cancelable);\n
\t\t\t\t$.extend(evt, { view: e.view,\n
\t\t\t\t\tctrlKey: e.ctrlKey, altKey: e.altKey, shiftKey: e.shiftKey, metaKey: e.metaKey,\n
\t\t\t\t\tkeyCode: e.keyCode, charCode: e.charCode\n
\t\t\t\t});\n
\t\t\t}\n
\t\t} else if (document.createEventObject) {\n
\t\t\tevt = document.createEventObject();\n
\t\t\t$.extend(evt, e);\n
\t\t}\n
\t\tif ($.browser.msie || $.browser.opera) {\n
\t\t\tevt.keyCode = (e.charCode > 0) ? e.charCode : e.keyCode;\n
\t\t\tevt.charCode = undefined;\n
\t\t}\n
\t\treturn evt;\n
\t},\n
\n
\tdispatchEvent: function(el, type, evt) {\n
\t\tif (el.dispatchEvent) {\n
\t\t\tel.dispatchEvent(evt);\n
\t\t} else if (el.fireEvent) {\n
\t\t\tel.fireEvent(\'on\' + type, evt);\n
\t\t}\n
\t\treturn evt;\n
\t},\n
\n
\tdrag: function(el) {\n
\t\tvar self = this, center = this.findCenter(this.target), \n
\t\t\toptions = this.options,\tx = Math.floor(center.x), y = Math.floor(center.y), \n
\t\t\tdx = options.dx || 0, dy = options.dy || 0, target = this.target;\n
\t\tvar coord = { clientX: x, clientY: y };\n
\t\tthis.simulateEvent(target, "mousedown", coord);\n
\t\tcoord = { clientX: x + 1, clientY: y + 1 };\n
\t\tthis.simulateEvent(document, "mousemove", coord);\n
\t\tcoord = { clientX: x + dx, clientY: y + dy };\n
\t\tthis.simulateEvent(document, "mousemove", coord);\n
\t\tthis.simulateEvent(document, "mousemove", coord);\n
\t\tthis.simulateEvent(target, "mouseup", coord);\n
\t},\n
\tfindCenter: function(el) {\n
\t\tvar el = $(this.target), o = el.offset();\n
\t\treturn {\n
\t\t\tx: o.left + el.outerWidth() / 2,\n
\t\t\ty: o.top + el.outerHeight() / 2\n
\t\t};\n
\t}\n
});\n
\n
$.extend($.simulate, {\n
\tdefaults: {\n
\t\tspeed: \'sync\'\n
\t},\n
\tVK_TAB: 9,\n
\tVK_ENTER: 13,\n
\tVK_ESC: 27,\n
\tVK_PGUP: 33,\n
\tVK_PGDN: 34,\n
\tVK_END: 35,\n
\tVK_HOME: 36,\n
\tVK_LEFT: 37,\n
\tVK_UP: 38,\n
\tVK_RIGHT: 39,\n
\tVK_DOWN: 40\n
});\n
\n
})(jQuery);\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <long>4308</long> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
