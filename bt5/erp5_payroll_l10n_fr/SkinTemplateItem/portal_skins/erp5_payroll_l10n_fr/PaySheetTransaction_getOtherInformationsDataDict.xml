<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
        <tuple/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string>translateString = context.Base_translateString\n
request = context.REQUEST\n
quantity_renderer = context.Base_viewFieldLibrary.my_money_quantity.render_pdf\n
\n
model = context.getSpecialiseValue()\n
def getPropertyFromModel(model, property_name):\n
  """Get a property from the paysheet model, or from a specialised model.\n
  """\n
  v = model.getProperty(property_name)\n
  if v:\n
    return v\n
  for specialised_model in model.getSpecialiseValueList():\n
    v = getPropertyFromModel(specialised_model, property_name)\n
    if v:\n
      return v\n
\n
def getFieldAsString(field):\n
  return \', \'.join(getFieldAsLineList(field))\n
\n
def getFieldAsLineList(field):\n
  """Returns the text as a list of lines."""\n
  field = field or \'\'\n
  text = field.replace(\'\\r\', \'\')\n
  text_list = text.split(\'\\n\')\n
  return [x for x in text_list if x]\n
\n
def getSocialCodeId(social_code_id):\n
  s = \'\'\n
  if social_code_id:\n
    s += \'%s: %s\' % (translateString(\'Social Code\'), social_code_id)\n
  return s\n
\n
def getCareerId(career_title):\n
  s = \'\'\n
  if career_title and career_title != \'default_career\':\n
    s += \'%s: %s\' % (translateString(\'Career Title\'), career_title)\n
  return s\n
\n
def getCollectiveAgreementId(collective_agreement):\n
  s = \'\'\n
  if collective_agreement:\n
    s += \'%s: %s\' % (translateString(\'Collective Agreement\'), collective_agreement)\n
  return s\n
\n
def getSalaryLevelId(salary_level):\n
  s = \'\'\n
  if salary_level:\n
    s += \'%s: %s\' % (translateString(\'Salary Level\'), salary_level)\n
  return s\n
\n
def getCareerCoefficientId(career_coefficient):\n
  s = \'\'\n
  if career_coefficient:\n
    s += \'%s: %s\' % (translateString(\'Salary Coefficient\'), career_coefficient)\n
  return s\n
\n
def getHiringDateId(date):\n
  s = \'\'\n
  if date:\n
    s += \'%s: %s\' % (translateString(\'Hiring Date\'), date)\n
  return s\n
\n
def getPriceCurrencyId(currency):\n
  s = \'\'\n
  if currency:\n
    s += \'%s: %s\' % (translateString(\'Price Currency\'), currency)\n
  return s\n
\n
taxable_net_pay = context.PaySheetTransaction_getMovementTotalPriceFromCategory(\\\n
    base_contribution=\'base_contribution/base_amount/taxable_net_pay\',\n
    tax_category=\'tax_category/employee_share\')\n
def getTaxableNetPayId(taxable_net_pay):\n
  s = \'\'\n
  if taxable_net_pay:\n
    s += \'%s: %s\' % (translateString(\'Taxable Net Pay\'), taxable_net_pay)\n
  return s\n
\n
total_employee_tax = context.PaySheetTransaction_getMovementTotalPriceFromCategory(\\\n
    base_contribution=\'base_contribution/base_amount/total_deductions\',\n
    tax_category=\'tax_category/employee_share\')\n
def getTotalEmployeeTaxId(total_employee_tax):\n
  s = \'\'\n
  if total_employee_tax:\n
    s += \'%s: %s\' % (translateString(\'Total Employee Tax\'),\n
        quantity_renderer(total_employee_tax))\n
  return s\n
\n
total_employer_tax = context.PaySheetTransaction_getMovementTotalPriceFromCategory(\\\n
    base_contribution=\'base_contribution/base_amount/total_deductions\',\n
    tax_category=\'tax_category/employer_share\')\n
def getTotalEmployerTaxId(total_employer_tax):\n
  s = \'\'\n
  if total_employer_tax:\n
    s += \'%s: %s\' % (translateString(\'Total Employer Tax\'),\n
        quantity_renderer(total_employer_tax))\n
  return s\n
\n
\n
preferred_date_order = context.getPortalObject().portal_preferences\\\n
                                          .getPreferredDateOrder() or \'ymd\'\n
separator = \'/\'\n
def getOrderedDate(date):\n
  if date is None:\n
    return \'\'\n
  pattern = separator.join([\'%%%s\' % s for s in list(preferred_date_order)])\n
  pattern = pattern.replace(\'y\', \'Y\')\n
  return date.strftime(pattern)\n
\n
def getPaymentConditionText(paysheet):\n
  date = \'\'\n
  if paysheet.getProperty(\'default_payment_condition_payment_date\'):\n
    date = getOrderedDate(paysheet.getProperty(\'default_payment_condition_payment_date\'))\n
  if paysheet.getPaymentConditionPaymentEndOfMonth():\n
    date = translateString("End of Month")\n
  days = paysheet.getPaymentConditionPaymentTerm()\n
  if days:\n
    date = \'%s %s\' % (days, translateString(\'Days\'))\n
\n
  if date:\n
    if paysheet.getProperty(\'default_payment_condition_payment_mode_title\'):\n
      return \'%s: %s\' % (translateString(\'Payment\'),\n
          translateString(\'${payment_mode} at ${payment_date}\', \n
            mapping = {\'payment_mode\': paysheet.getProperty(\'default_payment_condition_payment_mode_title\'),\n
                       \'payment_date\':date}))\n
    else:\n
      return \'%s: %s %s\' % (translateString(\'Payment\'),\n
          translateString(\'at\'),\n
          date)\n
  return \'\'\n
\n
gross_salary = context.PaySheetTransaction_getMovementTotalPriceFromCategory(\\\n
    base_contribution=\'base_contribution/base_amount/gross_salary\',\n
    tax_category=\'tax_category/employee_share\')\n
year_to_date_gross_salary = context.PaySheetTransaction_getYearToDateBaseContributionTotalPrice(\\\n
    paysheet=context, base_contribution_list=\'gross_salary\') + gross_salary\n
\n
year_to_date_slice_a = context.PaySheetTransaction_getYearToDateSlice(\'salary_range/france/tranche_a\')\n
\n
worked_hour_count = context.getWorkTimeAnnotationLineQuantity() and\\\n
    context.getWorkTimeAnnotationLineQuantity(0)\n
year_to_date_worked_hour_count = worked_hour_count + \\\n
    context.PaySheetTransaction_getYearToDateWorkTimeSalary() or 0\n
    \n
\n
over_time_small_rate = context.getAnnotationLineFromReference(reference=\'overtime_small_rate\')\n
over_time_big_rate = context.getAnnotationLineFromReference(reference=\'overtime_big_rate\')\n
bonus_worked_hour_count = over_time_small_rate is not None and \\\n
    over_time_big_rate is not None and \\\n
    over_time_small_rate.getQuantity() + over_time_big_rate.getQuantity() or 0\n
year_to_date_bonus_worked_hour_count = bonus_worked_hour_count + \\\n
    context.PaySheetTransaction_getYearToDateOvertimeHours() or 0\n
\n
year_to_date_bonus_worked_hour_amount = context.PaySheetTransaction_getYearToDateBaseContributionTotalPrice(\\\n
    paysheet=context, base_contribution_list=\'overtime\') + \\\n
    context.PaySheetTransaction_getMovementTotalPriceFromCategory(\\\n
    base_contribution=\'base_contribution/base_amount/overtime\', \\\n
    tax_category=\'tax_category/employee_share\') or 0\n
\n
taxable_net_pay = context.PaySheetTransaction_getMovementTotalPriceFromCategory(\\\n
    base_contribution=\'base_contribution/base_amount/taxable_net_pay\',\n
    tax_category=\'tax_category/employee_share\')\n
year_to_date_taxable_net_salary = context.PaySheetTransaction_getYearToDateBaseContributionTotalPrice(\\\n
    paysheet=context, base_contribution_list=\'taxable_net_pay\') + taxable_net_pay\n
\n
def unicodeDict(d):\n
  for k, v in d.items():\n
    if isinstance(v, str):\n
      d.update({k:unicode(v, \'utf8\')})\n
  return d\n
\n
source_section = context.getSourceSectionValue()\n
\n
data_dict = {\n
  \'source_section_title\': source_section.getProperty(\'corporate_name\') or\\\n
                            source_section.getTitle(),\n
  \'source_section_career_title\': getCareerId(context.getSourceSectionValue() is not None\\\n
          and source_section.getProperty(\'default_career_title\') or \'\'),\n
  \'source_section_default_career_start_date\': getHiringDateId(context.getSourceSectionValue() is not None\\\n
          and getOrderedDate(source_section.getProperty(\'default_career_start_date\')) or \'\'),\n
  \'source_section_default_career_stop_date\': context.getSourceSectionValue() is not None\\\n
          and getOrderedDate(source_section.getProperty(\'default_career_stop_date\')) or \'\',\n
  \'source_section_default_career_coefficient\' : getCareerCoefficientId(context.getSourceSectionValue() is not None\\\n
          and source_section.getProperty(\'career_salary_coefficient\') or \'\'),\n
  \'source_section_default_career_salary_level\' : getSalaryLevelId(context.getSourceSectionValue() is not None\\\n
          and source_section.getProperty(\'default_career_salary_level\') or \'\'),\n
  \'source_section_default_career_social_code\' : getSocialCodeId(context.getSourceSection() and\n
      context.getSourceSectionValue().getProperty(\'social_code\') or \'\'),\n
  \'source_section_default_career_collective_agreement_title\' : getCollectiveAgreementId(context.getSourceSectionValue() is not None\\\n
          and source_section.getProperty(\'default_career_collective_agreement_title\') or \'\'),\n
  \'default_payment_condition_payment_text\' : context.getDefaultPaymentConditionValue() is not None\\\n
          and getPaymentConditionText(context) or \'\',\n
  \'price_currency\': getPriceCurrencyId(context.getPriceCurrencyReference() or \'\'),\n
  \'year\': str(context.getStartDate() is not None and context.getStartDate().year() or \'\'),\n
  \'description\': getFieldAsLineList(context.getDescription() or\n
                 getPropertyFromModel(model, \'description\') or \'\'),\n
  \'year_to_date_gross_salary\': year_to_date_gross_salary,\n
  \'year_to_date_slice_a\': year_to_date_slice_a,\n
  \'year_to_date_worked_hour_count\': year_to_date_worked_hour_count,\n
  \'year_to_date_bonus_worked_hour_count\': year_to_date_bonus_worked_hour_count,\n
  \'year_to_date_bonus_worked_hour_amount\': year_to_date_bonus_worked_hour_amount,\n
  \'year_to_date_taxable_net_salary\': year_to_date_taxable_net_salary,\n
  \'worked_hour_count\': worked_hour_count,\n
  \'bonus_worked_hour_count\': bonus_worked_hour_count,\n
  \'absence_hour_count\': 0, #XXX currently absence hour are not take into \n
                           # account in payroll\n
  \'taxable_net_pay\': getTaxableNetPayId(taxable_net_pay),\n
  \'total_employee_tax\': getTotalEmployeeTaxId(total_employee_tax),\n
  \'total_employer_tax\': getTotalEmployerTaxId(total_employer_tax),\n
}\n
\n
return unicodeDict(data_dict)\n
</string> </value>
        </item>
        <item>
            <key> <string>_code</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>errors</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>func_code</string> </key>
            <value>
              <object>
                <klass>
                  <global name="FuncCode" module="Shared.DC.Scripts.Signature"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>co_argcount</string> </key>
                        <value> <int>0</int> </value>
                    </item>
                    <item>
                        <key> <string>co_varnames</string> </key>
                        <value>
                          <tuple>
                            <string>_getattr_</string>
                            <string>context</string>
                            <string>translateString</string>
                            <string>request</string>
                            <string>quantity_renderer</string>
                            <string>model</string>
                            <string>getPropertyFromModel</string>
                            <string>getFieldAsLineList</string>
                            <string>getFieldAsString</string>
                            <string>getSocialCodeId</string>
                            <string>getCareerId</string>
                            <string>getCollectiveAgreementId</string>
                            <string>getSalaryLevelId</string>
                            <string>getCareerCoefficientId</string>
                            <string>getHiringDateId</string>
                            <string>getPriceCurrencyId</string>
                            <string>taxable_net_pay</string>
                            <string>getTaxableNetPayId</string>
                            <string>total_employee_tax</string>
                            <string>getTotalEmployeeTaxId</string>
                            <string>total_employer_tax</string>
                            <string>getTotalEmployerTaxId</string>
                            <string>preferred_date_order</string>
                            <string>separator</string>
                            <string>getOrderedDate</string>
                            <string>getPaymentConditionText</string>
                            <string>gross_salary</string>
                            <string>year_to_date_gross_salary</string>
                            <string>year_to_date_slice_a</string>
                            <string>worked_hour_count</string>
                            <string>year_to_date_worked_hour_count</string>
                            <string>over_time_small_rate</string>
                            <string>over_time_big_rate</string>
                            <string>None</string>
                            <string>bonus_worked_hour_count</string>
                            <string>year_to_date_bonus_worked_hour_count</string>
                            <string>year_to_date_bonus_worked_hour_amount</string>
                            <string>year_to_date_taxable_net_salary</string>
                            <string>unicodeDict</string>
                            <string>source_section</string>
                            <string>str</string>
                            <string>data_dict</string>
                          </tuple>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>func_defaults</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>PaySheetTransaction_getOtherInformationsDataDict</string> </value>
        </item>
        <item>
            <key> <string>warnings</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
