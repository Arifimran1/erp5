<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <tuple>
          <string>OFS.DTMLDocument</string>
          <string>DTMLDocument</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>__ac_local_roles__</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>admin_toolbox_cookie_utils.js</string> </value>
        </item>
        <item>
            <key> <string>_vars</string> </key>
            <value>
              <dictionary/>
            </value>
        </item>
        <item>
            <key> <string>globals</string> </key>
            <value>
              <dictionary/>
            </value>
        </item>
        <item>
            <key> <string>raw</string> </key>
            <value> <string encoding="cdata"><![CDATA[

//******************************************************************************\n
//  Cookie Functions -- "Night of the Living Cookie" Version (25-Jul-96)\n
//  Written by:  Bill Dortch, hIdaho Design <bdortch@hidaho.com>\n
\n
\n
//  "Internal" function to return the decoded value of a cookie\n
function getCookieVal (offset) {\n
  var endstr = document.cookie.indexOf (";", offset);\n
  if (endstr == -1)\n
    endstr = document.cookie.length;\n
  return unescape(document.cookie.substring(offset, endstr));\n
}\n
\n
\n
//  Function to return the value of the cookie specified by "name".\n
//    name -    String object containing the cookie name.\n
//    returns - String object containing the cookie value,\n
//              or null if the cookie does not exist.\n
//\n
function GetCookie (name) {\n
  var arg = name + "=";\n
  var alen = arg.length;\n
  var clen = document.cookie.length;\n
  var i = 0;\n
  while (i < clen) {\n
    var j = i + alen;\n
    if (document.cookie.substring(i, j) == arg)\n
      return getCookieVal (j);\n
    i = document.cookie.indexOf(" ", i) + 1;\n
    if (i == 0) break;\n
  }\n
  return null;\n
}\n
\n
\n
//  Function to create or update a cookie.\n
//    name - String object containing the cookie name.\n
//    value - String object containing the cookie value.  May contain\n
//         any valid string characters.\n
//    [expires] - Date object containing the expiration data of the cookie.  If\n
//         omitted or null, expires the cookie at the end of the current session.\n
//    [path] - String object indicating the path for which the cookie is valid.\n
//         If omitted or null, uses the path of the calling document.\n
//    [domain] - String object indicating the domain for which the cookie is\n
//         valid. If omitted or null, uses the domain of the calling document.\n
//    [secure] - Boolean (true/false) value indicating whether cookie\n
//         transmission requires a secure channel (HTTPS).\n
//\n
//  The first two parameters are required.  The others, if supplied, must\n
//  be passed in the order listed above.  To omit an unused optional field,\n
//  use null as a place holder.  For example, to call SetCookie using name,\n
//  value and path, you would code:\n
//\n
//      SetCookie ("myCookieName", "myCookieValue", null, "/");\n
//\n
//  Note that trailing omitted parameters do not require a placeholder.\n
//\n
//  To set a secure cookie for path "/myPath", that expires after the\n
//  current session, you might code:\n
//\n
//      SetCookie (myCookieVar, cookieValueVar, null, "/myPath", null, true);\n
//\n
function SetCookie (name,value,expires,path,domain,secure) {\n
  document.cookie = name + "=" + escape (value) +\n
    ((expires) ? "; expires=" + expires.toGMTString() : "") +\n
    ((path) ? "; path=" + path : "") +\n
    ((domain) ? "; domain=" + domain : "") +\n
    ((secure) ? "; secure" : "");\n
}\n
\n
\n
//  Function to delete a cookie. (Sets expiration date to start of epoch)\n
//    name -   String object containing the cookie name\n
//    path -   String object containing the path of the cookie to delete.\n
//             This MUST be the same as the path used to create the cookie, or\n
//             null/omitted if no path was specified when creating the cookie.\n
//    domain - String object containing the domain of the cookie to delete.\n
//             This MUST be the same as the domain used to create the cookie, or\n
//             null/omitted if no domain was specified when creating the cookie.\n
//\n
function DeleteCookie (name,path,domain) {\n
  if (GetCookie(name)) {\n
    document.cookie = name + "=" +\n
      ((path) ? "; path=" + path : "") +\n
      ((domain) ? "; domain=" + domain : "") +\n
      "; expires=Thu, 01-Jan-70 00:00:01 GMT";\n
  }\n
}

]]></string> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
