<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
        <tuple/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

from Products.DCWorkflow.DCWorkflow import ValidationFailed\n
from Products.ERP5Type.Message import Message\n
checkbook_reception = context.getParentValue()\n
\n
portal = checkbook_reception.getPortalObject()\n
portal_activities = portal.portal_activities\n
if encountered_check_identifiers_dict is None:\n
  encountered_check_identifiers_dict = {}\n
\n
def getReference(reference):\n
  """\n
    Convert a reference into an int.\n
  """\n
  # First convert to float to avoid failing to convert if reference = \'1.0\'\n
  return int(float(reference))\n
\n
def generateReference(reference, original_reference):\n
  """\n
    Convert an int into a reference of correct length\n
  """\n
  reference = str(reference)\n
  return \'%s%s\' % (\'0\' * (len(original_reference) - len(reference)), reference)\n
\n
def validateTravelerCheckReferenceFormat(traveler_check_reference):\n
  """\n
    Check provided traveler_check_reference format\n
  """\n
  if len(traveler_check_reference) != 10:\n
    message = Message(domain=\'ui\', message=\'Traveler check reference must be 10-char long.\')\n
    raise ValueError, (message,)\n
  int(traveler_check_reference[4:])\n
\n
def getTravelerCheckReferenceNumber(traveler_check_reference):\n
  """\n
    Extract traveler check reference number\n
  """\n
  validateTravelerCheckReferenceFormat(traveler_check_reference)\n
  return int(traveler_check_reference[4:])\n
\n
def getTravelerCheckReferencePrefix(traveler_check_reference):\n
  """\n
    Extract traveler check reference prefix\n
  """\n
  validateTravelerCheckReferenceFormat(traveler_check_reference)\n
  return traveler_check_reference[:4]\n
\n
def generateTravelerCheckReference(number, original_traveler_check_reference):\n
  """\n
    Generate a traveler check reference from an existing reference (to\n
    extract its prefix) and a new numerical value.\n
  """\n
  if not same_type(number, 0):\n
    message = Message(domain=\'ui\', message=\'Traveler check number must be only numeric.\')\n
    raise ValueError, (message, )\n
  if len(str(number)) > 6:\n
    message = Message(domain=\'ui\', message=\'Traveler check number representation length must not exceed 6 char.\')\n
    raise ValueError, (message,)\n
  prefix = getTravelerCheckReferencePrefix(original_traveler_check_reference)\n
  return \'%s%06d\' % (prefix, number)\n
\n
def assertReferenceMatchListEmpty(match_list, destination_payment_uid):\n
  """\n
    Check that the list is empty, otherwise gather all conflicting references and display them in the error message.\n
    TODO: make the error message Localizer-friendly\n
  """\n
  if len(match_list) > 0:\n
    account = context.portal_catalog(uid=destination_payment_uid)[0].getObject()\n
    matched_reference_list = []\n
    for match in match_list:\n
      matched_reference_list.append(\'%s (%s)\' % (match.getReference(), account.getInternalBankAccountNumber()))\n
    message = Message(domain=\'ui\', message=\'The following references are already allocated : $reference_list\',\n
                      mapping={\'reference_list\': matched_reference_list})\n
    raise ValidationFailed, (message,)\n
\n
def checkReferenceListUniqueness(reference_list, model_uid, destination_payment_uid):\n
  """\n
    Check each given reference not to already exist.\n
  """\n
  if destination_payment_uid is None:\n
    match_list = portal.portal_catalog(portal_type=\'Check\', reference=reference_list, default_resource_uid=model_uid, simulation_state=\'!=deleted\')\n
  else:\n
    match_list = portal.portal_catalog(portal_type=\'Check\', reference=reference_list, destination_payment_uid=destination_payment_uid, default_resource_uid=model_uid,\n
                                       simulation_state=\'!=deleted\')\n
  assertReferenceMatchListEmpty(match_list, destination_payment_uid)\n
  for reference in reference_list:\n
    tag = \'check_%s_%s_%s\' % (model_uid, destination_payment_uid, reference)\n
    if encountered_check_identifiers_dict.has_key(tag):\n
      account = context.portal_catalog(uid=destination_payment_uid)[0].getObject()\n
      message = Message(domain=\'ui\', message=\'The following references are already allocated : $reference_list\',\n
                        mapping={\'reference_list\': [\'%s (%s)\' % (reference, account.getInternalBankAccountNumber()) ]})\n
      raise ValidationFailed, (message,)\n
    encountered_check_identifiers_dict[tag] = None\n
\n
def checkReferenceUniqueness(reference, model_uid, destination_payment_uid):\n
  """\n
    Check the given reference not to already exist.\n
  """\n
  checkReferenceListUniqueness([reference, ], model_uid, destination_payment_uid)\n
\n
start_date = checkbook_reception.getStartDate()\n
destination = checkbook_reception.getDestination()\n
\n
line = context\n
quantity = line.getQuantity()\n
resource = line.getResourceValue()\n
reference_range_min = line.getReferenceRangeMin()\n
\n
# We will look where we should create as many items\n
# as necessary and construct by the same time\n
# the aggregate list that we will store on the line\n
resource_portal_type = resource.getPortalType()\n
if resource_portal_type == \'Checkbook Model\':\n
  is_checkbook = True\n
  module = portal.checkbook_module\n
  model_value = resource.getCompositionValue()\n
  model = resource.getComposition()\n
  model_uid = model_value.getUid()\n
  # XXX: portal_type value is hardcoded because I don\'t want to get the\n
  # portaltype on each created object as it will always be the same.\n
  # We need a method to get the default content portaltype on a Folder.\n
  check_amount = line.getCheckAmount()\n
  check_quantity = int(portal.restrictedTraverse(check_amount).getQuantity())\n
  reference_to_int = getReference\n
  int_to_reference = generateReference\n
else:\n
  is_checkbook = False\n
  module = portal.check_module\n
  model = resource.getRelativeUrl()\n
  model_uid = resource.getUid()\n
  # XXX: portal_type value is hardcoded, see XXX above.\n
  if resource_portal_type == \'Check Model\' and resource.isFixedPrice():\n
    reference_to_int = getTravelerCheckReferenceNumber\n
    int_to_reference = generateTravelerCheckReference\n
  else:\n
    reference_to_int = getReference\n
    int_to_reference = generateReference\n
\n
if resource.getAccountNumberEnabled():\n
  destination_payment_value = line.getDestinationPaymentValue()\n
  # Not required any more to serialize the bank account\n
  #destination_payment_value.serialize()\n
  context.log(\'context.getRelativeUrl() before getUid of destination payment\', context.getRelativeUrl())\n
  if destination_payment_value is None:\n
    message = Message(domain=\'ui\', message=\'There is not destination payment on line with id: $id\', mapping={\'id\': context.getId()})\n
    raise ValueError, (message,)\n
  destination_payment_uid = destination_payment_value.getUid()\n
  destination_trade = line.getDestinationTrade()\n
else:\n
  destination_payment_value = None\n
  destination_payment_uid = None\n
\n
aggregate_list = []\n
for i in xrange(quantity):\n
  if create == 1:\n
    item = module.newContent(activate_kw={\'tag\': tag, \'priority\':4})\n
    context.log(\'New Item created with Id\', item.getId())\n
    item.setDestination(destination)\n
    if destination_payment_value is not None:\n
      item.setDestinationPaymentValue(destination_payment_value)\n
      item.setDestinationTrade(destination_trade)\n
  if is_checkbook:\n
    last_reference_value = reference_to_int(reference_range_min) + check_quantity - 1\n
    reference_list = [int_to_reference(x, reference_range_min) for x in range(reference_to_int(reference_range_min), last_reference_value + 1)]\n
    reference_range_max = int_to_reference(last_reference_value, reference_range_min)\n
    if check == 1:\n
      checkReferenceListUniqueness(reference_list, model_uid, destination_payment_uid)\n
    if create == 1:\n
      item.setReferenceRangeMax(reference_range_max)\n
      item.setReferenceRangeMin(reference_range_min)\n
      item.setResourceValue(resource)\n
      item.setStartDate(start_date)\n
      item.setTitle(\'%s - %s\' % (reference_range_min, reference_range_max))\n
      item.setCheckAmount(check_amount)\n
      destination_section = item.getDestinationSection()\n
      if confirm_check:\n
        item.confirm()\n
      for j in reference_list:\n
        #tag = \'check_%s_%s_%s\' % (model_uid, destination_payment_uid, j)\n
        #encountered_check_identifiers_dict[tag] = None\n
        check = item.newContent(portal_type=\'Check\', title=j, activate_kw={\'tag\': tag, \'priority\':4})\n
        context.log(\'New Sub Item created with Id\', check.getId())\n
        check.setDestination(destination_section)\n
        check.setStartDate(start_date)\n
        check.setReference(j)\n
        check.setResource(model)\n
        if confirm_check:\n
          check.confirm()\n
  else:\n
    last_reference_value = reference_to_int(reference_range_min)\n
    if check == 1:\n
      checkReferenceUniqueness(reference_range_min, model_uid, destination_payment_uid)\n
    if create == 1:\n
      item.setReference(reference_range_min)\n
      item.setResource(model)\n
      item.setTitle(reference_range_min)\n
      if len(resource.objectValues()) > 0:\n
        item_type = line.getCheckTypeValue()\n
        item.setPrice(item_type.getPrice())\n
        item.setPriceCurrency(line.getPriceCurrency())\n
      if confirm_check:\n
        item.setStartDate(start_date)\n
        item.confirm()\n
      #tag = \'check_%s_%s_%s\' % (model_uid, destination_payment_uid, reference_range_min)\n
      #encountered_check_identifiers_dict[tag] = None\n
  # update reference_range_min for the next pass\n
  reference_range_min = int_to_reference(last_reference_value + 1, reference_range_min)\n
  # I (seb) think this is a big mistake\n
  #if item.getPortalType()==\'Check\':\n
  #  portal.portal_workflow.doActionFor(item,\'confirm_action\',\n
  #                                     wf_id=\'check_workflow\')\n
  if create == 1:\n
    aggregate_list.append(item)\n
\n
# Finally set the aggregate list on the line\n
if create == 1:\n
  line.setAggregateValueList(aggregate_list)\n
\n
return encountered_check_identifiers_dict\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_code</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>check=0, create=0, tag=None, confirm_check=0, encountered_check_identifiers_dict=None</string> </value>
        </item>
        <item>
            <key> <string>_proxy_roles</string> </key>
            <value>
              <tuple>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>errors</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>func_code</string> </key>
            <value>
              <object>
                <klass>
                  <global name="FuncCode" module="Shared.DC.Scripts.Signature"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>co_argcount</string> </key>
                        <value> <int>5</int> </value>
                    </item>
                    <item>
                        <key> <string>co_varnames</string> </key>
                        <value>
                          <tuple>
                            <string>check</string>
                            <string>create</string>
                            <string>tag</string>
                            <string>confirm_check</string>
                            <string>encountered_check_identifiers_dict</string>
                            <string>Products.DCWorkflow.DCWorkflow</string>
                            <string>ValidationFailed</string>
                            <string>Products.ERP5Type.Message</string>
                            <string>Message</string>
                            <string>_getattr_</string>
                            <string>context</string>
                            <string>checkbook_reception</string>
                            <string>portal</string>
                            <string>portal_activities</string>
                            <string>None</string>
                            <string>getReference</string>
                            <string>generateReference</string>
                            <string>validateTravelerCheckReferenceFormat</string>
                            <string>getTravelerCheckReferenceNumber</string>
                            <string>getTravelerCheckReferencePrefix</string>
                            <string>generateTravelerCheckReference</string>
                            <string>assertReferenceMatchListEmpty</string>
                            <string>checkReferenceListUniqueness</string>
                            <string>checkReferenceUniqueness</string>
                            <string>start_date</string>
                            <string>destination</string>
                            <string>line</string>
                            <string>quantity</string>
                            <string>resource</string>
                            <string>reference_range_min</string>
                            <string>resource_portal_type</string>
                            <string>True</string>
                            <string>is_checkbook</string>
                            <string>module</string>
                            <string>model_value</string>
                            <string>model</string>
                            <string>model_uid</string>
                            <string>check_amount</string>
                            <string>int</string>
                            <string>check_quantity</string>
                            <string>reference_to_int</string>
                            <string>int_to_reference</string>
                            <string>False</string>
                            <string>destination_payment_value</string>
                            <string>message</string>
                            <string>ValueError</string>
                            <string>destination_payment_uid</string>
                            <string>destination_trade</string>
                            <string>aggregate_list</string>
                            <string>_getiter_</string>
                            <string>xrange</string>
                            <string>i</string>
                            <string>item</string>
                            <string>last_reference_value</string>
                            <string>append</string>
                            <string>$append0</string>
                            <string>range</string>
                            <string>x</string>
                            <string>reference_list</string>
                            <string>reference_range_max</string>
                            <string>destination_section</string>
                            <string>j</string>
                            <string>len</string>
                            <string>item_type</string>
                          </tuple>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>func_defaults</string> </key>
            <value>
              <tuple>
                <int>0</int>
                <int>0</int>
                <none/>
                <int>0</int>
                <none/>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>CheckbookReceptionLine_checkOrCreateItemList</string> </value>
        </item>
        <item>
            <key> <string>warnings</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
