<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41268307.95</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>FilePicker.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/**\n
 * FilePicker.js\n
 *\n
 * Released under LGPL License.\n
 * Copyright (c) 1999-2015 Ephox Corp. All rights reserved\n
 *\n
 * License: http://www.tinymce.com/license\n
 * Contributing: http://www.tinymce.com/contributing\n
 */\n
\n
/*global tinymce:true */\n
\n
/**\n
 * This class creates a file picker control.\n
 *\n
 * @class tinymce.ui.FilePicker\n
 * @extends tinymce.ui.ComboBox\n
 */\n
define("tinymce/ui/FilePicker", [\n
\t"tinymce/ui/ComboBox",\n
\t"tinymce/util/Tools"\n
], function(ComboBox, Tools) {\n
\t"use strict";\n
\n
\treturn ComboBox.extend({\n
\t\t/**\n
\t\t * Constructs a new control instance with the specified settings.\n
\t\t *\n
\t\t * @constructor\n
\t\t * @param {Object} settings Name/value object with settings.\n
\t\t */\n
\t\tinit: function(settings) {\n
\t\t\tvar self = this, editor = tinymce.activeEditor, editorSettings = editor.settings;\n
\t\t\tvar actionCallback, fileBrowserCallback, fileBrowserCallbackTypes;\n
\n
\t\t\tsettings.spellcheck = false;\n
\n
\t\t\tfileBrowserCallbackTypes = editorSettings.file_picker_types || editorSettings.file_browser_callback_types;\n
\t\t\tif (fileBrowserCallbackTypes) {\n
\t\t\t\tfileBrowserCallbackTypes = Tools.makeMap(fileBrowserCallbackTypes, /[, ]/);\n
\t\t\t}\n
\n
\t\t\tif (!fileBrowserCallbackTypes || fileBrowserCallbackTypes[settings.filetype]) {\n
\t\t\t\tfileBrowserCallback = editorSettings.file_picker_callback;\n
\t\t\t\tif (fileBrowserCallback && (!fileBrowserCallbackTypes || fileBrowserCallbackTypes[settings.filetype])) {\n
\t\t\t\t\tactionCallback = function() {\n
\t\t\t\t\t\tvar meta = self.fire(\'beforecall\').meta;\n
\n
\t\t\t\t\t\tmeta = Tools.extend({filetype: settings.filetype}, meta);\n
\n
\t\t\t\t\t\t// file_picker_callback(callback, currentValue, metaData)\n
\t\t\t\t\t\tfileBrowserCallback.call(\n
\t\t\t\t\t\t\teditor,\n
\t\t\t\t\t\t\tfunction(value, meta) {\n
\t\t\t\t\t\t\t\tself.value(value).fire(\'change\', {meta: meta});\n
\t\t\t\t\t\t\t},\n
\t\t\t\t\t\t\tself.value(),\n
\t\t\t\t\t\t\tmeta\n
\t\t\t\t\t\t);\n
\t\t\t\t\t};\n
\t\t\t\t} else {\n
\t\t\t\t\t// Legacy callback: file_picker_callback(id, currentValue, filetype, window)\n
\t\t\t\t\tfileBrowserCallback = editorSettings.file_browser_callback;\n
\t\t\t\t\tif (fileBrowserCallback && (!fileBrowserCallbackTypes || fileBrowserCallbackTypes[settings.filetype])) {\n
\t\t\t\t\t\tactionCallback = function() {\n
\t\t\t\t\t\t\tfileBrowserCallback(\n
\t\t\t\t\t\t\t\tself.getEl(\'inp\').id,\n
\t\t\t\t\t\t\t\tself.value(),\n
\t\t\t\t\t\t\t\tsettings.filetype,\n
\t\t\t\t\t\t\t\twindow\n
\t\t\t\t\t\t\t);\n
\t\t\t\t\t\t};\n
\t\t\t\t\t}\n
\t\t\t\t}\n
\t\t\t}\n
\n
\t\t\tif (actionCallback) {\n
\t\t\t\tsettings.icon = \'browse\';\n
\t\t\t\tsettings.onaction = actionCallback;\n
\t\t\t}\n
\n
\t\t\tself._super(settings);\n
\t\t}\n
\t});\n
});

]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>2399</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>FilePicker.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
