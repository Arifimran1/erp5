<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41268440.33</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>plugin.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value>
              <persistent> <string encoding="base64">AAAAAAAAAAI=</string> </persistent>
            </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>68180</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>plugin.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="2" aka="AAAAAAAAAAI=">
    <pickle>
      <global name="Pdata" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/**\n
 * Compiled inline version. (Library mode)\n
 */\n
\n
/*jshint smarttabs:true, undef:true, latedef:true, curly:true, bitwise:true, camelcase:true */\n
/*globals $code */\n
\n
(function(exports, undefined) {\n
\t"use strict";\n
\n
\tvar modules = {};\n
\n
\tfunction require(ids, callback) {\n
\t\tvar module, defs = [];\n
\n
\t\tfor (var i = 0; i < ids.length; ++i) {\n
\t\t\tmodule = modules[ids[i]] || resolve(ids[i]);\n
\t\t\tif (!module) {\n
\t\t\t\tthrow \'module definition dependecy not found: \' + ids[i];\n
\t\t\t}\n
\n
\t\t\tdefs.push(module);\n
\t\t}\n
\n
\t\tcallback.apply(null, defs);\n
\t}\n
\n
\tfunction define(id, dependencies, definition) {\n
\t\tif (typeof id !== \'string\') {\n
\t\t\tthrow \'invalid module definition, module id must be defined and be a string\';\n
\t\t}\n
\n
\t\tif (dependencies === undefined) {\n
\t\t\tthrow \'invalid module definition, dependencies must be specified\';\n
\t\t}\n
\n
\t\tif (definition === undefined) {\n
\t\t\tthrow \'invalid module definition, definition function must be specified\';\n
\t\t}\n
\n
\t\trequire(dependencies, function() {\n
\t\t\tmodules[id] = definition.apply(null, arguments);\n
\t\t});\n
\t}\n
\n
\tfunction defined(id) {\n
\t\treturn !!modules[id];\n
\t}\n
\n
\tfunction resolve(id) {\n
\t\tvar target = exports;\n
\t\tvar fragments = id.split(/[.\\/]/);\n
\n
\t\tfor (var fi = 0; fi < fragments.length; ++fi) {\n
\t\t\tif (!target[fragments[fi]]) {\n
\t\t\t\treturn;\n
\t\t\t}\n
\n
\t\t\ttarget = target[fragments[fi]];\n
\t\t}\n
\n
\t\treturn target;\n
\t}\n
\n
\tfunction expose(ids) {\n
\t\tfor (var i = 0; i < ids.length; i++) {\n
\t\t\tvar target = exports;\n
\t\t\tvar id = ids[i];\n
\t\t\tvar fragments = id.split(/[.\\/]/);\n
\n
\t\t\tfor (var fi = 0; fi < fragments.length - 1; ++fi) {\n
\t\t\t\tif (target[fragments[fi]] === undefined) {\n
\t\t\t\t\ttarget[fragments[fi]] = {};\n
\t\t\t\t}\n
\n
\t\t\t\ttarget = target[fragments[fi]];\n
\t\t\t}\n
\n
\t\t\ttarget[fragments[fragments.length - 1]] = modules[id];\n
\t\t}\n
\t}\n
\n
// Included from: js/tinymce/plugins/table/classes/Utils.js\n
\n
/**\n
 * Utils.js\n
 *\n
 * Released under LGPL License.\n
 * Copyright (c) 1999-2015 Ephox Corp. All rights reserved\n
 *\n
 * License: http://www.tinymce.com/license\n
 * Contributing: http://www.tinymce.com/contributing\n
 */\n
\n
/**\n
 * Various utility functions.\n
 *\n
 * @class tinymce.tableplugin.Utils\n
 * @private\n
 */\n
define("tinymce/tableplugin/Utils", [\n
\t"tinymce/Env"\n
], function(Env) {\n
\tfunction getSpanVal(td, name) {\n
\t\treturn parseInt(td.getAttribute(name) || 1, 10);\n
\t}\n
\n
\tfunction paddCell(cell) {\n
\t\tif (!Env.ie || Env.ie > 10) {\n
\t\t\tcell.innerHTML = \'<br data-mce-bogus="1" />\';\n
\t\t}\n
\t}\n
\n
\treturn {\n
\t\tgetSpanVal: getSpanVal,\n
\t\tpaddCell: paddCell\n
\t};\n
});\n
\n
// Included from: js/tinymce/plugins/table/classes/TableGrid.js\n
\n
/**\n
 * TableGrid.js\n
 *\n
 * Released under LGPL License.\n
 * Copyright (c) 1999-2015 Ephox Corp. All rights reserved\n
 *\n
 * License: http://www.tinymce.com/license\n
 * Contributing: http://www.tinymce.com/contributing\n
 */\n
\n
/**\n
 * This class creates a grid out of a table element. This\n
 * makes it a whole lot easier to handle complex tables with\n
 * col/row spans.\n
 *\n
 * @class tinymce.tableplugin.TableGrid\n
 * @private\n
 */\n
define("tinymce/tableplugin/TableGrid", [\n
\t"tinymce/util/Tools",\n
\t"tinymce/Env",\n
\t"tinymce/tableplugin/Utils"\n
], function(Tools, Env, Utils) {\n
\tvar each = Tools.each, getSpanVal = Utils.getSpanVal;\n
\n
\treturn function(editor, table) {\n
\t\tvar grid, gridWidth, startPos, endPos, selectedCell, selection = editor.selection, dom = selection.dom;\n
\n
\t\tfunction buildGrid() {\n
\t\t\tvar startY = 0;\n
\n
\t\t\tgrid = [];\n
\t\t\tgridWidth = 0;\n
\n
\t\t\teach([\'thead\', \'tbody\', \'tfoot\'], function(part) {\n
\t\t\t\tvar rows = dom.select(\'> \' + part + \' tr\', table);\n
\n
\t\t\t\teach(rows, function(tr, y) {\n
\t\t\t\t\ty += startY;\n
\n
\t\t\t\t\teach(dom.select(\'> td, > th\', tr), function(td, x) {\n
\t\t\t\t\t\tvar x2, y2, rowspan, colspan;\n
\n
\t\t\t\t\t\t// Skip over existing cells produced by rowspan\n
\t\t\t\t\t\tif (grid[y]) {\n
\t\t\t\t\t\t\twhile (grid[y][x]) {\n
\t\t\t\t\t\t\t\tx++;\n
\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\t// Get col/rowspan from cell\n
\t\t\t\t\t\trowspan = getSpanVal(td, \'rowspan\');\n
\t\t\t\t\t\tcolspan = getSpanVal(td, \'colspan\');\n
\n
\t\t\t\t\t\t// Fill out rowspan/colspan right and down\n
\t\t\t\t\t\tfor (y2 = y; y2 < y + rowspan; y2++) {\n
\t\t\t\t\t\t\tif (!grid[y2]) {\n
\t\t\t\t\t\t\t\tgrid[y2] = [];\n
\t\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\t\tfor (x2 = x; x2 < x + colspan; x2++) {\n
\t\t\t\t\t\t\t\tgrid[y2][x2] = {\n
\t\t\t\t\t\t\t\t\tpart: part,\n
\t\t\t\t\t\t\t\t\treal: y2 == y && x2 == x,\n
\t\t\t\t\t\t\t\t\telm: td,\n
\t\t\t\t\t\t\t\t\trowspan: rowspan,\n
\t\t\t\t\t\t\t\t\tcolspan: colspan\n
\t\t\t\t\t\t\t\t};\n
\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\tgridWidth = Math.max(gridWidth, x + 1);\n
\t\t\t\t\t});\n
\t\t\t\t});\n
\n
\t\t\t\tstartY += rows.length;\n
\t\t\t});\n
\t\t}\n
\n
\t\tfunction cloneNode(node, children) {\n
\t\t\tnode = node.cloneNode(children);\n
\t\t\tnode.removeAttribute(\'id\');\n
\n
\t\t\treturn node;\n
\t\t}\n
\n
\t\tfunction getCell(x, y) {\n
\t\t\tvar row;\n
\n
\t\t\trow = grid[y];\n
\t\t\tif (row) {\n
\t\t\t\treturn row[x];\n
\t\t\t}\n
\t\t}\n
\n
\t\tfunction setSpanVal(td, name, val) {\n
\t\t\tif (td) {\n
\t\t\t\tval = parseInt(val, 10);\n
\n
\t\t\t\tif (val === 1) {\n
\t\t\t\t\ttd.removeAttribute(name, 1);\n
\t\t\t\t} else {\n
\t\t\t\t\ttd.setAttribute(name, val, 1);\n
\t\t\t\t}\n
\t\t\t}\n
\t\t}\n
\n
\t\tfunction isCellSelected(cell) {\n
\t\t\treturn cell && (dom.hasClass(cell.elm, \'mce-item-selected\') || cell == selectedCell);\n
\t\t}\n
\n
\t\tfunction getSelectedRows() {\n
\t\t\tvar rows = [];\n
\n
\t\t\teach(table.rows, function(row) {\n
\t\t\t\teach(row.cells, function(cell) {\n
\t\t\t\t\tif (dom.hasClass(cell, \'mce-item-selected\') || (selectedCell && cell == selectedCell.elm)) {\n
\t\t\t\t\t\trows.push(row);\n
\t\t\t\t\t\treturn false;\n
\t\t\t\t\t}\n
\t\t\t\t});\n
\t\t\t});\n
\n
\t\t\treturn rows;\n
\t\t}\n
\n
\t\tfunction deleteTable() {\n
\t\t\tvar rng = dom.createRng();\n
\n
\t\t\trng.setStartAfter(table);\n
\t\t\trng.setEndAfter(table);\n
\n
\t\t\tselection.setRng(rng);\n
\n
\t\t\tdom.remove(table);\n
\t\t}\n
\n
\t\tfunction cloneCell(cell) {\n
\t\t\tvar formatNode, cloneFormats = {};\n
\n
\t\t\tif (editor.settings.table_clone_elements !== false) {\n
\t\t\t\tcloneFormats = Tools.makeMap(\n
\t\t\t\t\t(editor.settings.table_clone_elements || \'strong em b i span font h1 h2 h3 h4 h5 h6 p div\').toUpperCase(),\n
\t\t\t\t\t/[ ,]/\n
\t\t\t\t);\n
\t\t\t}\n
\n
\t\t\t// Clone formats\n
\t\t\tTools.walk(cell, function(node) {\n
\t\t\t\tvar curNode;\n
\n
\t\t\t\tif (node.nodeType == 3) {\n
\t\t\t\t\teach(dom.getParents(node.parentNode, null, cell).reverse(), function(node) {\n
\t\t\t\t\t\tif (!cloneFormats[node.nodeName]) {\n
\t\t\t\t\t\t\treturn;\n
\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\tnode = cloneNode(node, false);\n
\n
\t\t\t\t\t\tif (!formatNode) {\n
\t\t\t\t\t\t\tformatNode = curNode = node;\n
\t\t\t\t\t\t} else if (curNode) {\n
\t\t\t\t\t\t\tcurNode.appendChild(node);\n
\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\tcurNode = node;\n
\t\t\t\t\t});\n
\n
\t\t\t\t\t// Add something to the inner node\n
\t\t\t\t\tif (curNode) {\n
\t\t\t\t\t\tcurNode.innerHTML = Env.ie ? \'&nbsp;\' : \'<br data-mce-bogus="1" />\';\n
\t\t\t\t\t}\n
\n
\t\t\t\t\treturn false;\n
\t\t\t\t}\n
\t\t\t}, \'childNodes\');\n
\n
\t\t\tcell = cloneNode(cell, false);\n
\t\t\tsetSpanVal(cell, \'rowSpan\', 1);\n
\t\t\tsetSpanVal(cell, \'colSpan\', 1);\n
\n
\t\t\tif (formatNode) {\n
\t\t\t\tcell.appendChild(formatNode);\n
\t\t\t} else {\n
\t\t\t\tUtils.paddCell(cell);\n
\t\t\t}\n
\n
\t\t\treturn cell;\n
\t\t}\n
\n
\t\tfunction cleanup() {\n
\t\t\tvar rng = dom.createRng(), row;\n
\n
\t\t\t// Empty rows\n
\t\t\teach(dom.select(\'tr\', table), function(tr) {\n
\t\t\t\tif (tr.cells.length === 0) {\n
\t\t\t\t\tdom.remove(tr);\n
\t\t\t\t}\n
\t\t\t});\n
\n
\t\t\t// Empty table\n
\t\t\tif (dom.select(\'tr\', table).length === 0) {\n
\t\t\t\trng.setStartBefore(table);\n
\t\t\t\trng.setEndBefore(table);\n
\t\t\t\tselection.setRng(rng);\n
\t\t\t\tdom.remove(table);\n
\t\t\t\treturn;\n
\t\t\t}\n
\n
\t\t\t// Empty header/body/footer\n
\t\t\teach(dom.select(\'thead,tbody,tfoot\', table), function(part) {\n
\t\t\t\tif (part.rows.length === 0) {\n
\t\t\t\t\tdom.remove(part);\n
\t\t\t\t}\n
\t\t\t});\n
\n
\t\t\t// Restore selection to start position if it still exists\n
\t\t\tbuildGrid();\n
\n
\t\t\t// If we have a valid startPos object\n
\t\t\tif (startPos) {\n
\t\t\t\t// Restore the selection to the closest table position\n
\t\t\t\trow = grid[Math.min(grid.length - 1, startPos.y)];\n
\t\t\t\tif (row) {\n
\t\t\t\t\tselection.select(row[Math.min(row.length - 1, startPos.x)].elm, true);\n
\t\t\t\t\tselection.collapse(true);\n
\t\t\t\t}\n
\t\t\t}\n
\t\t}\n
\n
\t\tfunction fillLeftDown(x, y, rows, cols) {\n
\t\t\tvar tr, x2, r, c, cell;\n
\n
\t\t\ttr = grid[y][x].elm.parentNode;\n
\t\t\tfor (r = 1; r <= rows; r++) {\n
\t\t\t\ttr = dom.getNext(tr, \'tr\');\n
\n
\t\t\t\tif (tr) {\n
\t\t\t\t\t// Loop left to find real cell\n
\t\t\t\t\tfor (x2 = x; x2 >= 0; x2--) {\n
\t\t\t\t\t\tcell = grid[y + r][x2].elm;\n
\n
\t\t\t\t\t\tif (cell.parentNode == tr) {\n
\t\t\t\t\t\t\t// Append clones after\n
\t\t\t\t\t\t\tfor (c = 1; c <= cols; c++) {\n
\t\t\t\t\t\t\t\tdom.insertAfter(cloneCell(cell), cell);\n
\t\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\t\tbreak;\n
\t\t\t\t\t\t}\n
\t\t\t\t\t}\n
\n
\t\t\t\t\tif (x2 == -1) {\n
\t\t\t\t\t\t// Insert nodes before first cell\n
\t\t\t\t\t\tfor (c = 1; c <= cols; c++) {\n
\t\t\t\t\t\t\ttr.insertBefore(cloneCell(tr.cells[0]), tr.cells[0]);\n
\t\t\t\t\t\t}\n
\t\t\t\t\t}\n
\t\t\t\t}\n
\t\t\t}\n
\t\t}\n
\n
\t\tfunction split() {\n
\t\t\teach(grid, function(row, y) {\n
\t\t\t\teach(row, function(cell, x) {\n
\t\t\t\t\tvar colSpan, rowSpan, i;\n
\n
\t\t\t\t\tif (isCellSelected(cell)) {\n
\t\t\t\t\t\tcell = cell.elm;\n
\t\t\t\t\t\tcolSpan = getSpanVal(cell, \'colspan\');\n
\t\t\t\t\t\trowSpan = getSpanVal(cell, \'rowspan\');\n
\n
\t\t\t\t\t\tif (colSpan > 1 || rowSpan > 1) {\n
\t\t\t\t\t\t\tsetSpanVal(cell, \'rowSpan\', 1);\n
\t\t\t\t\t\t\tsetSpanVal(cell, \'colSpan\', 1);\n
\n
\t\t\t\t\t\t\t// Insert cells right\n
\t\t\t\t\t\t\tfor (i = 0; i < colSpan - 1; i++) {\n
\t\t\t\t\t\t\t\tdom.insertAfter(cloneCell(cell), cell);\n
\t\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\t\tfillLeftDown(x, y, rowSpan - 1, colSpan);\n
\t\t\t\t\t\t}\n
\t\t\t\t\t}\n
\t\t\t\t});\n
\t\t\t});\n
\t\t}\n
\n
\t\tfunction merge(cell, cols, rows) {\n
\t\t\tvar pos, startX, startY, endX, endY, x, y, startCell, endCell, children, count;\n
\n
\t\t\t// Use specified cell and cols/rows\n
\t\t\tif (cell) {\n
\t\t\t\tpos = getPos(cell);\n
\t\t\t\tstartX = pos.x;\n
\t\t\t\tstartY = pos.y;\n
\t\t\t\tendX = startX + (cols - 1);\n
\t\t\t\tendY = startY + (rows - 1);\n
\t\t\t} else {\n
\t\t\t\tstartPos = endPos = null;\n
\n
\t\t\t\t// Calculate start/end pos by checking for selected cells in grid works better with context menu\n
\t\t\t\teach(grid, function(row, y) {\n
\t\t\t\t\teach(row, function(cell, x) {\n
\t\t\t\t\t\tif (isCellSelected(cell)) {\n
\t\t\t\t\t\t\tif (!startPos) {\n
\t\t\t\t\t\t\t\tstartPos = {x: x, y: y};\n
\t\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\t\tendPos = {x: x, y: y};\n
\t\t\t\t\t\t}\n
\t\t\t\t\t});\n
\t\t\t\t});\n
\n
\t\t\t\t// Use selection, but make sure startPos is valid before accessing\n
\t\t\t\tif (startPos) {\n
\t\t\t\t\tstartX = startPos.x;\n
\t\t\t\t\tstartY = startPos.y;\n
\t\t\t\t\tendX = endPos.x;\n
\t\t\t\t\tendY = endPos.y;\n
\t\t\t\t}\n
\t\t\t}\n
\n
\t\t\t// Find start/end cells\n
\t\t\tstartCell = getCell(startX, startY);\n
\t\t\tendCell = getCell(endX, endY);\n
\n
\t\t\t// Check if the cells exists and if they are of the same part for example tbody = tbody\n
\t\t\tif (startCell && endCell && startCell.part == endCell.part) {\n
\t\t\t\t// Split and rebuild grid\n
\t\t\t\tsplit();\n
\t\t\t\tbuildGrid();\n
\n
\t\t\t\t// Set row/col span to start cell\n
\t\t\t\tstartCell = getCell(startX, startY).elm;\n
\t\t\t\tsetSpanVal(startCell, \'colSpan\', (endX - startX) + 1);\n
\t\t\t\tsetSpanVal(startCell, \'rowSpan\', (endY - startY) + 1);\n
\n
\t\t\t\t// Remove other cells and add it\'s contents to the start cell\n
\t\t\t\tfor (y = startY; y <= endY; y++) {\n
\t\t\t\t\tfor (x = startX; x <= endX; x++) {\n
\t\t\t\t\t\tif (!grid[y] || !grid[y][x]) {\n
\t\t\t\t\t\t\tcontinue;\n
\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\tcell = grid[y][x].elm;\n
\n
\t\t\t\t\t\t/*jshint loopfunc:true */\n
\t\t\t\t\t\t/*eslint no-loop-func:0 */\n
\t\t\t\t\t\tif (cell != startCell) {\n
\t\t\t\t\t\t\t// Move children to startCell\n
\t\t\t\t\t\t\tchildren = Tools.grep(cell.childNodes);\n
\t\t\t\t\t\t\teach(children, function(node) {\n
\t\t\t\t\t\t\t\tstartCell.appendChild(node);\n
\t\t\t\t\t\t\t});\n
\n
\t\t\t\t\t\t\t// Remove bogus nodes if there is children in the target cell\n
\t\t\t\t\t\t\tif (children.length) {\n
\t\t\t\t\t\t\t\tchildren = Tools.grep(startCell.childNodes);\n
\t\t\t\t\t\t\t\tcount = 0;\n
\t\t\t\t\t\t\t\teach(children, function(node) {\n
\t\t\t\t\t\t\t\t\tif (node.nodeName == \'BR\' && dom.getAttrib(node, \'data-mce-bogus\') && count++ < children.length - 1) {\n
\t\t\t\t\t\t\t\t\t\tstartCell.removeChild(node);\n
\t\t\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t\t\t});\n
\t\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\t\tdom.remove(cell);\n
\t\t\t\t\t\t}\n
\t\t\t\t\t}\n
\t\t\t\t}\n
\n
\t\t\t\t// Remove empty rows etc and restore caret location\n
\t\t\t\tcleanup();\n
\t\t\t}\n
\t\t}\n
\n
\t\tfunction insertRow(before) {\n
\t\t\tvar posY, cell, lastCell, x, rowElm, newRow, newCell, otherCell, rowSpan;\n
\n
\t\t\t// Find first/last row\n
\t\t\teach(grid, function(row, y) {\n
\t\t\t\teach(row, function(cell) {\n
\t\t\t\t\tif (isCellSelected(cell)) {\n
\t\t\t\t\t\tcell = cell.elm;\n
\t\t\t\t\t\trowElm = cell.parentNode;\n
\t\t\t\t\t\tnewRow = cloneNode(rowElm, false);\n
\t\t\t\t\t\tposY = y;\n
\n
\t\t\t\t\t\tif (before) {\n
\t\t\t\t\t\t\treturn false;\n
\t\t\t\t\t\t}\n
\t\t\t\t\t}\n
\t\t\t\t});\n
\n
\t\t\t\tif (before) {\n
\t\t\t\t\treturn !posY;\n
\t\t\t\t}\n
\t\t\t});\n
\n
\t\t\t// If posY is undefined there is nothing for us to do here...just return to avoid crashing below\n
\t\t\tif (posY === undefined) {\n
\t\t\t\treturn;\n
\t\t\t}\n
\n
\t\t\tfor (x = 0; x < grid[0].length; x++) {\n
\t\t\t\t// Cell not found could be because of an invalid table structure\n
\t\t\t\tif (!grid[posY][x]) {\n
\t\t\t\t\tcontinue;\n
\t\t\t\t}\n
\n
\t\t\t\tcell = grid[posY][x].elm;\n
\n
\t\t\t\tif (cell != lastCell) {\n
\t\t\t\t\tif (!before) {\n
\t\t\t\t\t\trowSpan = getSpanVal(cell, \'rowspan\');\n
\t\t\t\t\t\tif (rowSpan > 1) {\n
\t\t\t\t\t\t\tsetSpanVal(cell, \'rowSpan\', rowSpan + 1);\n
\t\t\t\t\t\t\tcontinue;\n
\t\t\t\t\t\t}\n
\t\t\t\t\t} else {\n
\t\t\t\t\t\t// Check if cell above can be expanded\n
\t\t\t\t\t\tif (posY > 0 && grid[posY - 1][x]) {\n
\t\t\t\t\t\t\totherCell = grid[posY - 1][x].elm;\n
\t\t\t\t\t\t\trowSpan = getSpanVal(otherCell, \'rowSpan\');\n
\t\t\t\t\t\t\tif (rowSpan > 1) {\n
\t\t\t\t\t\t\t\tsetSpanVal(otherCell, \'rowSpan\', rowSpan + 1);\n
\t\t\t\t\t\t\t\tcontinue;\n
\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t}\n
\t\t\t\t\t}\n
\n
\t\t\t\t\t// Insert new cell into new row\n
\t\t\t\t\tnewCell = cloneCell(cell);\n
\t\t\t\t\tsetSpanVal(newCell, \'colSpan\', cell.colSpan);\n
\n
\t\t\t\t\tnewRow.appendChild(newCell);\n
\n
\t\t\t\t\tlastCell = cell;\n
\t\t\t\t}\n
\t\t\t}\n
\n
\t\t\tif (newRow.hasChildNodes()) {\n
\t\t\t\tif (!before) {\n
\t\t\t\t\tdom.insertAfter(newRow, rowElm);\n
\t\t\t\t} else {\n
\t\t\t\t\trowElm.parentNode.insertBefore(newRow, rowElm);\n
\t\t\t\t}\n
\t\t\t}\n
\t\t}\n
\n
\t\tfunction insertCol(before) {\n
\t\t\tvar posX, lastCell;\n
\n
\t\t\t// Find first/last column\n
\t\t\teach(grid, function(row) {\n
\t\t\t\teach(row, function(cell, x) {\n
\t\t\t\t\tif (isCellSelected(cell)) {\n
\t\t\t\t\t\tposX = x;\n
\n
\t\t\t\t\t\tif (before) {\n
\t\t\t\t\t\t\treturn false;\n
\t\t\t\t\t\t}\n
\t\t\t\t\t}\n
\t\t\t\t});\n
\n
\t\t\t\tif (before) {\n
\t\t\t\t\treturn !posX;\n
\t\t\t\t}\n
\t\t\t});\n
\n
\t\t\teach(grid, function(row, y) {\n
\t\t\t\tvar cell, rowSpan, colSpan;\n
\n
\t\t\t\tif (!row[posX]) {\n
\t\t\t\t\treturn;\n
\t\t\t\t}\n
\n
\t\t\t\tcell = row[posX].elm;\n
\t\t\t\tif (cell != lastCell) {\n
\t\t\t\t\tcolSpan = getSpanVal(cell, \'colspan\');\n
\t\t\t\t\trowSpan = getSpanVal(cell, \'rowspan\');\n
\n
\t\t\t\t\tif (colSpan == 1) {\n
\t\t\t\t\t\tif (!before) {\n
\t\t\t\t\t\t\tdom.insertAfter(cloneCell(cell), cell);\n
\t\t\t\t\t\t\tfillLeftDown(posX, y, rowSpan - 1, colSpan);\n
\t\t\t\t\t\t} else {\n
\t\t\t\t\t\t\tcell.parentNode.insertBefore(cloneCell(cell), cell);\n
\t\t\t\t\t\t\tfillLeftDown(posX, y, rowSpan - 1, colSpan);\n
\t\t\t\t\t\t}\n
\t\t\t\t\t} else {\n
\t\t\t\t\t\tsetSpanVal(cell, \'colSpan\', cell.colSpan + 1);\n
\t\t\t\t\t}\n
\n
\t\t\t\t\tlastCell = cell;\n
\t\t\t\t}\n
\t\t\t});\n
\t\t}\n
\n
\t\tfunction deleteCols() {\n
\t\t\tvar cols = [];\n
\n
\t\t\t// Get selected column indexes\n
\t\t\teach(grid, function(row) {\n
\t\t\t\teach(row, function(cell, x) {\n
\t\t\t\t\tif (isCellSelected(cell) && Tools.inArray(cols, x) === -1) {\n
\t\t\t\t\t\teach(grid, function(row) {\n
\t\t\t\t\t\t\tvar cell = row[x].elm, colSpan;\n
\n
\t\t\t\t\t\t\tcolSpan = getSpanVal(cell, \'colSpan\');\n
\n
\t\t\t\t\t\t\tif (colSpan > 1) {\n
\t\t\t\t\t\t\t\tsetSpanVal(cell, \'colSpan\', colSpan - 1);\n
\t\t\t\t\t\t\t} else {\n
\t\t\t\t\t\t\t\tdom.remove(cell);\n
\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t});\n
\n
\t\t\t\t\t\tcols.push(x);\n
\t\t\t\t\t}\n
\t\t\t\t});\n
\t\t\t});\n
\n
\t\t\tcleanup();\n
\t\t}\n
\n
\t\tfunction deleteRows() {\n
\t\t\tvar rows;\n
\n
\t\t\tfunction deleteRow(tr) {\n
\t\t\t\tvar pos, lastCell;\n
\n
\t\t\t\t// Move down row spanned cells\n
\t\t\t\teach(tr.cells, function(cell) {\n
\t\t\t\t\tvar rowSpan = getSpanVal(cell, \'rowSpan\');\n
\n
\t\t\t\t\tif (rowSpan > 1) {\n
\t\t\t\t\t\tsetSpanVal(cell, \'rowSpan\', rowSpan - 1);\n
\t\t\t\t\t\tpos = getPos(cell);\n
\t\t\t\t\t\tfillLeftDown(pos.x, pos.y, 1, 1);\n
\t\t\t\t\t}\n
\t\t\t\t});\n
\n
\t\t\t\t// Delete cells\n
\t\t\t\tpos = getPos(tr.cells[0]);\n
\t\t\t\teach(grid[pos.y], function(cell) {\n
\t\t\t\t\tvar rowSpan;\n
\n
\t\t\t\t\tcell = cell.elm;\n
\n
\t\t\t\t\tif (cell != lastCell) {\n
\t\t\t\t\t\trowSpan = getSpanVal(cell, \'rowSpan\');\n
\n
\t\t\t\t\t\tif (rowSpan <= 1) {\n
\t\t\t\t\t\t\tdom.remove(cell);\n
\t\t\t\t\t\t} else {\n
\t\t\t\t\t\t\tsetSpanVal(cell, \'rowSpan\', rowSpan - 1);\n
\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\tlastCell = cell;\n
\t\t\t\t\t}\n
\t\t\t\t});\n
\t\t\t}\n
\n
\t\t\t// Get selected rows and move selection out of scope\n
\t\t\trows = getSelectedRows();\n
\n
\t\t\t// Delete all selected rows\n
\t\t\teach(rows.reverse(), function(tr) {\n
\t\t\t\tdeleteRow(tr);\n
\t\t\t});\n
\n
\t\t\tcleanup();\n
\t\t}\n
\n
\t\tfunction cutRows() {\n
\t\t\tvar rows = getSelectedRows();\n
\n
\t\t\tdom.remove(rows);\n
\t\t\tcleanup();\n
\n
\t\t\treturn rows;\n
\t\t}\n
\n
\t\tfunction copyRows() {\n
\t\t\tvar rows = getSelectedRows();\n
\n
\t\t\teach(rows, function(row, i) {\n
\t\t\t\trows[i] = cloneNode(row, true);\n
\t\t\t});\n
\n
\t\t\treturn rows;\n
\t\t}\n
\n
\t\tfunction pasteRows(rows, before) {\n
\t\t\tvar selectedRows = getSelectedRows(),\n
\t\t\t\ttargetRow = selectedRows[before ? 0 : selectedRows.length - 1],\n
\t\t\t\ttargetCellCount = targetRow.cells.length;\n
\n
\t\t\t// Nothing to paste\n
\t\t\tif (!rows) {\n
\t\t\t\treturn;\n
\t\t\t}\n
\n
\t\t\t// Calc target cell count\n
\t\t\teach(grid, function(row) {\n
\t\t\t\tvar match;\n
\n
\t\t\t\ttargetCellCount = 0;\n
\t\t\t\teach(row, function(cell) {\n
\t\t\t\t\tif (cell.real) {\n
\t\t\t\t\t\ttargetCellCount += cell.colspan;\n
\t\t\t\t\t}\n
\n
\t\t\t\t\tif (cell.elm.parentNode == targetRow) {\n
\t\t\t\t\t\tmatch = 1;\n
\t\t\t\t\t}\n
\t\t\t\t});\n
\n
\t\t\t\tif (match) {\n
\t\t\t\t\treturn false;\n
\t\t\t\t}\n
\t\t\t});\n
\n
\t\t\tif (!before) {\n
\t\t\t\trows.reverse();\n
\t\t\t}\n
\n
\t\t\teach(rows, function(row) {\n
\t\t\t\tvar i, cellCount = row.cells.length, cell;\n
\n
\t\t\t\t// Remove col/rowspans\n
\t\t\t\tfor (i = 0; i < cellCount; i++) {\n
\t\t\t\t\tcell = row.cells[i];\n
\t\t\t\t\tsetSpanVal(cell, \'colSpan\', 1);\n
\t\t\t\t\tsetSpanVal(cell, \'rowSpan\', 1);\n
\t\t\t\t}\n
\n
\t\t\t\t// Needs more cells\n
\t\t\t\tfor (i = cellCount; i < targetCellCount; i++) {\n
\t\t\t\t\trow.appendChild(cloneCell(row.cells[cellCount - 1]));\n
\t\t\t\t}\n
\n
\t\t\t\t// Needs less cells\n
\t\t\t\tfor (i = targetCellCount; i < cellCount; i++) {\n
\t\t\t\t\tdom.remove(row.cells[i]);\n
\t\t\t\t}\n
\n
\t\t\t\t// Add before/after\n
\t\t\t\tif (before) {\n
\t\t\t\t\ttargetRow.parentNode.insertBefore(row, targetRow);\n
\t\t\t\t} else {\n
\t\t\t\t\tdom.insertAfter(row, targetRow);\n
\t\t\t\t}\n
\t\t\t});\n
\n
\t\t\t// Remove current selection\n
\t\t\tdom.removeClass(dom.select(\'td.mce-item-selected,th.mce-item-selected\'), \'mce-item-selected\');\n
\t\t}\n
\n
\t\tfunction getPos(target) {\n
\t\t\tvar pos;\n
\n
\t\t\teach(grid, function(row, y) {\n
\t\t\t\teach(row, function(cell, x) {\n
\t\t\t\t\tif (cell.elm == target) {\n
\t\t\t\t\t\tpos = {x: x, y: y};\n
\t\t\t\t\t\treturn false;\n
\t\t\t\t\t}\n
\t\t\t\t});\n
\n
\t\t\t\treturn !pos;\n
\t\t\t});\n
\n
\t\t\treturn pos;\n
\t\t}\n
\n
\t\tfunction setStartCell(cell) {\n
\t\t\tstartPos = getPos(cell);\n
\t\t}\n
\n
\t\tfunction findEndPos() {\n
\t\t\tvar maxX, maxY;\n
\n
\t\t\tmaxX = maxY = 0;\n
\n
\t\t\teach(grid, function(row, y) {\n
\t\t\t\teach(row, function(cell, x) {\n
\t\t\t\t\tvar colSpan, rowSpan;\n
\n
\t\t\t\t\tif (isCellSelected(cell)) {\n
\t\t\t\t\t\tcell = grid[y][x];\n
\n
\t\t\t\t\t\tif (x > maxX) {\n
\t\t\t\t\t\t\tmaxX = x;\n
\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\tif (y > maxY) {\n
\t\t\t\t\t\t\tmaxY = y;\n
\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\tif (cell.real) {\n
\t\t\t\t\t\t\tcolSpan = cell.colspan - 1;\n
\t\t\t\t\t\t\trowSpan = cell.rowspan - 1;\n
\n
\t\t\t\t\t\t\tif (colSpan) {\n
\t\t\t\t\t\t\t\tif (x + colSpan > maxX) {\n
\t\t\t\t\t\t\t\t\tmaxX = x + colSpan;\n
\t\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\t\tif (rowSpan) {\n
\t\t\t\t\t\t\t\tif (y + rowSpan > maxY) {\n
\t\t\t\t\t\t\t\t\tmaxY = y + rowSpan;\n
\t\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t}\n
\t\t\t\t\t}\n
\t\t\t\t});\n
\t\t\t});\n
\n
\t\t\treturn {x: maxX, y: maxY};\n
\t\t}\n
\n
\t\tfunction setEndCell(cell) {\n
\t\t\tvar startX, startY, endX, endY, maxX, maxY, colSpan, rowSpan, x, y;\n
\n
\t\t\tendPos = getPos(cell);\n
\n
\t\t\tif (startPos && endPos) {\n
\t\t\t\t// Get start/end positions\n
\t\t\t\tstartX = Math.min(startPos.x, endPos.x);\n
\t\t\t\tstartY = Math.min(startPos.y, endPos.y);\n
\t\t\t\tendX = Math.max(startPos.x, endPos.x);\n
\t\t\t\tendY = Math.max(startPos.y, endPos.y);\n
\n
\t\t\t\t// Expand end positon to include spans\n
\t\t\t\tmaxX = endX;\n
\t\t\t\tmaxY = endY;\n
\n
\t\t\t\t// Expand startX\n
\t\t\t\tfor (y = startY; y <= maxY; y++) {\n
\t\t\t\t\tcell = grid[y][startX];\n
\n
\t\t\t\t\tif (!cell.real) {\n
\t\t\t\t\t\tif (startX - (cell.colspan - 1) < startX) {\n
\t\t\t\t\t\t\tstartX -= cell.colspan - 1;\n
\t\t\t\t\t\t}\n
\t\t\t\t\t}\n
\t\t\t\t}\n
\n
\t\t\t\t// Expand startY\n
\t\t\t\tfor (x = startX; x <= maxX; x++) {\n
\t\t\t\t\tcell = grid[startY][x];\n
\n
\t\t\t\t\tif (!cell.real) {\n
\t\t\t\t\t\tif (startY - (cell.rowspan - 1) < startY) {\n
\t\t\t\t\t\t\tstartY -= cell.rowspan - 1;\n
\t\t\t\t\t\t}\n
\t\t\t\t\t}\n
\t\t\t\t}\n
\n
\t\t\t\t// Find max X, Y\n
\t\t\t\tfor (y = startY; y <= endY; y++) {\n
\t\t\t\t\tfor (x = startX; x <= endX; x++) {\n
\t\t\t\t\t\tcell = grid[y][x];\n
\n
\t\t\t\t\t\tif (cell.real) {\n
\t\t\t\t\t\t\tcolSpan = cell.colspan - 1;\n
\t\t\t\t\t\t\trowSpan = cell.rowspan - 1;\n
\n
\t\t\t\t\t\t\tif (colSpan) {\n
\t\t\t\t\t\t\t\tif (x + colSpan > maxX) {\n
\t\t\t\t\t\t\t\t\tmaxX = x + colSpan;\n
\t\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\t\tif (rowSpan) {\n
\t\t\t\t\t\t\t\tif (y + rowSpan > maxY) {\n
\t\t\t\t\t\t\t\t\tmaxY = y + rowSpan;\n
\t\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t}\n
\t\t\t\t\t}\n
\t\t\t\t}\n
\n
\t\t\t\t// Remove current selection\n
\t\t\t\tdom.removeClass(dom.select(\'td.mce-item-selected,th.mce-item-selected\'), \'mce-item-selected\');\n
\n
\t\t\t\t// Add new selection\n
\t\t\t\tfor (y = startY; y <= maxY; y++) {\n
\t\t\t\t\tfor (x = startX; x <= maxX; x++) {\n
\t\t\t\t\t\tif (grid[y][x]) {\n
\t\t\t\t\t\t\tdom.addClass(grid[y][x].elm, \'mce-item-selected\');\n
\t\t\t\t\t\t}\n
\t\t\t\t\t}\n
\t\t\t\t}\n
\t\t\t}\n
\t\t}\n
\n
\t\tfunction moveRelIdx(cellElm, delta) {\n
\t\t\tvar pos, index, cell;\n
\n
\t\t\tpos = getPos(cellElm);\n
\t\t\tindex = pos.y * gridWidth + pos.x;\n
\n
\t\t\tdo {\n
\t\t\t\tindex += delta;\n
\t\t\t\tcell = getCell(index % gridWidth, Math.floor(index / gridWidth));\n
\n
\t\t\t\tif (!cell) {\n
\t\t\t\t\tbreak;\n
\t\t\t\t}\n
\n
\t\t\t\tif (cell.elm != cellElm) {\n
\t\t\t\t\tselection.select(cell.elm, true);\n
\n
\t\t\t\t\tif (dom.isEmpty(cell.elm)) {\n
\t\t\t\t\t\tselection.collapse(true);\n
\t\t\t\t\t}\n
\n
\t\t\t\t\treturn true;\n
\t\t\t\t}\n
\t\t\t} while (cell.elm == cellElm);\n
\n
\t\t\treturn false;\n
\t\t}\n
\n
\t\ttable = table || dom.getParent(selection.getStart(), \'table\');\n
\n
\t\tbuildGrid();\n
\n
\t\tselectedCell = dom.getParent(selection.getStart(), \'th,td\');\n
\t\tif (selectedCell) {\n
\t\t\tstartPos = getPos(selectedCell);\n
\t\t\tendPos = findEndPos();\n
\t\t\tselectedCell = getCell(startPos.x, startPos.y);\n
\t\t}\n
\n
\t\tTools.extend(this, {\n
\t\t\tdeleteTable: deleteTable,\n
\t\t\tsplit: split,\n
\t\t\tmerge: merge,\n
\t\t\tinsertRow: insertRow,\n
\t\t\tinsertCol: insertCol,\n
\t\t\tdeleteCols: deleteCols,\n
\t\t\tdeleteRows: deleteRows,\n
\t\t\tcutRows: cutRows,\n
\t\t\tcopyRows: copyRows,\n
\t\t\tpasteRows: pasteRows,\n
\t\t\tgetPos: getPos,\n
\t\t\tsetStartCell: setStartCell,\n
\t\t\tsetEndCell: setEndCell,\n
\t\t\tmoveRelIdx: moveRelIdx,\n
\t\t\trefresh: buildGrid\n
\t\t});\n
\t};\n
});\n
\n
// Included from: js/tinymce/plugins/table/classes/Quirks.js\n
\n
/**\n
 * Quirks.js\n
 *\n
 * Released under LGPL License.\n
 * Copyright (c) 1999-2015 Ephox Corp. All rights reserved\n
 *\n
 * License: http://www.tinymce.com/license\n
 * Contributing: http://www.tinymce.com/contributing\n
 */\n
\n
/**\n
 * This class includes fixes for various browser quirks.\n
 *\n
 * @class tinymce.tableplugin.Quirks\n
 * @private\n
 */\n
define("tinymce/tableplugin/Quirks", [\n
\t"tinymce/util/VK",\n
\t"tinymce/Env",\n
\t"tinymce/util/Tools",\n
\t"tinymce/tableplugin/Utils"\n
], function(VK, Env, Tools, Utils) {\n
\tvar each = Tools.each, getSpanVal = Utils.getSpanVal;\n
\n
\treturn function(editor) {\n
\t\t/**\n
\t\t * Fixed caret movement around tables on WebKit.\n
\t\t */\n
\t\tfunction moveWebKitSelection() {\n
\t\t\tfunction eventHandler(e) {\n
\t\t\t\tvar key = e.keyCode;\n
\n
\t\t\t\tfunction handle(upBool, sourceNode) {\n
\t\t\t\t\tvar siblingDirection = upBool ? \'previousSibling\' : \'nextSibling\';\n
\t\t\t\t\tvar currentRow = editor.dom.getParent(sourceNode, \'tr\');\n
\t\t\t\t\tvar siblingRow = currentRow[siblingDirection];\n
\n
\t\t\t\t\tif (siblingRow) {\n
\t\t\t\t\t\tmoveCursorToRow(editor, sourceNode, siblingRow, upBool);\n
\t\t\t\t\t\te.preventDefault();\n
\t\t\t\t\t\treturn true;\n
\t\t\t\t\t}\n
\n
\t\t\t\t\tvar tableNode = editor.dom.getParent(currentRow, \'table\');\n
\t\t\t\t\tvar middleNode = currentRow.parentNode;\n
\t\t\t\t\tvar parentNodeName = middleNode.nodeName.toLowerCase();\n
\t\t\t\t\tif (parentNodeName === \'tbody\' || parentNodeName === (upBool ? \'tfoot\' : \'thead\')) {\n
\t\t\t\t\t\tvar targetParent = getTargetParent(upBool, tableNode, middleNode, \'tbody\');\n
\t\t\t\t\t\tif (targetParent !== null) {\n
\t\t\t\t\t\t\treturn moveToRowInTarget(upBool, targetParent, sourceNode);\n
\t\t\t\t\t\t}\n
\t\t\t\t\t}\n
\n
\t\t\t\t\treturn escapeTable(upBool, currentRow, siblingDirection, tableNode);\n
\t\t\t\t}\n
\n
\t\t\t\tfunction getTargetParent(upBool, topNode, secondNode, nodeName) {\n
\t\t\t\t\tvar tbodies = editor.dom.select(\'>\' + nodeName, topNode);\n
\t\t\t\t\tvar position = tbodies.indexOf(secondNode);\n
\t\t\t\t\tif (upBool && position === 0 || !upBool && position === tbodies.length - 1) {\n
\t\t\t\t\t\treturn getFirstHeadOrFoot(upBool, topNode);\n
\t\t\t\t\t} else if (position === -1) {\n
\t\t\t\t\t\tvar topOrBottom = secondNode.tagName.toLowerCase() === \'thead\' ? 0 : tbodies.length - 1;\n
\t\t\t\t\t\treturn tbodies[topOrBottom];\n
\t\t\t\t\t}\n
\n
\t\t\t\t\treturn tbodies[position + (upBool ? -1 : 1)];\n
\t\t\t\t}\n
\n
\t\t\t\tfunction getFirstHeadOrFoot(upBool, parent) {\n
\t\t\t\t\tvar tagName = upBool ? \'thead\' : \'tfoot\';\n
\t\t\t\t\tvar headOrFoot = editor.dom.select(\'>\' + tagName, parent);\n
\t\t\t\t\treturn headOrFoot.length !== 0 ? headOrFoot[0] : null;\n
\t\t\t\t}\n
\n
\t\t\t\tfunction moveToRowInTarget(upBool, targetParent, sourceNode) {\n
\t\t\t\t\tvar targetRow = getChildForDirection(targetParent, upBool);\n
\n
\t\t\t\t\tif (targetRow) {\n
\t\t\t\t\t\tmoveCursorToRow(editor, sourceNode, targetRow, upBool);\n
\t\t\t\t\t}\n
\n
\t\t\t\t\te.preventDefault();\n
\t\t\t\t\treturn true;\n
\t\t\t\t}\n
\n
\t\t\t\tfunction escapeTable(upBool, currentRow, siblingDirection, table) {\n
\t\t\t\t\tvar tableSibling = table[siblingDirection];\n
\n
\t\t\t\t\tif (tableSibling) {\n
\t\t\t\t\t\tmoveCursorToStartOfElement(tableSibling);\n
\t\t\t\t\t\treturn true;\n
\t\t\t\t\t}\n
\n
\t\t\t\t\tvar parentCell = editor.dom.getParent(table, \'td,th\');\n
\t\t\t\t\tif (parentCell) {\n
\t\t\t\t\t\treturn handle(upBool, parentCell, e);\n
\t\t\t\t\t}\n
\n
\t\t\t\t\tvar backUpSibling = getChildForDirection(currentRow, !upBool);\n
\t\t\t\t\tmoveCursorToStartOfElement(backUpSibling);\n
\t\t\t\t\te.preventDefault();\n
\t\t\t\t\treturn false;\n
\t\t\t\t}\n
\n
\t\t\t\tfunction getChildForDirection(parent, up) {\n
\t\t\t\t\tvar child = parent && parent[up ? \'lastChild\' : \'firstChild\'];\n
\t\t\t\t\t// BR is not a valid table child to return in this case we return the table cell\n
\t\t\t\t\treturn child && child.nodeName === \'BR\' ? editor.dom.getParent(child, \'td,th\') : child;\n
\t\t\t\t}\n
\n
\t\t\t\tfunction moveCursorToStartOfElement(n) {\n
\t\t\t\t\teditor.selection.setCursorLocation(n, 0);\n
\t\t\t\t}\n
\n
\t\t\t\tfunction isVerticalMovement() {\n
\t\t\t\t\treturn key == VK.UP || key == VK.DOWN;\n
\t\t\t\t}\n
\n
\t\t\t\tfunction isInTable(editor) {\n
\t\t\t\t\tvar node = editor.selection.getNode();\n
\t\t\t\t\tvar currentRow = editor.dom.getParent(node, \'tr\');\n
\t\t\t\t\treturn currentRow !== null;\n
\t\t\t\t}\n
\n
\t\t\t\tfunction columnIndex(column) {\n
\t\t\t\t\tvar colIndex = 0;\n
\t\t\t\t\tvar c = column;\n
\t\t\t\t\twhile (c.previousSibling) {\n
\t\t\t\t\t\tc = c.previousSibling;\n
\t\t\t\t\t\tcolIndex = colIndex + getSpanVal(c, "colspan");\n
\t\t\t\t\t}\n
\t\t\t\t\treturn colIndex;\n
\t\t\t\t}\n
\n
\t\t\t\tfunction findColumn(rowElement, columnIndex) {\n
\t\t\t\t\tvar c = 0, r = 0;\n
\n
\t\t\t\t\teach(rowElement.children, function(cell, i) {\n
\t\t\t\t\t\tc = c + getSpanVal(cell, "colspan");\n
\t\t\t\t\t\tr = i;\n
\t\t\t\t\t\tif (c > columnIndex) {\n
\t\t\t\t\t\t\treturn false;\n
\t\t\t\t\t\t}\n
\t\t\t\t\t});\n
\t\t\t\t\treturn r;\n
\t\t\t\t}\n
\n
\t\t\t\tfunction moveCursorToRow(ed, node, row, upBool) {\n
\t\t\t\t\tvar srcColumnIndex = columnIndex(editor.dom.getParent(node, \'td,th\'));\n
\t\t\t\t\tvar tgtColumnIndex = findColumn(row, srcColumnIndex);\n
\t\t\t\t\tvar tgtNode = row.childNodes[tgtColumnIndex];\n
\t\t\t\t\tvar rowCellTarget = getChildForDirection(tgtNode, upBool);\n
\t\t\t\t\tmoveCursorToStartOfElement(rowCellTarget || tgtNode);\n
\t\t\t\t}\n
\n
\t\t\t\tfunction shouldFixCaret(preBrowserNode) {\n
\t\t\t\t\tvar newNode = editor.selection.getNode();\n
\t\t\t\t\tvar newParent = editor.dom.getParent(newNode, \'td,th\');\n
\t\t\t\t\tvar oldParent = editor.dom.getParent(preBrowserNode, \'td,th\');\n
\n
\t\t\t\t\treturn newParent && newParent !== oldParent && checkSameParentTable(newParent, oldParent);\n
\t\t\t\t}\n
\n
\t\t\t\tfunction checkSameParentTable(nodeOne, NodeTwo) {\n
\t\t\t\t\treturn editor.dom.getParent(nodeOne, \'TABLE\') === editor.dom.getParent(NodeTwo, \'TABLE\');\n
\t\t\t\t}\n
\n
\t\t\t\tif (isVerticalMovement() && isInTable(editor)) {\n
\t\t\t\t\tvar preBrowserNode = editor.selection.getNode();\n
\t\t\t\t\tsetTimeout(function() {\n
\t\t\t\t\t\tif (shouldFixCaret(preBrowserNode)) {\n
\t\t\t\t\t\t\thandle(!e.shiftKey && key === VK.UP, preBrowserNode, e);\n
\t\t\t\t\t\t}\n
\t\t\t\t\t}, 0);\n
\t\t\t\t}\n
\t\t\t}\n
\n
\t\t\teditor.on(\'KeyDown\', function(e) {\n
\t\t\t\teventHandler(e);\n
\t\t\t});\n
\t\t}\n
\n
\t\tfunction fixBeforeTableCaretBug() {\n
\t\t\t// Checks if the selection/caret is at the start of the specified block element\n
\t\t\tfunction isAtStart(rng, par) {\n
\t\t\t\tvar doc = par.ownerDocument, rng2 = doc.createRange(), elm;\n
\n
\t\t\t\trng2.setStartBefore(par);\n
\t\t\t\trng2.setEnd(rng.endContainer, rng.endOffset);\n
\n
\t\t\t\telm = doc.createElement(\'body\');\n
\t\t\t\telm.appendChild(rng2.cloneContents());\n
\n
\t\t\t\t// Check for text characters of other elements that should be treated as content\n
\t\t\t\treturn elm.innerHTML.replace(/<(br|img|object|embed|input|textarea)[^>]*>/gi, \'-\').replace(/<[^>]+>/g, \'\').length === 0;\n
\t\t\t}\n
\n
\t\t\t// Fixes an bug where it\'s impossible to place the caret before a table in Gecko\n
\t\t\t// this fix solves it by detecting when the caret is at the beginning of such a table\n
\t\t\t// and then manually moves the caret infront of the table\n
\t\t\teditor.on(\'KeyDown\', function(e) {\n
\t\t\t\tvar rng, table, dom = editor.dom;\n
\n
\t\t\t\t// On gecko it\'s not possible to place the caret before a table\n
\t\t\t\tif (e.keyCode == 37 || e.keyCode == 38) {\n
\t\t\t\t\trng = editor.selection.getRng();\n
\t\t\t\t\ttable = dom.getParent(rng.startContainer, \'table\');\n
\n
\t\t\t\t\tif (table && editor.getBody().firstChild == table) {\n
\t\t\t\t\t\tif (isAtStart(rng, table)) {\n
\t\t\t\t\t\t\trng = dom.createRng();\n
\n
\t\t\t\t\t\t\trng.setStartBefore(table);\n
\t\t\t\t\t\t\trng.setEndBefore(table);\n
\n
\t\t\t\t\t\t\teditor.selection.setRng(rng);\n
\n
\t\t\t\t\t\t\te.preventDefault();\n
\t\t\t\t\t\t}\n
\t\t\t\t\t}\n
\t\t\t\t}\n
\t\t\t});\n
\t\t}\n
\n
\t\t// Fixes an issue on Gecko where it\'s impossible to place the caret behind a table\n
\t\t// This fix will force a paragraph element after the table but only when the forced_root_block setting is enabled\n
\t\tfunction fixTableCaretPos() {\n
\t\t\teditor.on(\'KeyDown SetContent VisualAid\', function() {\n
\t\t\t\tvar last;\n
\n
\t\t\t\t// Skip empty text nodes from the end\n
\t\t\t\tfor (last = editor.getBody().lastChild; last; last = last.previousSibling) {\n
\t\t\t\t\tif (last.nodeType == 3) {\n
\t\t\t\t\t\tif (last.nodeValue.length > 0) {\n
\t\t\t\t\t\t\tbreak;\n
\t\t\t\t\t\t}\n
\t\t\t\t\t} else if (last.nodeType == 1 && (last.tagName == \'BR\' || !last.getAttribute(\'data-mce-bogus\'))) {\n
\t\t\t\t\t\tbreak;\n
\t\t\t\t\t}\n
\t\t\t\t}\n
\n
\t\t\t\tif (last && last.nodeName == \'TABLE\') {\n
\t\t\t\t\tif (editor.settings.forced_root_block) {\n
\t\t\t\t\t\teditor.dom.add(\n
\t\t\t\t\t\t\teditor.getBody(),\n
\t\t\t\t\t\t\teditor.settings.forced_root_block,\n
\t\t\t\t\t\t\teditor.settings.forced_root_block_attrs,\n
\t\t\t\t\t\t\tEnv.ie && Env.ie < 11 ? \'&nbsp;\' : \'<br data-mce-bogus="1" />\'\n
\t\t\t\t\t\t);\n
\t\t\t\t\t} else {\n
\t\t\t\t\t\teditor.dom.add(editor.getBody(), \'br\', {\'data-mce-bogus\': \'1\'});\n
\t\t\t\t\t}\n
\t\t\t\t}\n
\t\t\t});\n
\n
\t\t\teditor.on(\'PreProcess\', function(o) {\n
\t\t\t\tvar last = o.node.lastChild;\n
\n
\t\t\t\tif (last && (last.nodeName == "BR" || (last.childNodes.length == 1 &&\n
\t\t\t\t\t(last.firstChild.nodeName == \'BR\' || last.firstChild.nodeValue == \'\\u00a0\'))) &&\n
\t\t\t\t\tlast.previousSibling && last.previousSibling.nodeName == "TABLE") {\n
\t\t\t\t\teditor.dom.remove(last);\n
\t\t\t\t}\n
\t\t\t});\n
\t\t}\n
\n
\t\t// this nasty hack is here to work around some WebKit selection bugs.\n
\t\tfunction fixTableCellSelection() {\n
\t\t\tfunction tableCellSelected(ed, rng, n, currentCell) {\n
\t\t\t\t// The decision of when a table cell is selected is somewhat involved.  The fact that this code is\n
\t\t\t\t// required is actually a pointer to the root cause of this bug. A cell is selected when the start\n
\t\t\t\t// and end offsets are 0, the start container is a text, and the selection node is either a TR (most cases)\n
\t\t\t\t// or the parent of the table (in the case of the selection containing the last cell of a table).\n
\t\t\t\tvar TEXT_NODE = 3, table = ed.dom.getParent(rng.startContainer, \'TABLE\');\n
\t\t\t\tvar tableParent, allOfCellSelected, tableCellSelection;\n
\n
\t\t\t\tif (table) {\n
\t\t\t\t\ttableParent = table.parentNode;\n
\t\t\t\t}\n
\n
\t\t\t\tallOfCellSelected = rng.startContainer.nodeType == TEXT_NODE &&\n
\t\t\t\t\trng.startOffset === 0 &&\n
\t\t\t\t\trng.endOffset === 0 &&\n
\t\t\t\t\tcurrentCell &&\n
\t\t\t\t\t(n.nodeName == "TR" || n == tableParent);\n
\n
\t\t\t\ttableCellSelection = (n.nodeName == "TD" || n.nodeName == "TH") && !currentCell;\n
\n
\t\t\t\treturn allOfCellSelected || tableCellSelection;\n
\t\t\t}\n
\n
\t\t\tfunction fixSelection() {\n
\t\t\t\tvar rng = editor.selection.getRng();\n
\t\t\t\tvar n = editor.selection.getNode();\n
\t\t\t\tvar currentCell = editor.dom.getParent(rng.startContainer, \'TD,TH\');\n
\n
\t\t\t\tif (!tableCellSelected(editor, rng, n, currentCell)) {\n
\t\t\t\t\treturn;\n
\t\t\t\t}\n
\n
\t\t\t\tif (!currentCell) {\n
\t\t\t\t\tcurrentCell = n;\n
\t\t\t\t}\n
\n
\t\t\t\t// Get the very last node inside the table cell\n
\t\t\t\tvar end = currentCell.lastChild;\n
\t\t\t\twhile (end.lastChild) {\n
\t\t\t\t\tend = end.lastChild;\n
\t\t\t\t}\n
\n
\t\t\t\t// Select the entire table cell. Nothing outside of the table cell should be selected.\n
\t\t\t\tif (end.nodeType == 3) {\n
\t\t\t\t\trng.setEnd(end, end.data.length);\n
\t\t\t\t\teditor.selection.setRng(rng);\n
\t\t\t\t}\n
\t\t\t}\n
\n
\t\t\teditor.on(\'KeyDown\', function() {\n
\t\t\t\tfixSelection();\n
\t\t\t});\n
\n
\t\t\teditor.on(\'MouseDown\', function(e) {\n
\t\t\t\tif (e.button != 2) {\n
\t\t\t\t\tfixSelection();\n
\t\t\t\t}\n
\t\t\t});\n
\t\t}\n
\n
\t\t/**\n
\t\t * Delete table if all cells are selected.\n
\t\t */\n
\t\tfunction deleteTable() {\n
\t\t\tfunction placeCaretInCell(cell) {\n
\t\t\t\teditor.selection.select(cell, true);\n
\t\t\t\teditor.selection.collapse(true);\n
\t\t\t}\n
\n
\t\t\tfunction clearCell(cell) {\n
\t\t\t\teditor.$(cell).empty();\n
\t\t\t\tUtils.paddCell(cell);\n
\t\t\t}\n
\n
\t\t\teditor.on(\'keydown\', function(e) {\n
\t\t\t\tif ((e.keyCode == VK.DELETE || e.keyCode == VK.BACKSPACE) && !e.isDefaultPrevented()) {\n
\t\t\t\t\tvar table, tableCells, selectedTableCells, cell;\n
\n
\t\t\t\t\ttable = editor.dom.getParent(editor.selection.getStart(), \'table\');\n
\t\t\t\t\tif (table) {\n
\t\t\t\t\t\ttableCells = editor.dom.select(\'td,th\', table);\n
\t\t\t\t\t\tselectedTableCells = Tools.grep(tableCells, function(cell) {\n
\t\t\t\t\t\t\treturn editor.dom.hasClass(cell, \'mce-item-selected\');\n
\t\t\t\t\t\t});\n
\n
\t\t\t\t\t\tif (selectedTableCells.length === 0) {\n
\t\t\t\t\t\t\t// If caret is within an empty table cell then empty it for real\n
\t\t\t\t\t\t\tcell = editor.dom.getParent(editor.selection.getStart(), \'td,th\');\n
\t\t\t\t\t\t\tif (editor.selection.isCollapsed() && cell && editor.dom.isEmpty(cell)) {\n
\t\t\t\t\t\t\t\te.preventDefault();\n
\t\t\t\t\t\t\t\tclearCell(cell);\n
\t\t\t\t\t\t\t\tplaceCaretInCell(cell);\n
\t\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\t\treturn;\n
\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\te.preventDefault();\n
\n
\t\t\t\t\t\tif (tableCells.length == selectedTableCells.length) {\n
\t\t\t\t\t\t\teditor.execCommand(\'mceTableDelete\');\n
\t\t\t\t\t\t} else {\n
\t\t\t\t\t\t\tTools.each(selectedTableCells, clearCell);\n
\t\t\t\t\t\t\tplaceCaretInCell(selectedTableCells[0]);\n
\t\t\t\t\t\t}\n
\t\t\t\t\t}\n
\t\t\t\t}\n
\t\t\t});\n
\t\t}\n
\n
\t\tdeleteTable();\n
\n
\t\tif (Env.webkit) {\n
\t\t\tmoveWebKitSelection();\n
\t\t\tfixTableCellSelection();\n
\t\t}\n
\n
\t\tif (Env.gecko) {\n
\t\t\tfixBeforeTableCaretBug();\n
\t\t\tfixTableCaretPos();\n
\t\t}\n
\n
\t\tif (Env.ie > 10) {\n
\t\t\tfixBeforeTableCaretBug();\n
\t\t\tfixTableCaretPos();\n
\t\t}\n
\t};\n
});\n
\n
// Included from: js/tinymce/plugins/table/classes/CellSelection.js\n
\n
/**\n
 * CellSelection.js\n
 *\n
 * Released under LGPL License.\n
 * Copyright (c) 1999-2015 Ephox Corp. All rights reserved\n
 *\n
 * License: http://www.tinymce.com/license\n
 * Contributing: http://www.tinymce.com/contributing\n
 */\n
\n
/**\n
 * This class handles table cell selection by faking it using a css class that gets applied\n
 * to cells when dragging the mouse from one cell to another.\n
 *\n
 * @class tinymce.tableplugin.CellSelection\n
 * @private\n
 */\n
define("tinymce/tableplugin/CellSelection", [\n
\t"tinymce/tableplugin/TableGrid",\n
\t"tinymce/dom/TreeWalker",\n
\t"tinymce/util/Tools"\n
], function(TableGrid, TreeWalker, Tools) {\n
\treturn function(editor) {\n
\t\tvar dom = editor.dom, tableGrid, startCell, startTable, hasCellSelection = true, resizing;\n
\n
\t\tfunction clear(force) {\n
\t\t\t// Restore selection possibilities\n
\t\t\teditor.getBody().style.webkitUserSelect = \'\';\n
\n
\t\t\tif (force || hasCellSelection) {\n
\t\t\t\teditor.dom.removeClass(\n
\t\t\t\t\teditor.dom.select(\'td.mce-item-selected,th.mce-item-selected\'),\n
\t\t\t\t\t\'mce-item-selected\'\n
\t\t\t\t);\n
\n
\t\t\t\thasCellSelection = false;\n
\t\t\t}\n
\t\t}\n
\n
\t\tfunction cellSelectionHandler(e) {\n
\t\t\tvar sel, table, target = e.target;\n
\n
\t\t\tif (resizing) {\n
\t\t\t\treturn;\n
\t\t\t}\n
\n
\t\t\tif (startCell && (tableGrid || target != startCell) && (target.nodeName == \'TD\' || target.nodeName == \'TH\')) {\n
\t\t\t\ttable = dom.getParent(target, \'table\');\n
\t\t\t\tif (table == startTable) {\n
\t\t\t\t\tif (!tableGrid) {\n
\t\t\t\t\t\ttableGrid = new TableGrid(editor, table);\n
\t\t\t\t\t\ttableGrid.setStartCell(startCell);\n
\n
\t\t\t\t\t\teditor.getBody().style.webkitUserSelect = \'none\';\n
\t\t\t\t\t}\n
\n
\t\t\t\t\ttableGrid.setEndCell(target);\n
\t\t\t\t\thasCellSelection = true;\n
\t\t\t\t}\n
\n
\t\t\t\t// Remove current selection\n
\t\t\t\tsel = editor.selection.getSel();\n
\n
\t\t\t\ttry {\n
\t\t\t\t\tif (sel.removeAllRanges) {\n
\t\t\t\t\t\tsel.removeAllRanges();\n
\t\t\t\t\t} else {\n
\t\t\t\t\t\tsel.empty();\n
\t\t\t\t\t}\n
\t\t\t\t} catch (ex) {\n
\t\t\t\t\t// IE9 might throw errors here\n
\t\t\t\t}\n
\n
\t\t\t\te.preventDefault();\n
\t\t\t}\n
\t\t}\n
\n
\t\t// Add cell selection logic\n
\t\teditor.on(\'MouseDown\', function(e) {\n
\t\t\tif (e.button != 2 && !resizing) {\n
\t\t\t\tclear();\n
\n
\t\t\t\tstartCell = dom.getParent(e.target, \'td,th\');\n
\t\t\t\tstartTable = dom.getParent(startCell, \'table\');\n
\t\t\t}\n
\t\t});\n
\n
\t\teditor.on(\'mouseover\', cellSelectionHandler);\n
\n
\t\teditor.on(\'remove\', function() {\n
\t\t\tdom.unbind(editor.getDoc(), \'mouseover\', cellSelectionHandler);\n
\t\t});\n
\n
\t\teditor.on(\'MouseUp\', function() {\n
\t\t\tvar rng, sel = editor.selection, selectedCells, walker, node, lastNode;\n
\n
\t\t\tfunction setPoint(node, start) {\n
\t\t\t\tvar walker = new TreeWalker(node, node);\n
\n
\t\t\t\tdo {\n
\t\t\t\t\t// Text node\n
\t\t\t\t\tif (node.nodeType == 3 && Tools.trim(node.nodeValue).length !== 0) {\n
\t\t\t\t\t\tif (start) {\n
\t\t\t\t\t\t\trng.setStart(node, 0);\n
\t\t\t\t\t\t} else {\n
\t\t\t\t\t\t\trng.setEnd(node, node.nodeValue.length);\n
\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\treturn;\n
\t\t\t\t\t}\n
\n
\t\t\t\t\t// BR element\n
\t\t\t\t\tif (node.nodeName == \'BR\') {\n
\t\t\t\t\t\tif (start) {\n
\t\t\t\t\t\t\trng.setStartBefore(node);\n
\t\t\t\t\t\t} else {\n
\t\t\t\t\t\t\trng.setEndBefore(node);\n
\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\treturn;\n
\t\t\t\t\t}\n
\t\t\t\t} while ((node = (start ? walker.next() : walker.prev())));\n
\t\t\t}\n
\n
\t\t\t// Move selection to startCell\n
\t\t\tif (startCell) {\n
\t\t\t\tif (tableGrid) {\n
\t\t\t\t\teditor.getBody().style.webkitUserSelect = \'\';\n
\t\t\t\t}\n
\n
\t\t\t\t// Try to expand text selection as much as we can only Gecko supports cell selection\n
\t\t\t\tselectedCells = dom.select(\'td.mce-item-selected,th.mce-item-selected\');\n
\t\t\t\tif (selectedCells.length > 0) {\n
\t\t\t\t\trng = dom.createRng();\n
\t\t\t\t\tnode = selectedCells[0];\n
\t\t\t\t\trng.setStartBefore(node);\n
\t\t\t\t\trng.setEndAfter(node);\n
\n
\t\t\t\t\tsetPoint(node, 1);\n
\t\t\t\t\twalker = new TreeWalker(node, dom.getParent(selectedCells[0], \'table\'));\n
\n
\t\t\t\t\tdo {\n
\t\t\t\t\t\tif (node.nodeName == \'TD\' || node.nodeName == \'TH\') {\n
\t\t\t\t\t\t\tif (!dom.hasClass(node, \'mce-item-selected\')) {\n
\t\t\t\t\t\t\t\tbreak;\n
\t\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\t\tlastNode = node;\n
\t\t\t\t\t\t}\n
\t\t\t\t\t} while ((node = walker.next()));\n
\n
\t\t\t\t\tsetPoint(lastNode);\n
\n
\t\t\t\t\tsel.setRng(rng);\n
\t\t\t\t}\n
\n
\t\t\t\teditor.nodeChanged();\n
\t\t\t\tstartCell = tableGrid = startTable = null;\n
\t\t\t}\n
\t\t});\n
\n
\t\teditor.on(\'KeyUp Drop SetContent\', function(e) {\n
\t\t\tclear(e.type == \'setcontent\');\n
\t\t\tstartCell = tableGrid = startTable = null;\n
\t\t\tresizing = false;\n
\t\t});\n
\n
\t\teditor.on(\'ObjectResizeStart ObjectResized\', function(e) {\n
\t\t\tresizing = e.type != \'objectresized\';\n
\t\t});\n
\n
\t\treturn {\n
\t\t\tclear: clear\n
\t\t};\n
\t};\n
});\n
\n
// Included from: js/tinymce/plugins/table/classes/Dialogs.js\n
\n
/**\n
 * Dialogs.js\n
 *\n
 * Released under LGPL License.\n
 * Copyright (c) 1999-2015 Ephox Corp. All rights reserved\n
 *\n
 * License: http://www.tinymce.com/license\n
 * Contributing: http://www.tinymce.com/contributing\n
 */\n
\n
/*eslint dot-notation:0*/\n
\n
/**\n
 * ...\n
 *\n
 * @class tinymce.tableplugin.Dialogs\n
 * @private\n
 */\n
define("tinymce/tableplugin/Dialogs", [\n
\t"tinymce/util/Tools",\n
\t"tinymce/Env"\n
], function(Tools, Env) {\n
\tvar each = Tools.each;\n
\n
\treturn function(editor) {\n
\t\tvar self = this;\n
\n
\t\tfunction createColorPickAction() {\n
\t\t\tvar colorPickerCallback = editor.settings.color_picker_callback;\n
\n
\t\t\tif (colorPickerCallback) {\n
\t\t\t\treturn function() {\n
\t\t\t\t\tvar self = this;\n
\n
\t\t\t\t\tcolorPickerCallback.call(\n
\t\t\t\t\t\teditor,\n
\t\t\t\t\t\tfunction(value) {\n
\t\t\t\t\t\t\tself.value(value).fire(\'change\');\n
\t\t\t\t\t\t},\n
\t\t\t\t\t\tself.value()\n
\t\t\t\t\t);\n
\t\t\t\t};\n
\t\t\t}\n
\t\t}\n
\n
\t\tfunction createStyleForm(dom) {\n
\t\t\treturn {\n
\t\t\t\ttitle: \'Advanced\',\n
\t\t\t\ttype: \'form\',\n
\t\t\t\tdefaults: {\n
\t\t\t\t\tonchange: function() {\n
\t\t\t\t\t\tupdateStyle(dom, this.parents().reverse()[0], this.name() == "style");\n
\t\t\t\t\t}\n
\t\t\t\t},\n
\t\t\t\titems: [\n
\t\t\t\t\t{\n
\t\t\t\t\t\tlabel: \'Style\',\n
\t\t\t\t\t\tname: \'style\',\n
\t\t\t\t\t\ttype: \'textbox\'\n
\t\t\t\t\t},\n
\n
\t\t\t\t\t{\n
\t\t\t\t\t\ttype: \'form\',\n
\t\t\t\t\t\tpadding: 0,\n
\t\t\t\t\t\tformItemDefaults: {\n
\t\t\t\t\t\t\tlayout: \'grid\',\n
\t\t\t\t\t\t\talignH: [\'start\', \'right\']\n
\t\t\t\t\t\t},\n
\t\t\t\t\t\tdefaults: {\n
\t\t\t\t\t\t\tsize: 7\n
\t\t\t\t\t\t},\n
\t\t\t\t\t\titems: [\n
\t\t\t\t\t\t\t{\n
\t\t\t\t\t\t\t\tlabel: \'Border color\',\n
\t\t\t\t\t\t\t\ttype: \'colorbox\',\n
\t\t\t\t\t\t\t\tname: \'borderColor\',\n
\t\t\t\t\t\t\t\tonaction: createColorPickAction()\n
\t\t\t\t\t\t\t},\n
\n
\t\t\t\t\t\t\t{\n
\t\t\t\t\t\t\t\tlabel: \'Background color\',\n
\t\t\t\t\t\t\t\ttype: \'colorbox\',\n
\t\t\t\t\t\t\t\tname: \'backgroundColor\',\n
\t\t\t\t\t\t\t\tonaction: createColorPickAction()\n
\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t]\n
\t\t\t\t\t}\n
\t\t\t\t]\n
\t\t\t};\n
\t\t}\n
\n
\t\tfunction removePxSuffix(size) {\n
\t\t\treturn size ? size.replace(/px$/, \'\') : "";\n
\t\t}\n
\n
\t\tfunction addSizeSuffix(size) {\n
\t\t\tif (/^[0-9]+$/.test(size)) {\n
\t\t\t\tsize += "px";\n
\t\t\t}\n
\n
\t\t\treturn size;\n
\t\t}\n
\n
\t\tfunction unApplyAlign(elm) {\n
\t\t\teach(\'left center right\'.split(\' \'), function(name) {\n
\t\t\t\teditor.formatter.remove(\'align\' + name, {}, elm);\n
\t\t\t});\n
\t\t}\n
\n
\t\tfunction unApplyVAlign(elm) {\n
\t\t\teach(\'top middle bottom\'.split(\' \'), function(name) {\n
\t\t\t\teditor.formatter.remove(\'valign\' + name, {}, elm);\n
\t\t\t});\n
\t\t}\n
\n
\t\tfunction buildListItems(inputList, itemCallback, startItems) {\n
\t\t\tfunction appendItems(values, output) {\n
\t\t\t\toutput = output || [];\n
\n
\t\t\t\tTools.each(values, function(item) {\n
\t\t\t\t\tvar menuItem = {text: item.text || item.title};\n
\n
\t\t\t\t\tif (item.menu) {\n
\t\t\t\t\t\tmenuItem.menu = appendItems(item.menu);\n
\t\t\t\t\t} else {\n
\t\t\t\t\t\tmenuItem.value = item.value;\n
\n
\t\t\t\t\t\tif (itemCallback) {\n
\t\t\t\t\t\t\titemCallback(menuItem);\n
\t\t\t\t\t\t}\n
\t\t\t\t\t}\n
\n
\t\t\t\t\toutput.push(menuItem);\n
\t\t\t\t});\n
\n
\t\t\t\treturn output;\n
\t\t\t}\n
\n
\t\t\treturn appendItems(inputList, startItems || []);\n
\t\t}\n
\n
\t\tfunction updateStyle(dom, win, isStyleCtrl) {\n
\t\t\tvar data = win.toJSON();\n
\t\t\tvar css = dom.parseStyle(data.style);\n
\n
\t\t\tif (isStyleCtrl) {\n
\t\t\t\twin.find(\'#borderColor\').value(css["border-color"] || \'\')[0].fire(\'change\');\n
\t\t\t\twin.find(\'#backgroundColor\').value(css["background-color"] || \'\')[0].fire(\'change\');\n
\t\t\t} else {\n
\t\t\t\tcss["border-color"] = data.borderColor;\n
\t\t\t\tcss["background-color"] = data.backgroundColor;\n
\t\t\t}\n
\n
\t\t\twin.find(\'#style\').value(dom.serializeStyle(dom.parseStyle(dom.serializeStyle(css))));\n
\t\t}\n
\n
\t\tfunction appendStylesToData(dom, data, elm) {\n
\t\t\tvar css = dom.parseStyle(dom.getAttrib(elm, \'style\'));\n
\n
\t\t\tif (css["border-color"]) {\n
\t\t\t\tdata.borderColor = css["border-color"];\n
\t\t\t}\n
\n
\t\t\tif (css["background-color"]) {\n
\t\t\t\tdata.backgroundColor = css["background-color"];\n
\t\t\t}\n
\n
\t\t\tdata.style = dom.serializeStyle(css);\n
\t\t}\n
\n
\t\tfunction mergeStyles(dom, elm, styles) {\n
\t\t\tvar css = dom.parseStyle(dom.getAttrib(elm, \'style\'));\n
\n
\t\t\teach(styles, function(style) {\n
\t\t\t\tcss[style.name] = style.value;\n
\t\t\t});\n
\n
\t\t\tdom.setAttrib(elm, \'style\', dom.serializeStyle(dom.parseStyle(dom.serializeStyle(css))));\n
\t\t}\n
\n
\t\tself.tableProps = function() {\n
\t\t\tself.table(true);\n
\t\t};\n
\n
\t\tself.table = function(isProps) {\n
\t\t\tvar dom = editor.dom, tableElm, colsCtrl, rowsCtrl, classListCtrl, data = {}, generalTableForm, stylesToMerge;\n
\n
\t\t\tfunction onSubmitTableForm() {\n
\n
\t\t\t\t//Explore the layers of the table till we find the first layer of tds or ths\n
\t\t\t\tfunction styleTDTH(elm, name, value) {\n
\t\t\t\t\tif (elm.tagName === "TD" || elm.tagName === "TH") {\n
\t\t\t\t\t\tdom.setStyle(elm, name, value);\n
\t\t\t\t\t} else {\n
\t\t\t\t\t\tif (elm.children) {\n
\t\t\t\t\t\t\tfor (var i = 0; i < elm.children.length; i++) {\n
\t\t\t\t\t\t\t\tstyleTDTH(elm.children[i], name, value);\n
\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t}\n
\t\t\t\t\t}\n
\t\t\t\t}\n
\n
\t\t\t\tvar captionElm;\n
\n
\t\t\t\tupdateStyle(dom, this);\n
\t\t\t\tdata = Tools.extend(data, this.toJSON());\n
\n
\t\t\t\tif (data["class"] === false) {\n
\t\t\t\t\tdelete data["class"];\n
\t\t\t\t}\n
\n
\t\t\t\teditor.undoManager.transact(function() {\n
\t\t\t\t\tif (!tableElm) {\n
\t\t\t\t\t\ttableElm = editor.plugins.table.insertTable(data.cols || 1, data.rows || 1);\n
\t\t\t\t\t}\n
\n
\t\t\t\t\teditor.dom.setAttribs(tableElm, {\n
\t\t\t\t\t\tstyle: data.style,\n
\t\t\t\t\t\t\'class\': data[\'class\']\n
\t\t\t\t\t});\n
\n
\t\t\t\t\tif (editor.settings.table_style_by_css) {\n
\t\t\t\t\t\tstylesToMerge = [];\n
\t\t\t\t\t\tstylesToMerge.push({name: \'border\', value: data.border});\n
\t\t\t\t\t\tstylesToMerge.push({name: \'border-spacing\', value: addSizeSuffix(data.cellspacing)});\n
\t\t\t\t\t\tmergeStyles(dom, tableElm, stylesToMerge);\n
\t\t\t\t\t\tdom.setAttribs(tableElm, {\n
\t\t\t\t\t\t\t\'data-mce-border-color\': data.borderColor,\n
\t\t\t\t\t\t\t\'data-mce-cell-padding\': data.cellpadding,\n
\t\t\t\t\t\t\t\'data-mce-border\': data.border\n
\t\t\t\t\t\t});\n
\t\t\t\t\t\tif (tableElm.children) {\n
\t\t\t\t\t\t\tfor (var i = 0; i < tableElm.children.length; i++) {\n
\t\t\t\t\t\t\t\tstyleTDTH(tableElm.children[i], \'border\', data.border);\n
\t\t\t\t\t\t\t\tstyleTDTH(tableElm.children[i], \'padding\', addSizeSuffix(data.cellpadding));\n
\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t}\n
\t\t\t\t\t} else {\n
\t\t\t\t\t\teditor.dom.setAttribs(tableElm, {\n
\t\t\t\t\t\t\tborder: data.border,\n
\t\t\t\t\t\t\tcellpadding: data.cellpadding,\n
\t\t\t\t\t\t\tcellspacing: data.cellspacing\n
\t\t\t\t\t\t});\n
\t\t\t\t\t}\n
\n
\t\t\t\t\tif (dom.getAttrib(tableElm, \'width\') && !editor.settings.table_style_by_css) {\n
\t\t\t\t\t\tdom.setAttrib(tableElm, \'width\', removePxSuffix(data.width));\n
\t\t\t\t\t} else {\n
\t\t\t\t\t\tdom.setStyle(tableElm, \'width\', addSizeSuffix(data.width));\n
\t\t\t\t\t}\n
\n
\t\t\t\t\tdom.setStyle(tableElm, \'height\', addSizeSuffix(data.height));\n
\n
\t\t\t\t\t// Toggle caption on/off\n
\t\t\t\t\tcaptionElm = dom.select(\'caption\', tableElm)[0];\n
\n
\t\t\t\t\tif (captionElm && !data.caption) {\n
\t\t\t\t\t\tdom.remove(captionElm);\n
\t\t\t\t\t}\n
\n
\t\t\t\t\tif (!captionElm && data.caption) {\n
\t\t\t\t\t\tcaptionElm = dom.create(\'caption\');\n
\t\t\t\t\t\tcaptionElm.innerHTML = !Env.ie ? \'<br data-mce-bogus="1"/>\' : \'\\u00a0\';\n
\t\t\t\t\t\ttableElm.insertBefore(captionElm, tableElm.firstChild);\n
\t\t\t\t\t}\n
\t\t\t\t\tunApplyAlign(tableElm);\n
\t\t\t\t\tif (data.align) {\n
\t\t\t\t\t\teditor.formatter.apply(\'align\' + data.align, {}, tableElm);\n
\t\t\t\t\t}\n
\n
\t\t\t\t\teditor.focus();\n
\t\t\t\t\teditor.addVisual();\n
\t\t\t\t});\n
\t\t\t}\n
\n
\t\t\tfunction getTDTHOverallStyle(elm, name) {\n
\t\t\t\tvar cells = editor.dom.select("td,th", elm), firstChildStyle;\n
\n
\t\t\t\tfunction checkChildren(firstChildStyle, elms) {\n
\n
\t\t\t\t\tfor (var i = 0; i < elms.length; i++) {\n
\t\t\t\t\t\tvar currentStyle = dom.getStyle(elms[i], name);\n
\t\t\t\t\t\tif (typeof firstChildStyle === "undefined") {\n
\t\t\t\t\t\t\tfirstChildStyle = currentStyle;\n
\t\t\t\t\t\t}\n
\t\t\t\t\t\tif (firstChildStyle != currentStyle) {\n
\t\t\t\t\t\t\treturn "";\n
\t\t\t\t\t\t}\n
\t\t\t\t\t}\n
\n
\t\t\t\t\treturn firstChildStyle;\n
\n
\t\t\t\t}\n
\n
\t\t\t\tfirstChildStyle = checkChildren(firstChildStyle, cells);\n
\n
\t\t\t\treturn firstChildStyle;\n
\t\t\t}\n
\n
\t\t\tif (isProps === true) {\n
\t\t\t\ttableElm = dom.getParent(editor.selection.getStart(), \'table\');\n
\n
\t\t\t\tif (tableElm) {\n
\t\t\t\t\tdata = {\n
\t\t\t\t\t\twidth: removePxSuffix(dom.getStyle(tableElm, \'width\') || dom.getAttrib(tableElm, \'width\')),\n
\t\t\t\t\t\theight: removePxSuffix(dom.getStyle(tableElm, \'height\') || dom.getAttrib(tableElm, \'height\')),\n
\t\t\t\t\t\tcellspacing: removePxSuffix(dom.getStyle(tableElm, \'border-spacing\') ||\n
\t\t\t\t\t\t\tdom.getAttrib(tableElm, \'cellspacing\')),\n
\t\t\t\t\t\tcellpadding: dom.getAttrib(tableElm, \'data-mce-cell-padding\') || dom.getAttrib(tableElm, \'cellpadding\') ||\n
\t\t\t\t\t\t\tgetTDTHOverallStyle(tableElm, \'padding\'),\n
\t\t\t\t\t\tborder: dom.getAttrib(tableElm, \'data-mce-border\') || dom.getAttrib(tableElm, \'border\') ||\n
\t\t\t\t\t\t\tgetTDTHOverallStyle(tableElm, \'border\'),\n
\t\t\t\t\t\tborderColor: dom.getAttrib(tableElm, \'data-mce-border-color\'),\n
\t\t\t\t\t\tcaption: !!dom.select(\'caption\', tableElm)[0],\n
\t\t\t\t\t\t\'class\': dom.getAttrib(tableElm, \'class\')\n
\t\t\t\t\t};\n
\n
\t\t\t\t\teach(\'left center right\'.split(\' \'), function(name) {\n
\t\t\t\t\t\tif (editor.formatter.matchNode(tableElm, \'align\' + name)) {\n
\t\t\t\t\t\t\tdata.align = name;\n
\t\t\t\t\t\t}\n
\t\t\t\t\t});\n
\t\t\t\t}\n
\t\t\t} else {\n
\t\t\t\tcolsCtrl = {label: \'Cols\', name: \'cols\'};\n
\t\t\t\trowsCtrl = {label: \'Rows\', name: \'rows\'};\n
\t\t\t}\n
\n
\t\t\tif (editor.settings.table_class_list) {\n
\t\t\t\tif (data["class"]) {\n
\t\t\t\t\tdata["class"] = data["class"].replace(/\\s*mce\\-item\\-table\\s*/g, \'\');\n
\t\t\t\t}\n
\n
\t\t\t\tclassListCtrl = {\n
\t\t\t\t\tname: \'class\',\n
\t\t\t\t\ttype: \'listbox\',\n
\t\t\t\t\tlabel: \'Class\',\n
\t\t\t\t\tvalues: buildListItems(\n
\t\t\t\t\t\teditor.settings.table_class_list,\n
\t\t\t\t\t\tfunction(item) {\n
\t\t\t\t\t\t\tif (item.value) {\n
\t\t\t\t\t\t\t\titem.textStyle = function() {\n
\t\t\t\t\t\t\t\t\treturn editor.formatter.getCssText({block: \'table\', classes: [item.value]});\n
\t\t\t\t\t\t\t\t};\n
\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t}\n
\t\t\t\t\t)\n
\t\t\t\t};\n
\t\t\t}\n
\n
\t\t\tgeneralTableForm = {\n
\t\t\t\ttype: \'form\',\n
\t\t\t\tlayout: \'flex\',\n
\t\t\t\tdirection: \'column\',\n
\t\t\t\tlabelGapCalc: \'children\',\n
\t\t\t\tpadding: 0,\n
\t\t\t\titems: [\n
\t\t\t\t\t{\n
\t\t\t\t\t\ttype: \'form\',\n
\t\t\t\t\t\tlabelGapCalc: false,\n
\t\t\t\t\t\tpadding: 0,\n
\t\t\t\t\t\tlayout: \'grid\',\n
\t\t\t\t\t\tcolumns: 2,\n
\t\t\t\t\t\tdefaults: {\n
\t\t\t\t\t\t\ttype: \'textbox\',\n
\t\t\t\t\t\t\tmaxWidth: 50\n
\t\t\t\t\t\t},\n
\t\t\t\t\t\titems: (editor.settings.table_appearance_options !== false) ? [\n
\t\t\t\t\t\t\tcolsCtrl,\n
\t\t\t\t\t\t\trowsCtrl,\n
\t\t\t\t\t\t\t{label: \'Width\', name: \'width\'},\n
\t\t\t\t\t\t\t{label: \'Height\', name: \'height\'},\n
\t\t\t\t\t\t\t{label: \'Cell spacing\', name: \'cellspacing\'},\n
\t\t\t\t\t\t\t{label: \'Cell padding\', name: \'cellpadding\'},\n
\t\t\t\t\t\t\t{label: \'Border\', name: \'border\'},\n
\t\t\t\t\t\t\t{label: \'Caption\', name: \'caption\', type: \'checkbox\'}\n
\t\t\t\t\t\t] : [\n
\t\t\t\t\t\t\tcolsCtrl,\n
\t\t\t\t\t\t\trowsCtrl,\n
\t\t\t\t\t\t\t{label: \'Width\', name: \'width\'},\n
\t\t\t\t\t\t\t{label: \'Height\', name: \'height\'}\n
\t\t\t\t\t\t]\n
\t\t\t\t\t},\n
\n
\t\t\t\t\t{\n
\t\t\t\t\t\tlabel: \'Alignment\',\n
\t\t\t\t\t\tname: \'align\',\n
\t\t\t\t\t\ttype: \'listbox\',\n
\t\t\t\t\t\ttext: \'None\',\n
\t\t\t\t\t\tvalues: [\n
\t\t\t\t\t\t\t{text: \'None\', value: \'\'},\n
\t\t\t\t\t\t\t{text: \'Left\', value: \'left\'},\n
\t\t\t\t\t\t\t{text: \'Center\', value: \'center\'},\n
\t\t\t\t\t\t\t{text: \'Right\', value: \'right\'}\n
\t\t\t\t\t\t]\n
\t\t\t\t\t},\n
\n
\t\t\t\t\tclassListCtrl\n
\t\t\t\t]\n
\t\t\t};\n
\n
\t\t\tif (editor.settings.table_advtab !== false) {\n
\t\t\t\tappendStylesToData(dom, data, tableElm);\n
\n
\t\t\t\teditor.windowManager.open({\n
\t\t\t\t\ttitle: "Table properties",\n
\t\t\t\t\tdata: data,\n
\t\t\t\t\tbodyType: \'tabpanel\',\n
\t\t\t\t\tbody: [\n
\t\t\t\t\t\t{\n
\t\t\t\t\t\t\ttitle: \'General\',\n
\t\t\t\t\t\t\ttype: \'form\',\n
\t\t\t\t\t\t\titems: generalTableForm\n
\t\t\t\t\t\t},\n
\t\t\t\t\t\tcreateStyleForm(dom)\n
\t\t\t\t\t],\n
\n
\t\t\t\t\tonsubmit: onSubmitTableForm\n
\t\t\t\t});\n
\t\t\t} else {\n
\t\t\t\teditor.windowManager.open({\n
\t\t\t\t\ttitle: "Table properties",\n
\t\t\t\t\tdata: data,\n
\t\t\t\t\tbody: generalTableForm,\n
\t\t\t\t\tonsubmit: onSubmitTableForm\n
\t\t\t\t});\n
\t\t\t}\n
\t\t};\n
\n
\t\tself.merge = function(grid, cell) {\n
\t\t\teditor.windowManager.open({\n
\t\t\t\ttitle: "Merge cells",\n
\t\t\t\tbody: [\n
\t\t\t\t\t{label: \'Cols\', name: \'cols\', type: \'textbox\', value: \'1\', size: 10},\n
\t\t\t\t\t{label: \'Rows\', name: \'rows\', type: \'textbox\', value: \'1\', size: 10}\n
\t\t\t\t],\n
\t\t\t\tonsubmit: function() {\n
\t\t\t\t\tvar data = this.toJSON();\n
\n
\t\t\t\t\teditor.undoManager.transact(function() {\n
\t\t\t\t\t\tgrid.merge(cell, data.cols, data.rows);\n
\t\t\t\t\t});\n
\t\t\t\t}\n
\t\t\t});\n
\t\t};\n
\n
\t\tself.cell = function() {\n
\t\t\tvar dom = editor.dom, cellElm, data, classListCtrl, cells = [];\n
\n
\t\t\tfunction onSubmitCellForm() {\n
\t\t\t\tupdateStyle(dom, this);\n
\t\t\t\tdata = Tools.extend(data, this.toJSON());\n
\n
\t\t\t\teditor.undoManager.transact(function() {\n
\t\t\t\t\teach(cells, function(cellElm) {\n
\t\t\t\t\t\teditor.dom.setAttribs(cellElm, {\n
\t\t\t\t\t\t\tscope: data.scope,\n
\t\t\t\t\t\t\tstyle: data.style,\n
\t\t\t\t\t\t\t\'class\': data[\'class\']\n
\t\t\t\t\t\t});\n
\n
\t\t\t\t\t\teditor.dom.setStyles(cellElm, {\n
\t\t\t\t\t\t\twidth: addSizeSuffix(data.width),\n
\t\t\t\t\t\t\theight: addSizeSuffix(data.height)\n
\t\t\t\t\t\t});\n
\n
\t\t\t\t\t\t// Switch cell type\n
\t\t\t\t\t\tif (data.type && cellElm.nodeName.toLowerCase() != data.type) {\n
\t\t\t\t\t\t\tcellElm = dom.rename(cellElm, data.type);\n
\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\t// Apply/remove alignment\n
\t\t\t\t\t\tunApplyAlign(cellElm);\n
\t\t\t\t\t\tif (data.align) {\n
\t\t\t\t\t\t\teditor.formatter.apply(\'align\' + data.align, {}, cellElm);\n
\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\t// Apply/remove vertical alignment\n
\t\t\t\t\t\tunApplyVAlign(cellElm);\n
\t\t\t\t\t\tif (data.valign) {\n
\t\t\t\t\t\t\teditor.formatter.apply(\'valign\' + data.valign, {}, cellElm);\n
\t\t\t\t\t\t}\n
\t\t\t\t\t});\n
\n
\t\t\t\t\teditor.focus();\n
\t\t\t\t});\n
\t\t\t}\n
\n
\t\t\t// Get selected cells or the current cell\n
\t\t\tcells = editor.dom.select(\'td.mce-item-selected,th.mce-item-selected\');\n
\t\t\tcellElm = editor.dom.getParent(editor.selection.getStart(), \'td,th\');\n
\t\t\tif (!cells.length && cellElm) {\n
\t\t\t\tcells.push(cellElm);\n
\t\t\t}\n
\n
\t\t\tcellElm = cellElm || cells[0];\n
\n
\t\t\tif (!cellElm) {\n
\t\t\t\t// If this element is null, return now to avoid crashing.\n
\t\t\t\treturn;\n
\t\t\t}\n
\n
\t\t\tdata = {\n
\t\t\t\twidth: removePxSuffix(dom.getStyle(cellElm, \'width\') || dom.getAttrib(cellElm, \'width\')),\n
\t\t\t\theight: removePxSuffix(dom.getStyle(cellElm, \'height\') || dom.getAttrib(cellElm, \'height\')),\n
\t\t\t\tscope: dom.getAttrib(cellElm, \'scope\'),\n
\t\t\t\t\'class\': dom.getAttrib(cellElm, \'class\')\n
\t\t\t};\n
\n
\t\t\tdata.type = cellElm.nodeName.toLowerCase();\n
\n
\t\t\teach(\'left center right\'.split(\' \'), function(name) {\n
\t\t\t\tif (editor.formatter.matchNode(cellElm, \'align\' + name)) {\n
\t\t\t\t\tdata.align = name;\n
\t\t\t\t}\n
\t\t\t});\n
\n
\t\t\teach(\'top middle bottom\'.split(\' \'), function(name) {\n
\t\t\t\tif (editor.formatter.matchNode(cellElm, \'valign\' + name)) {\n
\t\t\t\t\tdata.valign = name;\n
\t\t\t\t}\n
\t\t\t});\n
\n
\t\t\tif (editor.settings.table_cell_class_list) {\n
\t\t\t\tclassListCtrl = {\n
\t\t\t\t\tname: \'class\',\n
\t\t\t\t\ttype: \'listbox\',\n
\t\t\t\t\tlabel: \'Class\',\n
\t\t\t\t\tvalues: buildListItems(\n
\t\t\t\t\t\teditor.settings.table_cell_class_list,\n
\t\t\t\t\t\tfunction(item) {\n
\t\t\t\t\t\t\tif (item.value) {\n
\t\t\t\t\t\t\t\titem.textStyle = function() {\n
\t\t\t\t\t\t\t\t\treturn editor.formatter.getCssText({block: \'td\', classes: [item.value]});\n
\t\t\t\t\t\t\t\t};\n
\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t}\n
\t\t\t\t\t)\n
\t\t\t\t};\n
\t\t\t}\n
\n
\t\t\tvar generalCellForm = {\n
\t\t\t\ttype: \'form\',\n
\t\t\t\tlayout: \'flex\',\n
\t\t\t\tdirection: \'column\',\n
\t\t\t\tlabelGapCalc: \'children\',\n
\t\t\t\tpadding: 0,\n
\t\t\t\titems: [\n
\t\t\t\t\t{\n
\t\t\t\t\t\ttype: \'form\',\n
\t\t\t\t\t\tlayout: \'grid\',\n
\t\t\t\t\t\tcolumns: 2,\n
\t\t\t\t\t\tlabelGapCalc: false,\n
\t\t\t\t\t\tpadding: 0,\n
\t\t\t\t\t\tdefaults: {\n
\t\t\t\t\t\t\ttype: \'textbox\',\n
\t\t\t\t\t\t\tmaxWidth: 50\n
\t\t\t\t\t\t},\n
\t\t\t\t\t\titems: [\n
\t\t\t\t\t\t\t{label: \'Width\', name: \'width\'},\n
\t\t\t\t\t\t\t{label: \'Height\', name: \'height\'},\n
\t\t\t\t\t\t\t{\n
\t\t\t\t\t\t\t\tlabel: \'Cell type\',\n
\t\t\t\t\t\t\t\tname: \'type\',\n
\t\t\t\t\t\t\t\ttype: \'listbox\',\n
\t\t\t\t\t\t\t\ttext: \'None\',\n
\t\t\t\t\t\t\t\tminWidth: 90,\n
\t\t\t\t\t\t\t\tmaxWidth: null,\n
\t\t\t\t\t\t\t\tvalues: [\n
\t\t\t\t\t\t\t\t\t{text: \'Cell\', value: \'td\'},\n
\t\t\t\t\t\t\t\t\t{text: \'Header cell\', value: \'th\'}\n
\t\t\t\t\t\t\t\t]\n
\t\t\t\t\t\t\t},\n
\t\t\t\t\t\t\t{\n
\t\t\t\t\t\t\t\tlabel: \'Scope\',\n
\t\t\t\t\t\t\t\tname: \'scope\',\n
\t\t\t\t\t\t\t\ttype: \'listbox\',\n
\t\t\t\t\t\t\t\ttext: \'None\',\n
\t\t\t\t\t\t\t\tminWidth: 90,\n
\t\t\t\t\t\t\t\tmaxWidth: null,\n
\t\t\t\t\t\t\t\tvalues: [\n
\t\t\t\t\t\t\t\t\t{text: \'None\', value: \'\'},\n
\t\t\t\t\t\t\t\t\t{text: \'Row\', value: \'row\'},\n
\t\t\t\t\t\t\t\t\t{text: \'Column\', value: \'col\'},\n
\t\t\t\t\t\t\t\t\t{text: \'Row group\', value: \'rowgroup\'},\n
\t\t\t\t\t\t\t\t\t{text: \'Column group\', value: \'colgroup\'}\n
\t\t\t\t\t\t\t\t]\n
\t\t\t\t\t\t\t},\n
\t\t\t\t\t\t\t{\n
\t\t\t\t\t\t\t\tlabel: \'H Align\',\n
\t\t\t\t\t\t\t\tname: \'align\',\n
\t\t\t\t\t\t\t\ttype: \'listbox\',\n
\t\t\t\t\t\t\t\ttext: \'None\',\n
\t\t\t\t\t\t\t\tminWidth: 90,\n
\t\t\t\t\t\t\t\tmaxWidth: null,\n
\t\t\t\t\t\t\t\tvalues: [\n
\t\t\t\t\t\t\t\t\t{text: \'None\', value: \'\'},\n
\t\t\t\t\t\t\t\t\t{text: \'Left\', value: \'left\'},\n
\t\t\t\t\t\t\t\t\t{text: \'Center\', value: \'center\'},\n
\t\t\t\t\t\t\t\t\t{text: \'Right\', value: \'right\'}\n
\t\t\t\t\t\t\t\t]\n
\t\t\t\t\t\t\t},\n
\t\t\t\t\t\t\t{\n
\t\t\t\t\t\t\t\tlabel: \'V Align\',\n
\t\t\t\t\t\t\t\tname: \'valign\',\n
\t\t\t\t\t\t\t\ttype: \'listbox\',\n
\t\t\t\t\t\t\t\ttext: \'None\',\n
\t\t\t\t\t\t\t\tminWidth: 90,\n
\t\t\t\t\t\t\t\tmaxWidth: null,\n
\t\t\t\t\t\t\t\tvalues: [\n
\t\t\t\t\t\t\t\t\t{text: \'None\', value: \'\'},\n
\t\t\t\t\t\t\t\t\t{text: \'Top\', value: \'top\'},\n
\t\t\t\t\t\t\t\t\t{text: \'Middle\', value: \'middle\'},\n
\t\t\t\t\t\t\t\t\t{text: \'Bottom\', value: \'bottom\'}\n
\t\t\t\t\t\t\t\t]\n
\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t]\n
\t\t\t\t\t},\n
\n
\t\t\t\t\tclassListCtrl\n
\t\t\t\t]\n
\t\t\t};\n
\n
\t\t\tif (editor.settings.table_cell_advtab !== false) {\n
\t\t\t\tappendStylesToData(dom, data, cellElm);\n
\n
\t\t\t\teditor.windowManager.open({\n
\t\t\t\t\ttitle: "Cell properties",\n
\t\t\t\t\tbodyType: \'tabpanel\',\n
\t\t\t\t\tdata: data,\n
\t\t\t\t\tbody: [\n
\t\t\t\t\t\t{\n
\t\t\t\t\t\t\ttitle: \'General\',\n
\t\t\t\t\t\t\ttype: \'form\',\n
\t\t\t\t\t\t\titems: generalCellForm\n
\t\t\t\t\t\t},\n
\n
\t\t\t\t\t\tcreateStyleForm(dom)\n
\t\t\t\t\t],\n
\n
\t\t\t\t\tonsubmit: onSubmitCellForm\n
\t\t\t\t});\n
\t\t\t} else {\n
\t\t\t\teditor.windowManager.open({\n
\t\t\t\t\ttitle: "Cell properties",\n
\t\t\t\t\tdata: data,\n
\t\t\t\t\tbody: generalCellForm,\n
\t\t\t\t\tonsubmit: onSubmitCellForm\n
\t\t\t\t});\n
\t\t\t}\n
\t\t};\n
\n
\t\tself.row = function() {\n
\t\t\tvar dom = editor.dom, tableElm, cellElm, rowElm, classListCtrl, data, rows = [], generalRowForm;\n
\n
\t\t\tfunction onSubmitRowForm() {\n
\t\t\t\tvar tableElm, oldParentElm, parentElm;\n
\n
\t\t\t\tupdateStyle(dom, this);\n
\t\t\t\tdata = Tools.extend(data, this.toJSON());\n
\n
\t\t\t\teditor.undoManager.transact(function() {\n
\t\t\t\t\tvar toType = data.type;\n
\n
\t\t\t\t\teach(rows, function(rowElm) {\n
\t\t\t\t\t\teditor.dom.setAttribs(rowElm, {\n
\t\t\t\t\t\t\tscope: data.scope,\n
\t\t\t\t\t\t\tstyle: data.style,\n
\t\t\t\t\t\t\t\'class\': data[\'class\']\n
\t\t\t\t\t\t});\n
\n
\t\t\t\t\t\teditor.dom.setStyles(rowElm, {\n
\t\t\t\t\t\t\theight: addSizeSuffix(data.height)\n
\t\t\t\t\t\t});\n
\n
\t\t\t\t\t\tif (toType != rowElm.parentNode.nodeName.toLowerCase()) {\n
\t\t\t\t\t\t\ttableElm = dom.getParent(rowElm, \'table\');\n
\n
\t\t\t\t\t\t\toldParentElm = rowElm.parentNode;\n
\t\t\t\t\t\t\tparentElm = dom.select(toType, tableElm)[0];\n
\t\t\t\t\t\t\tif (!parentElm) {\n
\t\t\t\t\t\t\t\tparentElm = dom.create(toType);\n
\t\t\t\t\t\t\t\tif (tableElm.firstChild) {\n
\t\t\t\t\t\t\t\t\ttableElm.insertBefore(parentElm, tableElm.firstChild);\n
\t\t\t\t\t\t\t\t} else {\n
\t\t\t\t\t\t\t\t\ttableElm.appendChild(parentElm);\n
\t\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\t\tparentElm.appendChild(rowElm);\n
\n
\t\t\t\t\t\t\tif (!oldParentElm.hasChildNodes()) {\n
\t\t\t\t\t\t\t\tdom.remove(oldParentElm);\n
\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\t// Apply/remove alignment\n
\t\t\t\t\t\tunApplyAlign(rowElm);\n
\t\t\t\t\t\tif (data.align) {\n
\t\t\t\t\t\t\teditor.formatter.apply(\'align\' + data.align, {}, rowElm);\n
\t\t\t\t\t\t}\n
\t\t\t\t\t});\n
\n
\t\t\t\t\teditor.focus();\n
\t\t\t\t});\n
\t\t\t}\n
\n
\t\t\ttableElm = editor.dom.getParent(editor.selection.getStart(), \'table\');\n
\t\t\tcellElm = editor.dom.getParent(editor.selection.getStart(), \'td,th\');\n
\n
\t\t\teach(tableElm.rows, function(row) {\n
\t\t\t\teach(row.cells, function(cell) {\n
\t\t\t\t\tif (dom.hasClass(cell, \'mce-item-selected\') || cell == cellElm) {\n
\t\t\t\t\t\trows.push(row);\n
\t\t\t\t\t\treturn false;\n
\t\t\t\t\t}\n
\t\t\t\t});\n
\t\t\t});\n
\n
\t\t\trowElm = rows[0];\n
\t\t\tif (!rowElm) {\n
\t\t\t\t// If this element is null, return now to avoid crashing.\n
\t\t\t\treturn;\n
\t\t\t}\n
\n
\t\t\tdata = {\n
\t\t\t\theight: removePxSuffix(dom.getStyle(rowElm, \'height\') || dom.getAttrib(rowElm, \'height\')),\n
\t\t\t\tscope: dom.getAttrib(rowElm, \'scope\'),\n
\t\t\t\t\'class\': dom.getAttrib(rowElm, \'class\')\n
\t\t\t};\n
\n
\t\t\tdata.type = rowElm.parentNode.nodeName.toLowerCase();\n
\n
\t\t\teach(\'left center right\'.split(\' \'), function(name) {\n
\t\t\t\tif (editor.formatter.matchNode(rowElm, \'align\' + name)) {\n
\t\t\t\t\tdata.align = name;\n
\t\t\t\t}\n
\t\t\t});\n
\n
\t\t\tif (editor.settings.table_row_class_list) {\n
\t\t\t\tclassListCtrl = {\n
\t\t\t\t\tname: \'class\',\n
\t\t\t\t\ttype: \'listbox\',\n
\t\t\t\t\tlabel: \'Class\',\n
\t\t\t\t\tvalues: buildListItems(\n
\t\t\t\t\t\teditor.settings.table_row_class_list,\n
\t\t\t\t\t\tfunction(item) {\n
\t\t\t\t\t\t\tif (item.value) {\n
\t\t\t\t\t\t\t\titem.textStyle = function() {\n
\t\t\t\t\t\t\t\t\treturn editor.formatter.getCssText({block: \'tr\', classes: [item.value]});\n
\t\t\t\t\t\t\t\t};\n
\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t}\n
\t\t\t\t\t)\n
\t\t\t\t};\n
\t\t\t}\n
\n
\t\t\tgeneralRowForm = {\n
\t\t\t\ttype: \'form\',\n
\t\t\t\tcolumns: 2,\n
\t\t\t\tpadding: 0,\n
\t\t\t\tdefaults: {\n
\t\t\t\t\ttype: \'textbox\'\n
\t\t\t\t},\n
\t\t\t\titems: [\n
\t\t\t\t\t{\n
\t\t\t\t\t\ttype: \'listbox\',\n
\t\t\t\t\t\tname: \'type\',\n
\t\t\t\t\t\tlabel: \'Row type\',\n
\t\t\t\t\t\ttext: \'None\',\n
\t\t\t\t\t\tmaxWidth: null,\n
\t\t\t\t\t\tvalues: [\n
\t\t\t\t\t\t\t{text: \'Header\', value: \'thead\'},\n
\t\t\t\t\t\t\t{text: \'Body\', value: \'tbody\'},\n
\t\t\t\t\t\t\t{text: \'Footer\', value: \'tfoot\'}\n
\t\t\t\t\t\t]\n
\t\t\t\t\t},\n
\t\t\t\t\t{\n
\t\t\t\t\t\ttype: \'listbox\',\n
\t\t\t\t\t\tname: \'align\',\n
\t\t\t\t\t\tlabel: \'Alignment\',\n
\t\t\t\t\t\ttext: \'None\',\n
\t\t\t\t\t\tmaxWidth: null,\n
\t\t\t\t\t\tvalues: [\n
\t\t\t\t\t\t\t{text: \'None\', value: \'\'},\n
\t\t\t\t\t\t\t{text: \'Left\', value: \'left\'},\n
\t\t\t\t\t\t\t{text: \'Center\', value: \'center\'},\n
\t\t\t\t\t\t\t{text: \'Right\', value: \'right\'}\n
\t\t\t\t\t\t]\n
\t\t\t\t\t},\n
\t\t\t\t\t{label: \'Height\', name: \'height\'},\n
\t\t\t\t\tclassListCtrl\n
\t\t\t\t]\n
\t\t\t};\n
\n
\t\t\tif (editor.settings.table_row_advtab !== false) {\n
\t\t\t\tappendStylesToData(dom, data, rowElm);\n
\n
\t\t\t\teditor.windowManager.open({\n
\t\t\t\t\ttitle: "Row properties",\n
\t\t\t\t\tdata: data,\n
\t\t\t\t\tbodyType: \'tabpanel\',\n
\t\t\t\t\tbody: [\n
\t\t\t\t\t\t{\n
\t\t\t\t\t\t\ttitle: \'General\',\n
\t\t\t\t\t\t\ttype: \'form\',\n
\t\t\t\t\t\t\titems: generalRowForm\n
\t\t\t\t\t\t},\n
\t\t\t\t\t\tcreateStyleForm(dom)\n
\t\t\t\t\t],\n
\n
\t\t\t\t\tonsubmit: onSubmitRowForm\n
\t\t\t\t});\n
\t\t\t} else {\n
\t\t\t\teditor.windowManager.open({\n
\t\t\t\t\ttitle: "Row properties",\n
\t\t\t\t\tdata: data,\n
\t\t\t\t\tbody: generalRowForm,\n
\t\t\t\t\tonsubmit: onSubmitRowForm\n
\t\t\t\t});\n
\t\t\t}\n
\t\t};\n
\t};\n
});\n
\n
// Included from: js/tinymce/plugins/table/classes/Plugin.js\n
\n
/**\n
 * Plugin.js\n
 *\n
 * Released under LGPL License.\n
 * Copyright (c) 1999-2015 Ephox Corp. All rights reserved\n
 *\n
 * License: http://www.tinymce.com/license\n
 * Contributing: http://www.tinymce.com/contributing\n
 */\n
\n
/**\n
 * This class contains all core logic for the table plugin.\n
 *\n
 * @class tinymce.tableplugin.Plugin\n
 * @private\n
 */\n
define("tinymce/tableplugin/Plugin", [\n
\t"tinymce/tableplugin/TableGrid",\n
\t"tinymce/tableplugin/Quirks",\n
\t"tinymce/tableplugin/CellSelection",\n
\t"tinymce/tableplugin/Dialogs",\n
\t"tinymce/util/Tools",\n
\t"tinymce/dom/TreeWalker",\n
\t"tinymce/Env",\n
\t"tinymce/PluginManager"\n
], function(TableGrid, Quirks, CellSelection, Dialogs, Tools, TreeWalker, Env, PluginManager) {\n
\tvar each = Tools.each;\n
\n
\tfunction Plugin(editor) {\n
\t\tvar clipboardRows, self = this, dialogs = new Dialogs(editor);\n
\n
\t\tfunction cmd(command) {\n
\t\t\treturn function() {\n
\t\t\t\teditor.execCommand(command);\n
\t\t\t};\n
\t\t}\n
\n
\t\tfunction insertTable(cols, rows) {\n
\t\t\tvar y, x, html, tableElm;\n
\n
\t\t\thtml = \'<table id="__mce"><tbody>\';\n
\n
\t\t\tfor (y = 0; y < rows; y++) {\n
\t\t\t\thtml += \'<tr>\';\n
\n
\t\t\t\tfor (x = 0; x < cols; x++) {\n
\t\t\t\t\thtml += \'<td>\' + (Env.ie ? " " : \'<br>\') + \'</td>\';\n
\t\t\t\t}\n
\n
\t\t\t\thtml += \'</tr>\';\n
\t\t\t}\n
\n
\t\t\thtml += \'</tbody></table>\';\n
\n
\t\t\teditor.undoManager.transact(function() {\n
\t\t\t\teditor.insertContent(html);\n
\n
\t\t\t\ttableElm = editor.dom.get(\'__mce\');\n
\t\t\t\teditor.dom.setAttrib(tableElm, \'id\', null);\n
\n
\t\t\t\teditor.dom.setAttribs(tableElm, editor.settings.table_default_attributes || {});\n
\t\t\t\teditor.dom.setStyles(tableElm, editor.settings.table_default_styles || {});\n
\t\t\t});\n
\n
\t\t\treturn tableElm;\n
\t\t}\n
\n
\t\tfunction handleDisabledState(ctrl, selector) {\n
\t\t\tfunction bindStateListener() {\n
\t\t\t\tctrl.disabled(!editor.dom.getParent(editor.selection.getStart(), selector));\n
\n
\t\t\t\teditor.selection.selectorChanged(selector, function(state) {\n
\t\t\t\t\tctrl.disabled(!state);\n
\t\t\t\t});\n
\t\t\t}\n
\n
\t\t\tif (editor.initialized) {\n
\t\t\t\tbindStateListener();\n
\t\t\t} else {\n
\t\t\t\teditor.on(\'init\', bindStateListener);\n
\t\t\t}\n
\t\t}\n
\n
\t\tfunction postRender() {\n
\t\t\t/*jshint validthis:true*/\n
\t\t\thandleDisabledState(this, \'table\');\n
\t\t}\n
\n
\t\tfunction postRenderCell() {\n
\t\t\t/*jshint validthis:true*/\n
\t\t\thandleDisabledState(this, \'td,th\');\n
\t\t}\n
\n
\t\tfunction generateTableGrid() {\n
\t\t\tvar html = \'\';\n
\n
\t\t\thtml = \'<table role="grid" class="mce-grid mce-grid-border" aria-readonly="true">\';\n
\n
\t\t\tfor (var y = 0; y < 10; y++) {\n
\t\t\t\thtml += \'<tr>\';\n
\n
\t\t\t\tfor (var x = 0; x < 10; x++) {\n
\t\t\t\t\thtml += \'<td role="gridcell" tabindex="-1"><a id="mcegrid\' + (y * 10 + x) + \'" href="#" \' +\n
\t\t\t\t\t\t\'data-mce-x="\' + x + \'" data-mce-y="\' + y + \'"></a></td>\';\n
\t\t\t\t}\n
\n
\t\t\t\thtml += \'</tr>\';\n
\t\t\t}\n
\n
\t\t\thtml += \'</table>\';\n
\n
\t\t\thtml += \'<div class="mce-text-center" role="presentation">1 x 1</div>\';\n
\n
\t\t\treturn html;\n
\t\t}\n
\n
\t\tfunction selectGrid(tx, ty, control) {\n
\t\t\tvar table = control.getEl().getElementsByTagName(\'table\')[0];\n
\t\t\tvar x, y, focusCell, cell, active;\n
\t\t\tvar rtl = control.isRtl() || control.parent().rel == \'tl-tr\';\n
\n
\t\t\ttable.nextSibling.innerHTML = (tx + 1) + \' x \' + (ty + 1);\n
\n
\t\t\tif (rtl) {\n
\t\t\t\ttx = 9 - tx;\n
\t\t\t}\n
\n
\t\t\tfor (y = 0; y < 10; y++) {\n
\t\t\t\tfor (x = 0; x < 10; x++) {\n
\t\t\t\t\tcell = table.rows[y].childNodes[x].firstChild;\n
\t\t\t\t\tactive = (rtl ? x >= tx : x <= tx) && y <= ty;\n
\n
\t\t\t\t\teditor.dom.toggleClass(cell, \'mce-active\', active);\n
\n
\t\t\t\t\tif (active) {\n
\t\t\t\t\t\tfocusCell = cell;\n
\t\t\t\t\t}\n
\t\t\t\t}\n
\t\t\t}\n
\n
\t\t\treturn focusCell.parentNode;\n
\t\t}\n
\n
\t\tif (editor.settings.table_grid === false) {\n
\t\t\teditor.addMenuItem(\'inserttable\', {\n
\t\t\t\ttext: \'Insert table\',\n
\t\t\t\ticon: \'table\',\n
\t\t\t\tcontext: \'table\',\n
\t\t\t\tonclick: dialogs.table\n
\t\t\t});\n
\t\t} else {\n
\t\t\teditor.addMenuItem(\'inserttable\', {\n
\t\t\t\ttext: \'Insert table\',\n
\t\t\t\ticon: \'table\',\n
\t\t\t\tcontext: \'table\',\n
\t\t\t\tariaHideMenu: true,\n
\t\t\t\tonclick: function(e) {\n
\t\t\t\t\tif (e.aria) {\n
\t\t\t\t\t\tthis.parent().hideAll();\n
\t\t\t\t\t\te.stopImmediatePropagation();\n
\t\t\t\t\t\tdialogs.table();\n
\t\t\t\t\t}\n
\t\t\t\t},\n
\t\t\t\tonshow: function() {\n
\t\t\t\t\tselectGrid(0, 0, this.menu.items()[0]);\n
\t\t\t\t},\n
\t\t\t\tonhide: function() {\n
\t\t\t\t\tvar elements = this.menu.items()[0].getEl().getElementsByTagName(\'a\');\n
\t\t\t\t\teditor.dom.removeClass(elements, \'mce-active\');\n
\t\t\t\t\teditor.dom.addClass(elements[0], \'mce-active\');\n
\t\t\t\t},\n
\t\t\t\tmenu: [\n
\t\t\t\t\t{\n
\t\t\t\t\t\ttype: \'container\',\n
\t\t\t\t\t\thtml: generateTableGrid(),\n
\n
\t\t\t\t\t\tonPostRender: function() {\n
\t\t\t\t\t\t\tthis.lastX = this.lastY = 0;\n
\t\t\t\t\t\t},\n
\n
\t\t\t\t\t\tonmousemove: function(e) {\n
\t\t\t\t\t\t\tvar target = e.target, x, y;\n
\n
\t\t\t\t\t\t\tif (target.tagName.toUpperCase() == \'A\') {\n
\t\t\t\t\t\t\t\tx = parseInt(target.getAttribute(\'data-mce-x\'), 10);\n
\t\t\t\t\t\t\t\ty = parseInt(target.getAttribute(\'data-mce-y\'), 10);\n
\n
\t\t\t\t\t\t\t\tif (this.isRtl() || this.parent().rel == \'tl-tr\') {\n
\t\t\t\t\t\t\t\t\tx = 9 - x;\n
\t\t\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\t\t\tif (x !== this.lastX || y !== this.lastY) {\n
\t\t\t\t\t\t\t\t\tselectGrid(x, y, e.control);\n
\n
\t\t\t\t\t\t\t\t\tthis.lastX = x;\n
\t\t\t\t\t\t\t\t\tthis.lastY = y;\n
\t\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t},\n
\n
\t\t\t\t\t\tonclick: function(e) {\n
\t\t\t\t\t\t\tvar self = this;\n
\n
\t\t\t\t\t\t\tif (e.target.tagName.toUpperCase() == \'A\') {\n
\t\t\t\t\t\t\t\te.preventDefault();\n
\t\t\t\t\t\t\t\te.stopPropagation();\n
\t\t\t\t\t\t\t\tself.parent().cancel();\n
\n
\t\t\t\t\t\t\t\teditor.undoManager.transact(function() {\n
\t\t\t\t\t\t\t\t\tinsertTable(self.lastX + 1, self.lastY + 1);\n
\t\t\t\t\t\t\t\t});\n
\n
\t\t\t\t\t\t\t\teditor.addVisual();\n
\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t}\n
\t\t\t\t\t}\n
\t\t\t\t]\n
\t\t\t});\n
\t\t}\n
\n
\t\teditor.addMenuItem(\'tableprops\', {\n
\t\t\ttext: \'Table properties\',\n
\t\t\tcontext: \'table\',\n
\t\t\tonPostRender: postRender,\n
\t\t\tonclick: dialogs.tableProps\n
\t\t});\n
\n
\t\teditor.addMenuItem(\'deletetable\', {\n
\t\t\ttext: \'Delete table\',\n
\t\t\tcontext: \'table\',\n
\t\t\tonPostRender: postRender,\n
\t\t\tcmd: \'mceTableDelete\'\n
\t\t});\n
\n
\t\teditor.addMenuItem(\'cell\', {\n
\t\t\tseparator: \'before\',\n
\t\t\ttext: \'Cell\',\n
\t\t\tcontext: \'table\',\n
\t\t\tmenu: [\n
\t\t\t\t{text: \'Cell properties\', onclick: cmd(\'mceTableCellProps\'), onPostRender: postRenderCell},\n
\t\t\t\t{text: \'Merge cells\', onclick: cmd(\'mceTableMergeCells\'), onPostRender: postRenderCell},\n
\t\t\t\t{text: \'Split cell\', onclick: cmd(\'mceTableSplitCells\'), onPostRender: postRenderCell}\n
\t\t\t]\n
\t\t});\n
\n
\t\teditor.addMenuItem(\'row\', {\n
\t\t\ttext: \'Row\',\n
\t\t\tcontext: \'table\',\n
\t\t\tmenu: [\n
\t\t\t\t{text: \'Insert row before\', onclick: cmd(\'mceTableInsertRowBefore\'), onPostRender: postRenderCell},\n
\t\t\t\t{text: \'Insert row after\', onclick: cmd(\'mceTableInsertRowAfter\'), onPostRender: postRenderCell},\n
\t\t\t\t{text: \'Delete row\', onclick: cmd(\'mceTableDeleteRow\'), onPostRender: postRenderCell},\n
\t\t\t\t{text: \'Row properties\', onclick: cmd(\'mceTableRowProps\'), onPostRender: postRenderCell},\n
\t\t\t\t{text: \'-\'},\n
\t\t\t\t{text: \'Cut row\', onclick: cmd(\'mceTableCutRow\'), onPostRender: postRenderCell},\n
\t\t\t\t{text: \'Copy row\', onclick: cmd(\'mceTableCopyRow\'), onPostRender: postRenderCell},\n
\t\t\t\t{text: \'Paste row before\', onclick: cmd(\'mceTablePasteRowBefore\'), onPostRender: postRenderCell},\n
\t\t\t\t{text: \'Paste row after\', onclick: cmd(\'mceTablePasteRowAfter\'), onPostRender: postRenderCell}\n
\t\t\t]\n
\t\t});\n
\n
\t\teditor.addMenuItem(\'column\', {\n
\t\t\ttext: \'Column\',\n
\t\t\tcontext: \'table\',\n
\t\t\tmenu: [\n
\t\t\t\t{text: \'Insert column before\', onclick: cmd(\'mceTableInsertColBefore\'), onPostRender: postRenderCell},\n
\t\t\t\t{text: \'Insert column after\', onclick: cmd(\'mceTableInsertColAfter\'), onPostRender: postRenderCell},\n
\t\t\t\t{text: \'Delete column\', onclick: cmd(\'mceTableDeleteCol\'), onPostRender: postRenderCell}\n
\t\t\t]\n
\t\t});\n
\n
\t\tvar menuItems = [];\n
\t\teach("inserttable tableprops deletetable | cell row column".split(\' \'), function(name) {\n
\t\t\tif (name == \'|\') {\n
\t\t\t\tmenuItems.push({text: \'-\'});\n
\t\t\t} else {\n
\t\t\t\tmenuItems.push(editor.menuItems[name]);\n
\t\t\t}\n
\t\t});\n
\n
\t\teditor.addButton("table", {\n
\t\t\ttype: "menubutton",\n
\t\t\ttitle: "Table",\n
\t\t\tmenu: menuItems\n
\t\t});\n
\n
\t\t// Select whole table is a table border is clicked\n
\t\tif (!Env.isIE) {\n
\t\t\teditor.on(\'click\', function(e) {\n
\t\t\t\te = e.target;\n
\n
\t\t\t\tif (e.nodeName === \'TABLE\') {\n
\t\t\t\t\teditor.selection.select(e);\n
\t\t\t\t\teditor.nodeChanged();\n
\t\t\t\t}\n
\t\t\t});\n
\t\t}\n
\n
\t\tself.quirks = new Quirks(editor);\n
\n
\t\teditor.on(\'Init\', function() {\n
\t\t\tself.cellSelection = new CellSelection(editor);\n
\t\t});\n
\n
\t\teditor.on(\'PreInit\', function() {\n
\t\t\t// Remove internal data attributes\n
\t\t\teditor.serializer.addAttributeFilter(\n
\t\t\t\t\'data-mce-cell-padding,data-mce-border,data-mce-border-color\',\n
\t\t\t\tfunction(nodes, name) {\n
\n
\t\t\t\t\tvar i = nodes.length;\n
\n
\t\t\t\t\twhile (i--) {\n
\t\t\t\t\t\tnodes[i].attr(name, null);\n
\t\t\t\t\t}\n
\t\t\t\t});\n
\t\t});\n
\n
\t\t// Register action commands\n
\t\teach({\n
\t\t\tmceTableSplitCells: function(grid) {\n
\t\t\t\tgrid.split();\n
\t\t\t},\n
\n
\t\t\tmceTableMergeCells: function(grid) {\n
\t\t\t\tvar cell;\n
\n
\t\t\t\tcell = editor.dom.getParent(editor.selection.getStart(), \'th,td\');\n
\n
\t\t\t\tif (!editor.dom.select(\'td.mce-item-selected,th.mce-item-selected\').length) {\n
\t\t\t\t\tdialogs.merge(grid, cell);\n
\t\t\t\t} else {\n
\t\t\t\t\tgrid.merge();\n
\t\t\t\t}\n
\t\t\t},\n
\n
\t\t\tmceTableInsertRowBefore: function(grid) {\n
\t\t\t\tgrid.insertRow(true);\n
\t\t\t},\n
\n
\t\t\tmceTableInsertRowAfter: function(grid) {\n
\t\t\t\tgrid.insertRow();\n
\t\t\t},\n
\n
\t\t\tmceTableInsertColBefore: function(grid) {\n
\t\t\t\tgrid.insertCol(true);\n
\t\t\t},\n
\n
\t\t\tmceTableInsertColAfter: function(grid) {\n
\t\t\t\tgrid.insertCol();\n
\t\t\t},\n
\n
\t\t\tmceTableDeleteCol: function(grid) {\n
\t\t\t\tgrid.deleteCols();\n
\t\t\t},\n
\n
\t\t\tmceTableDeleteRow: function(grid) {\n
\t\t\t\tgrid.deleteRows();\n
\t\t\t},\n
\n
\t\t\tmceTableCutRow: function(grid) {\n
\t\t\t\tclipboardRows = grid.cutRows();\n
\t\t\t},\n
\n
\t\t\tmceTableCopyRow: function(grid) {\n
\t\t\t\tclipboardRows = grid.copyRows();\n
\t\t\t},\n
\n
\t\t\tmceTablePasteRowBefore: function(grid) {\n
\t\t\t\tgrid.pasteRows(clipboardRows, true);\n
\t\t\t},\n
\n
\t\t\tmceTablePasteRowAfter: function(grid) {\n
\t\t\t\tgrid.pasteRows(clipboardRows);\n
\t\t\t},\n
\n
\t\t\tmceTableDelete: function(grid) {\n
\t\t\t\tgrid.deleteTable();\n
\t\t\t}\n
\t\t}, function(func, name) {\n
\t\t\teditor.addCommand(name, function() {\n
\t\t\t\tvar grid = new TableGrid(editor);\n
\n
\t\t\t\tif (grid) {\n
\t\t\t\t\tfunc(grid);\n
\t\t\t\t\teditor.execCommand(\'mceRepaint\');\n
\t\t\t\t\tself.cellSelection.clear();\n
\t\t\t\t}\n
\t\t\t});\n
\t\t});\n
\n
\t\t// Register dialog commands\n
\t\teach({\n
\t\t\tmceInsertTable: dialogs.table,\n
\t\t\tmceTableProps: function() {\n
\t\t\t\tdialogs.table(true);\n
\t\t\t},\n
\t\t\tmceTableRowProps: dialogs.row,\n
\t\t\tmceTableCellProps: dialogs.cell\n
\t\t}, function(func, name) {\n
\t\t\teditor.addCommand(name, function(ui, val) {\n
\t\t\t\tfunc(val);\n
\t\t\t});\n
\t\t});\n
\n
\t\t// Enable tab key cell navigation\n
\t\tif (editor.settings.table_tab_navigation !== false) {\n
\t\t\teditor.on(\'keydown\', function(e) {\n
\t\t\t\tvar cellElm, grid, delta;\n
\n
\t\t\t\tif (e.keyCode == 9) {\n
\t\t\t\t\tcellElm = editor.dom.getParent(editor.selection.getStart(), \'th,td\');\n
\n
\t\t\t\t\tif (cellElm) {\n
\t\t\t\t\t\te.preventDefault();\n
\n
\t\t\t\t\t\tgrid = new TableGrid(editor);\n
\t\t\t\t\t\tdelta = e.shiftKey ? -1 : 1;\n
\n
\t\t\t\t\t\teditor.undoManager.transact(function() {\n
\t\t\t\t\t\t\tif (!grid.moveRelIdx(cellElm, delta) && delta > 0) {\n
\t\t\t\t\t\t\t\tgrid.insertRow();\n
\t\t\t\t\t\t\t\tgrid.refresh();\n
\t\t\t\t\t\t\t\tgrid.moveRelIdx(cellElm, delta);\n
\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t});\n
\t\t\t\t\t}\n
\t\t\t\t}\n
\t\t\t});\n
\t\t}\n
\n
\t\tself.insertTable = insertTable;\n
\t}\n
\n
\tPluginManager.add(\'table\', Plugin);\n
});\n
})(this);

]]></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
