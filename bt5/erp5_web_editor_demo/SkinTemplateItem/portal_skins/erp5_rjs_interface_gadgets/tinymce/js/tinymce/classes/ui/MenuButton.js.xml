<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41268312.14</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>MenuButton.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/**\n
 * MenuButton.js\n
 *\n
 * Released under LGPL License.\n
 * Copyright (c) 1999-2015 Ephox Corp. All rights reserved\n
 *\n
 * License: http://www.tinymce.com/license\n
 * Contributing: http://www.tinymce.com/contributing\n
 */\n
\n
/**\n
 * Creates a new menu button.\n
 *\n
 * @-x-less MenuButton.less\n
 * @class tinymce.ui.MenuButton\n
 * @extends tinymce.ui.Button\n
 */\n
define("tinymce/ui/MenuButton", [\n
\t"tinymce/ui/Button",\n
\t"tinymce/ui/Factory",\n
\t"tinymce/ui/MenuBar"\n
], function(Button, Factory, MenuBar) {\n
\t"use strict";\n
\n
\t// TODO: Maybe add as some global function\n
\tfunction isChildOf(node, parent) {\n
\t\twhile (node) {\n
\t\t\tif (parent === node) {\n
\t\t\t\treturn true;\n
\t\t\t}\n
\n
\t\t\tnode = node.parentNode;\n
\t\t}\n
\n
\t\treturn false;\n
\t}\n
\n
\tvar MenuButton = Button.extend({\n
\t\t/**\n
\t\t * Constructs a instance with the specified settings.\n
\t\t *\n
\t\t * @constructor\n
\t\t * @param {Object} settings Name/value object with settings.\n
\t\t */\n
\t\tinit: function(settings) {\n
\t\t\tvar self = this;\n
\n
\t\t\tself._renderOpen = true;\n
\n
\t\t\tself._super(settings);\n
\t\t\tsettings = self.settings;\n
\n
\t\t\tself.classes.add(\'menubtn\');\n
\n
\t\t\tif (settings.fixedWidth) {\n
\t\t\t\tself.classes.add(\'fixed-width\');\n
\t\t\t}\n
\n
\t\t\tself.aria(\'haspopup\', true);\n
\n
\t\t\tself.state.set(\'menu\', settings.menu || self.render());\n
\t\t},\n
\n
\t\t/**\n
\t\t * Shows the menu for the button.\n
\t\t *\n
\t\t * @method showMenu\n
\t\t */\n
\t\tshowMenu: function() {\n
\t\t\tvar self = this, menu;\n
\n
\t\t\tif (self.menu && self.menu.visible()) {\n
\t\t\t\treturn self.hideMenu();\n
\t\t\t}\n
\n
\t\t\tif (!self.menu) {\n
\t\t\t\tmenu = self.state.get(\'menu\') || [];\n
\n
\t\t\t\t// Is menu array then auto constuct menu control\n
\t\t\t\tif (menu.length) {\n
\t\t\t\t\tmenu = {\n
\t\t\t\t\t\ttype: \'menu\',\n
\t\t\t\t\t\titems: menu\n
\t\t\t\t\t};\n
\t\t\t\t} else {\n
\t\t\t\t\tmenu.type = menu.type || \'menu\';\n
\t\t\t\t}\n
\n
\t\t\t\tif (!menu.renderTo) {\n
\t\t\t\t\tself.menu = Factory.create(menu).parent(self).renderTo();\n
\t\t\t\t} else {\n
\t\t\t\t\tself.menu = menu.parent(self).show().renderTo();\n
\t\t\t\t}\n
\n
\t\t\t\tself.fire(\'createmenu\');\n
\t\t\t\tself.menu.reflow();\n
\t\t\t\tself.menu.on(\'cancel\', function(e) {\n
\t\t\t\t\tif (e.control.parent() === self.menu) {\n
\t\t\t\t\t\te.stopPropagation();\n
\t\t\t\t\t\tself.focus();\n
\t\t\t\t\t\tself.hideMenu();\n
\t\t\t\t\t}\n
\t\t\t\t});\n
\n
\t\t\t\t// Move focus to button when a menu item is selected/clicked\n
\t\t\t\tself.menu.on(\'select\', function() {\n
\t\t\t\t\tself.focus();\n
\t\t\t\t});\n
\n
\t\t\t\tself.menu.on(\'show hide\', function(e) {\n
\t\t\t\t\tif (e.control == self.menu) {\n
\t\t\t\t\t\tself.activeMenu(e.type == \'show\');\n
\t\t\t\t\t}\n
\n
\t\t\t\t\tself.aria(\'expanded\', e.type == \'show\');\n
\t\t\t\t}).fire(\'show\');\n
\t\t\t}\n
\n
\t\t\tself.menu.show();\n
\t\t\tself.menu.layoutRect({w: self.layoutRect().w});\n
\t\t\tself.menu.moveRel(self.getEl(), self.isRtl() ? [\'br-tr\', \'tr-br\'] : [\'bl-tl\', \'tl-bl\']);\n
\t\t},\n
\n
\t\t/**\n
\t\t * Hides the menu for the button.\n
\t\t *\n
\t\t * @method hideMenu\n
\t\t */\n
\t\thideMenu: function() {\n
\t\t\tvar self = this;\n
\n
\t\t\tif (self.menu) {\n
\t\t\t\tself.menu.items().each(function(item) {\n
\t\t\t\t\tif (item.hideMenu) {\n
\t\t\t\t\t\titem.hideMenu();\n
\t\t\t\t\t}\n
\t\t\t\t});\n
\n
\t\t\t\tself.menu.hide();\n
\t\t\t}\n
\t\t},\n
\n
\t\t/**\n
\t\t * Sets the active menu state.\n
\t\t *\n
\t\t * @private\n
\t\t */\n
\t\tactiveMenu: function(state) {\n
\t\t\tthis.classes.toggle(\'active\', state);\n
\t\t},\n
\n
\t\t/**\n
\t\t * Renders the control as a HTML string.\n
\t\t *\n
\t\t * @method renderHtml\n
\t\t * @return {String} HTML representing the control.\n
\t\t */\n
\t\trenderHtml: function() {\n
\t\t\tvar self = this, id = self._id, prefix = self.classPrefix;\n
\t\t\tvar icon = self.settings.icon, image, text = self.state.get(\'text\');\n
\n
\t\t\timage = self.settings.image;\n
\t\t\tif (image) {\n
\t\t\t\ticon = \'none\';\n
\n
\t\t\t\t// Support for [high dpi, low dpi] image sources\n
\t\t\t\tif (typeof image != "string") {\n
\t\t\t\t\timage = window.getSelection ? image[0] : image[1];\n
\t\t\t\t}\n
\n
\t\t\t\timage = \' style="background-image: url(\\\'\' + image + \'\\\')"\';\n
\t\t\t} else {\n
\t\t\t\timage = \'\';\n
\t\t\t}\n
\n
\t\t\ticon = self.settings.icon ? prefix + \'ico \' + prefix + \'i-\' + icon : \'\';\n
\n
\t\t\tself.aria(\'role\', self.parent() instanceof MenuBar ? \'menuitem\' : \'button\');\n
\n
\t\t\treturn (\n
\t\t\t\t\'<div id="\' + id + \'" class="\' + self.classes + \'" tabindex="-1" aria-labelledby="\' + id + \'">\' +\n
\t\t\t\t\t\'<button id="\' + id + \'-open" role="presentation" type="button" tabindex="-1">\' +\n
\t\t\t\t\t\t(icon ? \'<i class="\' + icon + \'"\' + image + \'></i>\' : \'\') +\n
\t\t\t\t\t\t(text ? (icon ? \'\\u00a0\' : \'\') + self.encode(text) : \'\') +\n
\t\t\t\t\t\t\' <i class="\' + prefix + \'caret"></i>\' +\n
\t\t\t\t\t\'</button>\' +\n
\t\t\t\t\'</div>\'\n
\t\t\t);\n
\t\t},\n
\n
\t\t/**\n
\t\t * Gets invoked after the control has been rendered.\n
\t\t *\n
\t\t * @method postRender\n
\t\t */\n
\t\tpostRender: function() {\n
\t\t\tvar self = this;\n
\n
\t\t\tself.on(\'click\', function(e) {\n
\t\t\t\tif (e.control === self && isChildOf(e.target, self.getEl())) {\n
\t\t\t\t\tself.showMenu();\n
\n
\t\t\t\t\tif (e.aria) {\n
\t\t\t\t\t\tself.menu.items()[0].focus();\n
\t\t\t\t\t}\n
\t\t\t\t}\n
\t\t\t});\n
\n
\t\t\tself.on(\'mouseenter\', function(e) {\n
\t\t\t\tvar overCtrl = e.control, parent = self.parent(), hasVisibleSiblingMenu;\n
\n
\t\t\t\tif (overCtrl && parent && overCtrl instanceof MenuButton && overCtrl.parent() == parent) {\n
\t\t\t\t\tparent.items().filter(\'MenuButton\').each(function(ctrl) {\n
\t\t\t\t\t\tif (ctrl.hideMenu && ctrl != overCtrl) {\n
\t\t\t\t\t\t\tif (ctrl.menu && ctrl.menu.visible()) {\n
\t\t\t\t\t\t\t\thasVisibleSiblingMenu = true;\n
\t\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\t\tctrl.hideMenu();\n
\t\t\t\t\t\t}\n
\t\t\t\t\t});\n
\n
\t\t\t\t\tif (hasVisibleSiblingMenu) {\n
\t\t\t\t\t\toverCtrl.focus(); // Fix for: #5887\n
\t\t\t\t\t\toverCtrl.showMenu();\n
\t\t\t\t\t}\n
\t\t\t\t}\n
\t\t\t});\n
\n
\t\t\treturn self._super();\n
\t\t},\n
\n
\t\tbindStates: function() {\n
\t\t\tvar self = this;\n
\n
\t\t\tself.state.on(\'change:menu\', function() {\n
\t\t\t\tif (self.menu) {\n
\t\t\t\t\tself.menu.remove();\n
\t\t\t\t}\n
\n
\t\t\t\tself.menu = null;\n
\t\t\t});\n
\n
\t\t\treturn self._super();\n
\t\t},\n
\n
\t\t/**\n
\t\t * Removes the control and it\'s menus.\n
\t\t *\n
\t\t * @method remove\n
\t\t */\n
\t\tremove: function() {\n
\t\t\tthis._super();\n
\n
\t\t\tif (this.menu) {\n
\t\t\t\tthis.menu.remove();\n
\t\t\t}\n
\t\t}\n
\t});\n
\n
\treturn MenuButton;\n
});

]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>5577</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>MenuButton.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
