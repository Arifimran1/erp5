<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41268338.32</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>ColorPicker.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/**\n
 * ColorPicker.js\n
 *\n
 * Released under LGPL License.\n
 * Copyright (c) 1999-2015 Ephox Corp. All rights reserved\n
 *\n
 * License: http://www.tinymce.com/license\n
 * Contributing: http://www.tinymce.com/contributing\n
 */\n
\n
/**\n
 * Color picker widget lets you select colors.\n
 *\n
 * @-x-less ColorPicker.less\n
 * @class tinymce.ui.ColorPicker\n
 * @extends tinymce.ui.Widget\n
 */\n
define("tinymce/ui/ColorPicker", [\n
\t"tinymce/ui/Widget",\n
\t"tinymce/ui/DragHelper",\n
\t"tinymce/ui/DomUtils",\n
\t"tinymce/util/Color"\n
], function(Widget, DragHelper, DomUtils, Color) {\n
\t"use strict";\n
\n
\treturn Widget.extend({\n
\t\tDefaults: {\n
\t\t\tclasses: "widget colorpicker"\n
\t\t},\n
\n
\t\t/**\n
\t\t * Constructs a new colorpicker instance with the specified settings.\n
\t\t *\n
\t\t * @constructor\n
\t\t * @param {Object} settings Name/value object with settings.\n
\t\t * @setting {String} color Initial color value.\n
\t\t */\n
\t\tinit: function(settings) {\n
\t\t\tthis._super(settings);\n
\t\t},\n
\n
\t\tpostRender: function() {\n
\t\t\tvar self = this, color = self.color(), hsv, hueRootElm, huePointElm, svRootElm, svPointElm;\n
\n
\t\t\thueRootElm = self.getEl(\'h\');\n
\t\t\thuePointElm = self.getEl(\'hp\');\n
\t\t\tsvRootElm = self.getEl(\'sv\');\n
\t\t\tsvPointElm = self.getEl(\'svp\');\n
\n
\t\t\tfunction getPos(elm, event) {\n
\t\t\t\tvar pos = DomUtils.getPos(elm), x, y;\n
\n
\t\t\t\tx = event.pageX - pos.x;\n
\t\t\t\ty = event.pageY - pos.y;\n
\n
\t\t\t\tx = Math.max(0, Math.min(x / elm.clientWidth, 1));\n
\t\t\t\ty = Math.max(0, Math.min(y / elm.clientHeight, 1));\n
\n
\t\t\t\treturn {\n
\t\t\t\t\tx: x,\n
\t\t\t\t\ty: y\n
\t\t\t\t};\n
\t\t\t}\n
\n
\t\t\tfunction updateColor(hsv, hueUpdate) {\n
\t\t\t\tvar hue = (360 - hsv.h) / 360;\n
\n
\t\t\t\tDomUtils.css(huePointElm, {\n
\t\t\t\t\ttop: (hue * 100) + \'%\'\n
\t\t\t\t});\n
\n
\t\t\t\tif (!hueUpdate) {\n
\t\t\t\t\tDomUtils.css(svPointElm, {\n
\t\t\t\t\t\tleft: hsv.s + \'%\',\n
\t\t\t\t\t\ttop: (100 - hsv.v) + \'%\'\n
\t\t\t\t\t});\n
\t\t\t\t}\n
\n
\t\t\t\tsvRootElm.style.background = new Color({s: 100, v: 100, h: hsv.h}).toHex();\n
\t\t\t\tself.color().parse({s: hsv.s, v: hsv.v, h: hsv.h});\n
\t\t\t}\n
\n
\t\t\tfunction updateSaturationAndValue(e) {\n
\t\t\t\tvar pos;\n
\n
\t\t\t\tpos = getPos(svRootElm, e);\n
\t\t\t\thsv.s = pos.x * 100;\n
\t\t\t\thsv.v = (1 - pos.y) * 100;\n
\n
\t\t\t\tupdateColor(hsv);\n
\t\t\t\tself.fire(\'change\');\n
\t\t\t}\n
\n
\t\t\tfunction updateHue(e) {\n
\t\t\t\tvar pos;\n
\n
\t\t\t\tpos = getPos(hueRootElm, e);\n
\t\t\t\thsv = color.toHsv();\n
\t\t\t\thsv.h = (1 - pos.y) * 360;\n
\t\t\t\tupdateColor(hsv, true);\n
\t\t\t\tself.fire(\'change\');\n
\t\t\t}\n
\n
\t\t\tself._repaint = function() {\n
\t\t\t\thsv = color.toHsv();\n
\t\t\t\tupdateColor(hsv);\n
\t\t\t};\n
\n
\t\t\tself._super();\n
\n
\t\t\tself._svdraghelper = new DragHelper(self._id + \'-sv\', {\n
\t\t\t\tstart: updateSaturationAndValue,\n
\t\t\t\tdrag: updateSaturationAndValue\n
\t\t\t});\n
\n
\t\t\tself._hdraghelper = new DragHelper(self._id + \'-h\', {\n
\t\t\t\tstart: updateHue,\n
\t\t\t\tdrag: updateHue\n
\t\t\t});\n
\n
\t\t\tself._repaint();\n
\t\t},\n
\n
\t\trgb: function() {\n
\t\t\treturn this.color().toRgb();\n
\t\t},\n
\n
\t\tvalue: function(value) {\n
\t\t\tvar self = this;\n
\n
\t\t\tif (arguments.length) {\n
\t\t\t\tself.color().parse(value);\n
\n
\t\t\t\tif (self._rendered) {\n
\t\t\t\t\tself._repaint();\n
\t\t\t\t}\n
\t\t\t} else {\n
\t\t\t\treturn self.color().toHex();\n
\t\t\t}\n
\t\t},\n
\n
\t\tcolor: function() {\n
\t\t\tif (!this._color) {\n
\t\t\t\tthis._color = new Color();\n
\t\t\t}\n
\n
\t\t\treturn this._color;\n
\t\t},\n
\n
\t\t/**\n
\t\t * Renders the control as a HTML string.\n
\t\t *\n
\t\t * @method renderHtml\n
\t\t * @return {String} HTML representing the control.\n
\t\t */\n
\t\trenderHtml: function() {\n
\t\t\tvar self = this, id = self._id, prefix = self.classPrefix, hueHtml;\n
\t\t\tvar stops = \'#ff0000,#ff0080,#ff00ff,#8000ff,#0000ff,#0080ff,#00ffff,#00ff80,#00ff00,#80ff00,#ffff00,#ff8000,#ff0000\';\n
\n
\t\t\tfunction getOldIeFallbackHtml() {\n
\t\t\t\tvar i, l, html = \'\', gradientPrefix, stopsList;\n
\n
\t\t\t\tgradientPrefix = \'filter:progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr=\';\n
\t\t\t\tstopsList = stops.split(\',\');\n
\t\t\t\tfor (i = 0, l = stopsList.length - 1; i < l; i++) {\n
\t\t\t\t\thtml += (\n
\t\t\t\t\t\t\'<div class="\' + prefix + \'colorpicker-h-chunk" style="\' +\n
\t\t\t\t\t\t\t\'height:\' + (100 / l) + \'%;\' +\n
\t\t\t\t\t\t\tgradientPrefix + stopsList[i] + \',endColorstr=\' + stopsList[i + 1] + \');\' +\n
\t\t\t\t\t\t\t\'-ms-\' + gradientPrefix + stopsList[i] + \',endColorstr=\' + stopsList[i + 1] + \')\' +\n
\t\t\t\t\t\t\'"></div>\'\n
\t\t\t\t\t);\n
\t\t\t\t}\n
\n
\t\t\t\treturn html;\n
\t\t\t}\n
\n
\t\t\tvar gradientCssText = (\n
\t\t\t\t\'background: -ms-linear-gradient(top,\' + stops + \');\' +\n
\t\t\t\t\'background: linear-gradient(to bottom,\' + stops + \');\'\n
\t\t\t);\n
\n
\t\t\thueHtml = (\n
\t\t\t\t\'<div id="\' + id + \'-h" class="\' + prefix + \'colorpicker-h" style="\' + gradientCssText + \'">\' +\n
\t\t\t\t\tgetOldIeFallbackHtml() +\n
\t\t\t\t\t\'<div id="\' + id + \'-hp" class="\' + prefix + \'colorpicker-h-marker"></div>\' +\n
\t\t\t\t\'</div>\'\n
\t\t\t);\n
\n
\t\t\treturn (\n
\t\t\t\t\'<div id="\' + id + \'" class="\' + self.classes + \'">\' +\n
\t\t\t\t\t\'<div id="\' + id + \'-sv" class="\' + prefix + \'colorpicker-sv">\' +\n
\t\t\t\t\t\t\'<div class="\' + prefix + \'colorpicker-overlay1">\' +\n
\t\t\t\t\t\t\t\'<div class="\' + prefix + \'colorpicker-overlay2">\' +\n
\t\t\t\t\t\t\t\t\'<div id="\' + id + \'-svp" class="\' + prefix + \'colorpicker-selector1">\' +\n
\t\t\t\t\t\t\t\t\t\'<div class="\' + prefix + \'colorpicker-selector2"></div>\' +\n
\t\t\t\t\t\t\t\t\'</div>\' +\n
\t\t\t\t\t\t\t\'</div>\' +\n
\t\t\t\t\t\t\'</div>\' +\n
\t\t\t\t\t\'</div>\' +\n
\t\t\t\t\thueHtml +\n
\t\t\t\t\'</div>\'\n
\t\t\t);\n
\t\t}\n
\t});\n
});

]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>4962</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>ColorPicker.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
