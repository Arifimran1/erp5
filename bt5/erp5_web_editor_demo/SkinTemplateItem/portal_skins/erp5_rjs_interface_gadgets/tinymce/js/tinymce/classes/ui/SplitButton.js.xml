<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41268315.57</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>SplitButton.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/**\n
 * SplitButton.js\n
 *\n
 * Released under LGPL License.\n
 * Copyright (c) 1999-2015 Ephox Corp. All rights reserved\n
 *\n
 * License: http://www.tinymce.com/license\n
 * Contributing: http://www.tinymce.com/contributing\n
 */\n
\n
/**\n
 * Creates a split button.\n
 *\n
 * @-x-less SplitButton.less\n
 * @class tinymce.ui.SplitButton\n
 * @extends tinymce.ui.Button\n
 */\n
define("tinymce/ui/SplitButton", [\n
\t"tinymce/ui/MenuButton",\n
\t"tinymce/ui/DomUtils",\n
\t"tinymce/dom/DomQuery"\n
], function(MenuButton, DomUtils, $) {\n
\treturn MenuButton.extend({\n
\t\tDefaults: {\n
\t\t\tclasses: "widget btn splitbtn",\n
\t\t\trole: "button"\n
\t\t},\n
\n
\t\t/**\n
\t\t * Repaints the control after a layout operation.\n
\t\t *\n
\t\t * @method repaint\n
\t\t */\n
\t\trepaint: function() {\n
\t\t\tvar self = this, elm = self.getEl(), rect = self.layoutRect(), mainButtonElm, menuButtonElm;\n
\n
\t\t\tself._super();\n
\n
\t\t\tmainButtonElm = elm.firstChild;\n
\t\t\tmenuButtonElm = elm.lastChild;\n
\n
\t\t\t$(mainButtonElm).css({\n
\t\t\t\twidth: rect.w - DomUtils.getSize(menuButtonElm).width,\n
\t\t\t\theight: rect.h - 2\n
\t\t\t});\n
\n
\t\t\t$(menuButtonElm).css({\n
\t\t\t\theight: rect.h - 2\n
\t\t\t});\n
\n
\t\t\treturn self;\n
\t\t},\n
\n
\t\t/**\n
\t\t * Sets the active menu state.\n
\t\t *\n
\t\t * @private\n
\t\t */\n
\t\tactiveMenu: function(state) {\n
\t\t\tvar self = this;\n
\n
\t\t\t$(self.getEl().lastChild).toggleClass(self.classPrefix + \'active\', state);\n
\t\t},\n
\n
\t\t/**\n
\t\t * Renders the control as a HTML string.\n
\t\t *\n
\t\t * @method renderHtml\n
\t\t * @return {String} HTML representing the control.\n
\t\t */\n
\t\trenderHtml: function() {\n
\t\t\tvar self = this, id = self._id, prefix = self.classPrefix, image;\n
\t\t\tvar icon = self.state.get(\'icon\'), text = self.state.get(\'text\');\n
\n
\t\t\timage = self.settings.image;\n
\t\t\tif (image) {\n
\t\t\t\ticon = \'none\';\n
\n
\t\t\t\t// Support for [high dpi, low dpi] image sources\n
\t\t\t\tif (typeof image != "string") {\n
\t\t\t\t\timage = window.getSelection ? image[0] : image[1];\n
\t\t\t\t}\n
\n
\t\t\t\timage = \' style="background-image: url(\\\'\' + image + \'\\\')"\';\n
\t\t\t} else {\n
\t\t\t\timage = \'\';\n
\t\t\t}\n
\n
\t\t\ticon = self.settings.icon ? prefix + \'ico \' + prefix + \'i-\' + icon : \'\';\n
\n
\t\t\treturn (\n
\t\t\t\t\'<div id="\' + id + \'" class="\' + self.classes + \'" role="button" tabindex="-1">\' +\n
\t\t\t\t\t\'<button type="button" hidefocus="1" tabindex="-1">\' +\n
\t\t\t\t\t\t(icon ? \'<i class="\' + icon + \'"\' + image + \'></i>\' : \'\') +\n
\t\t\t\t\t\t(text ? (icon ? \' \' : \'\') + text : \'\') +\n
\t\t\t\t\t\'</button>\' +\n
\t\t\t\t\t\'<button type="button" class="\' + prefix + \'open" hidefocus="1" tabindex="-1">\' +\n
\t\t\t\t\t\t//(icon ? \'<i class="\' + icon + \'"></i>\' : \'\') +\n
\t\t\t\t\t\t(self._menuBtnText ? (icon ? \'\\u00a0\' : \'\') + self._menuBtnText : \'\') +\n
\t\t\t\t\t\t\' <i class="\' + prefix + \'caret"></i>\' +\n
\t\t\t\t\t\'</button>\' +\n
\t\t\t\t\'</div>\'\n
\t\t\t);\n
\t\t},\n
\n
\t\t/**\n
\t\t * Called after the control has been rendered.\n
\t\t *\n
\t\t * @method postRender\n
\t\t */\n
\t\tpostRender: function() {\n
\t\t\tvar self = this, onClickHandler = self.settings.onclick;\n
\n
\t\t\tself.on(\'click\', function(e) {\n
\t\t\t\tvar node = e.target;\n
\n
\t\t\t\tif (e.control == this) {\n
\t\t\t\t\t// Find clicks that is on the main button\n
\t\t\t\t\twhile (node) {\n
\t\t\t\t\t\tif ((e.aria && e.aria.key != \'down\') || (node.nodeName == \'BUTTON\' && node.className.indexOf(\'open\') == -1)) {\n
\t\t\t\t\t\t\te.stopImmediatePropagation();\n
\n
\t\t\t\t\t\t\tif (onClickHandler) {\n
\t\t\t\t\t\t\t\tonClickHandler.call(this, e);\n
\t\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\t\treturn;\n
\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\tnode = node.parentNode;\n
\t\t\t\t\t}\n
\t\t\t\t}\n
\t\t\t});\n
\n
\t\t\tdelete self.settings.onclick;\n
\n
\t\t\treturn self._super();\n
\t\t}\n
\t});\n
});

]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>3308</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>SplitButton.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
