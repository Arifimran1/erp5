<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41268322.4</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>ButtonGroup.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/**\n
 * ButtonGroup.js\n
 *\n
 * Released under LGPL License.\n
 * Copyright (c) 1999-2015 Ephox Corp. All rights reserved\n
 *\n
 * License: http://www.tinymce.com/license\n
 * Contributing: http://www.tinymce.com/contributing\n
 */\n
\n
/**\n
 * This control enables you to put multiple buttons into a group. This is\n
 * useful when you want to combine similar toolbar buttons into a group.\n
 *\n
 * @example\n
 * // Create and render a buttongroup with two buttons to the body element\n
 * tinymce.ui.Factory.create({\n
 *     type: \'buttongroup\',\n
 *     items: [\n
 *         {text: \'Button A\'},\n
 *         {text: \'Button B\'}\n
 *     ]\n
 * }).renderTo(document.body);\n
 *\n
 * @-x-less ButtonGroup.less\n
 * @class tinymce.ui.ButtonGroup\n
 * @extends tinymce.ui.Container\n
 */\n
define("tinymce/ui/ButtonGroup", [\n
\t"tinymce/ui/Container"\n
], function(Container) {\n
\t"use strict";\n
\n
\treturn Container.extend({\n
\t\tDefaults: {\n
\t\t\tdefaultType: \'button\',\n
\t\t\trole: \'group\'\n
\t\t},\n
\n
\t\t/**\n
\t\t * Renders the control as a HTML string.\n
\t\t *\n
\t\t * @method renderHtml\n
\t\t * @return {String} HTML representing the control.\n
\t\t */\n
\t\trenderHtml: function() {\n
\t\t\tvar self = this, layout = self._layout;\n
\n
\t\t\tself.classes.add(\'btn-group\');\n
\t\t\tself.preRender();\n
\t\t\tlayout.preRender(self);\n
\n
\t\t\treturn (\n
\t\t\t\t\'<div id="\' + self._id + \'" class="\' + self.classes + \'">\' +\n
\t\t\t\t\t\'<div id="\' + self._id + \'-body">\' +\n
\t\t\t\t\t\t(self.settings.html || \'\') + layout.renderHtml(self) +\n
\t\t\t\t\t\'</div>\' +\n
\t\t\t\t\'</div>\'\n
\t\t\t);\n
\t\t}\n
\t});\n
});

]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>1447</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>ButtonGroup.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
