<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41268333.53</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>ColorButton.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/**\n
 * ColorButton.js\n
 *\n
 * Released under LGPL License.\n
 * Copyright (c) 1999-2015 Ephox Corp. All rights reserved\n
 *\n
 * License: http://www.tinymce.com/license\n
 * Contributing: http://www.tinymce.com/contributing\n
 */\n
\n
/**\n
 * This class creates a color button control. This is a split button in which the main\n
 * button has a visual representation of the currently selected color. When clicked\n
 * the caret button displays a color picker, allowing the user to select a new color.\n
 *\n
 * @-x-less ColorButton.less\n
 * @class tinymce.ui.ColorButton\n
 * @extends tinymce.ui.PanelButton\n
 */\n
define("tinymce/ui/ColorButton", [\n
\t"tinymce/ui/PanelButton",\n
\t"tinymce/dom/DOMUtils"\n
], function(PanelButton, DomUtils) {\n
\t"use strict";\n
\n
\tvar DOM = DomUtils.DOM;\n
\n
\treturn PanelButton.extend({\n
\t\t/**\n
\t\t * Constructs a new ColorButton instance with the specified settings.\n
\t\t *\n
\t\t * @constructor\n
\t\t * @param {Object} settings Name/value object with settings.\n
\t\t */\n
\t\tinit: function(settings) {\n
\t\t\tthis._super(settings);\n
\t\t\tthis.classes.add(\'colorbutton\');\n
\t\t},\n
\n
\t\t/**\n
\t\t * Getter/setter for the current color.\n
\t\t *\n
\t\t * @method color\n
\t\t * @param {String} [color] Color to set.\n
\t\t * @return {String|tinymce.ui.ColorButton} Current color or current instance.\n
\t\t */\n
\t\tcolor: function(color) {\n
\t\t\tif (color) {\n
\t\t\t\tthis._color = color;\n
\t\t\t\tthis.getEl(\'preview\').style.backgroundColor = color;\n
\t\t\t\treturn this;\n
\t\t\t}\n
\n
\t\t\treturn this._color;\n
\t\t},\n
\n
\t\t/**\n
\t\t * Resets the current color.\n
\t\t *\n
\t\t * @method resetColor\n
\t\t * @return {tinymce.ui.ColorButton} Current instance.\n
\t\t */\n
\t\tresetColor: function() {\n
\t\t\tthis._color = null;\n
\t\t\tthis.getEl(\'preview\').style.backgroundColor = null;\n
\t\t\treturn this;\n
\t\t},\n
\n
\t\t/**\n
\t\t * Renders the control as a HTML string.\n
\t\t *\n
\t\t * @method renderHtml\n
\t\t * @return {String} HTML representing the control.\n
\t\t */\n
\t\trenderHtml: function() {\n
\t\t\tvar self = this, id = self._id, prefix = self.classPrefix, text = self.state.get(\'text\');\n
\t\t\tvar icon = self.settings.icon ? prefix + \'ico \' + prefix + \'i-\' + self.settings.icon : \'\';\n
\t\t\tvar image = self.settings.image ? \' style="background-image: url(\\\'\' + self.settings.image + \'\\\')"\' : \'\';\n
\n
\t\t\treturn (\n
\t\t\t\t\'<div id="\' + id + \'" class="\' + self.classes + \'" role="button" tabindex="-1" aria-haspopup="true">\' +\n
\t\t\t\t\t\'<button role="presentation" hidefocus="1" type="button" tabindex="-1">\' +\n
\t\t\t\t\t\t(icon ? \'<i class="\' + icon + \'"\' + image + \'></i>\' : \'\') +\n
\t\t\t\t\t\t\'<span id="\' + id + \'-preview" class="\' + prefix + \'preview"></span>\' +\n
\t\t\t\t\t\t(text ? (icon ? \' \' : \'\') + (text) : \'\') +\n
\t\t\t\t\t\'</button>\' +\n
\t\t\t\t\t\'<button type="button" class="\' + prefix + \'open" hidefocus="1" tabindex="-1">\' +\n
\t\t\t\t\t\t\' <i class="\' + prefix + \'caret"></i>\' +\n
\t\t\t\t\t\'</button>\' +\n
\t\t\t\t\'</div>\'\n
\t\t\t);\n
\t\t},\n
\n
\t\t/**\n
\t\t * Called after the control has been rendered.\n
\t\t *\n
\t\t * @method postRender\n
\t\t */\n
\t\tpostRender: function() {\n
\t\t\tvar self = this, onClickHandler = self.settings.onclick;\n
\n
\t\t\tself.on(\'click\', function(e) {\n
\t\t\t\tif (e.aria && e.aria.key == \'down\') {\n
\t\t\t\t\treturn;\n
\t\t\t\t}\n
\n
\t\t\t\tif (e.control == self && !DOM.getParent(e.target, \'.\' + self.classPrefix + \'open\')) {\n
\t\t\t\t\te.stopImmediatePropagation();\n
\t\t\t\t\tonClickHandler.call(self, e);\n
\t\t\t\t}\n
\t\t\t});\n
\n
\t\t\tdelete self.settings.onclick;\n
\n
\t\t\treturn self._super();\n
\t\t}\n
\t});\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>3250</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>ColorButton.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
