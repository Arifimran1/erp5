<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41268278.67</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Binding.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string>/**\n
 * Binding.js\n
 *\n
 * Released under LGPL License.\n
 * Copyright (c) 1999-2015 Ephox Corp. All rights reserved\n
 *\n
 * License: http://www.tinymce.com/license\n
 * Contributing: http://www.tinymce.com/contributing\n
 */\n
\n
/**\n
 * This class gets dynamically extended to provide a binding between two models. This makes it possible to\n
 * sync the state of two properties in two models by a layer of abstraction.\n
 *\n
 * @class tinymce.data.Binding\n
 */\n
define("tinymce/data/Binding", [], function() {\n
\t/**\n
\t * Constructs a new bidning.\n
\t *\n
\t * @constructor\n
\t * @method Binding\n
\t * @param {Object} settings Settings to the binding.\n
\t */\n
\tfunction Binding(settings) {\n
\t\tthis.create = settings.create;\n
\t}\n
\n
\t/**\n
\t * Creates a binding for a property on a model.\n
\t *\n
\t * @method create\n
\t * @param {tinymce.data.ObservableObject} model Model to create binding to.\n
\t * @param {String} name Name of property to bind.\n
\t * @return {tinymce.data.Binding} Binding instance.\n
\t */\n
\tBinding.create = function(model, name) {\n
\t\treturn new Binding({\n
\t\t\tcreate: function(otherModel, otherName) {\n
\t\t\t\tvar bindings;\n
\n
\t\t\t\tfunction fromSelfToOther(e) {\n
\t\t\t\t\totherModel.set(otherName, e.value);\n
\t\t\t\t}\n
\n
\t\t\t\tfunction fromOtherToSelf(e) {\n
\t\t\t\t\tmodel.set(name, e.value);\n
\t\t\t\t}\n
\n
\t\t\t\totherModel.on(\'change:\' + otherName, fromOtherToSelf);\n
\t\t\t\tmodel.on(\'change:\' + name, fromSelfToOther);\n
\n
\t\t\t\t// Keep track of the bindings\n
\t\t\t\tbindings = otherModel._bindings;\n
\n
\t\t\t\tif (!bindings) {\n
\t\t\t\t\tbindings = otherModel._bindings = [];\n
\n
\t\t\t\t\totherModel.on(\'destroy\', function() {\n
\t\t\t\t\t\tvar i = bindings.length;\n
\n
\t\t\t\t\t\twhile (i--) {\n
\t\t\t\t\t\t\tbindings[i]();\n
\t\t\t\t\t\t}\n
\t\t\t\t\t});\n
\t\t\t\t}\n
\n
\t\t\t\tbindings.push(function() {\n
\t\t\t\t\tmodel.off(\'change:\' + name, fromSelfToOther);\n
\t\t\t\t});\n
\n
\t\t\t\treturn model.get(name);\n
\t\t\t}\n
\t\t});\n
\t};\n
\n
\treturn Binding;\n
});</string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>1780</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>Binding.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
