<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41268429.94</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Plugin.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/**\n
 * Plugin.js\n
 *\n
 * Released under LGPL License.\n
 * Copyright (c) 1999-2015 Ephox Corp. All rights reserved\n
 *\n
 * License: http://www.tinymce.com/license\n
 * Contributing: http://www.tinymce.com/contributing\n
 */\n
\n
/**\n
 * This class contains all core logic for the table plugin.\n
 *\n
 * @class tinymce.tableplugin.Plugin\n
 * @private\n
 */\n
define("tinymce/tableplugin/Plugin", [\n
\t"tinymce/tableplugin/TableGrid",\n
\t"tinymce/tableplugin/Quirks",\n
\t"tinymce/tableplugin/CellSelection",\n
\t"tinymce/tableplugin/Dialogs",\n
\t"tinymce/util/Tools",\n
\t"tinymce/dom/TreeWalker",\n
\t"tinymce/Env",\n
\t"tinymce/PluginManager"\n
], function(TableGrid, Quirks, CellSelection, Dialogs, Tools, TreeWalker, Env, PluginManager) {\n
\tvar each = Tools.each;\n
\n
\tfunction Plugin(editor) {\n
\t\tvar clipboardRows, self = this, dialogs = new Dialogs(editor);\n
\n
\t\tfunction cmd(command) {\n
\t\t\treturn function() {\n
\t\t\t\teditor.execCommand(command);\n
\t\t\t};\n
\t\t}\n
\n
\t\tfunction insertTable(cols, rows) {\n
\t\t\tvar y, x, html, tableElm;\n
\n
\t\t\thtml = \'<table id="__mce"><tbody>\';\n
\n
\t\t\tfor (y = 0; y < rows; y++) {\n
\t\t\t\thtml += \'<tr>\';\n
\n
\t\t\t\tfor (x = 0; x < cols; x++) {\n
\t\t\t\t\thtml += \'<td>\' + (Env.ie ? " " : \'<br>\') + \'</td>\';\n
\t\t\t\t}\n
\n
\t\t\t\thtml += \'</tr>\';\n
\t\t\t}\n
\n
\t\t\thtml += \'</tbody></table>\';\n
\n
\t\t\teditor.undoManager.transact(function() {\n
\t\t\t\teditor.insertContent(html);\n
\n
\t\t\t\ttableElm = editor.dom.get(\'__mce\');\n
\t\t\t\teditor.dom.setAttrib(tableElm, \'id\', null);\n
\n
\t\t\t\teditor.dom.setAttribs(tableElm, editor.settings.table_default_attributes || {});\n
\t\t\t\teditor.dom.setStyles(tableElm, editor.settings.table_default_styles || {});\n
\t\t\t});\n
\n
\t\t\treturn tableElm;\n
\t\t}\n
\n
\t\tfunction handleDisabledState(ctrl, selector) {\n
\t\t\tfunction bindStateListener() {\n
\t\t\t\tctrl.disabled(!editor.dom.getParent(editor.selection.getStart(), selector));\n
\n
\t\t\t\teditor.selection.selectorChanged(selector, function(state) {\n
\t\t\t\t\tctrl.disabled(!state);\n
\t\t\t\t});\n
\t\t\t}\n
\n
\t\t\tif (editor.initialized) {\n
\t\t\t\tbindStateListener();\n
\t\t\t} else {\n
\t\t\t\teditor.on(\'init\', bindStateListener);\n
\t\t\t}\n
\t\t}\n
\n
\t\tfunction postRender() {\n
\t\t\t/*jshint validthis:true*/\n
\t\t\thandleDisabledState(this, \'table\');\n
\t\t}\n
\n
\t\tfunction postRenderCell() {\n
\t\t\t/*jshint validthis:true*/\n
\t\t\thandleDisabledState(this, \'td,th\');\n
\t\t}\n
\n
\t\tfunction generateTableGrid() {\n
\t\t\tvar html = \'\';\n
\n
\t\t\thtml = \'<table role="grid" class="mce-grid mce-grid-border" aria-readonly="true">\';\n
\n
\t\t\tfor (var y = 0; y < 10; y++) {\n
\t\t\t\thtml += \'<tr>\';\n
\n
\t\t\t\tfor (var x = 0; x < 10; x++) {\n
\t\t\t\t\thtml += \'<td role="gridcell" tabindex="-1"><a id="mcegrid\' + (y * 10 + x) + \'" href="#" \' +\n
\t\t\t\t\t\t\'data-mce-x="\' + x + \'" data-mce-y="\' + y + \'"></a></td>\';\n
\t\t\t\t}\n
\n
\t\t\t\thtml += \'</tr>\';\n
\t\t\t}\n
\n
\t\t\thtml += \'</table>\';\n
\n
\t\t\thtml += \'<div class="mce-text-center" role="presentation">1 x 1</div>\';\n
\n
\t\t\treturn html;\n
\t\t}\n
\n
\t\tfunction selectGrid(tx, ty, control) {\n
\t\t\tvar table = control.getEl().getElementsByTagName(\'table\')[0];\n
\t\t\tvar x, y, focusCell, cell, active;\n
\t\t\tvar rtl = control.isRtl() || control.parent().rel == \'tl-tr\';\n
\n
\t\t\ttable.nextSibling.innerHTML = (tx + 1) + \' x \' + (ty + 1);\n
\n
\t\t\tif (rtl) {\n
\t\t\t\ttx = 9 - tx;\n
\t\t\t}\n
\n
\t\t\tfor (y = 0; y < 10; y++) {\n
\t\t\t\tfor (x = 0; x < 10; x++) {\n
\t\t\t\t\tcell = table.rows[y].childNodes[x].firstChild;\n
\t\t\t\t\tactive = (rtl ? x >= tx : x <= tx) && y <= ty;\n
\n
\t\t\t\t\teditor.dom.toggleClass(cell, \'mce-active\', active);\n
\n
\t\t\t\t\tif (active) {\n
\t\t\t\t\t\tfocusCell = cell;\n
\t\t\t\t\t}\n
\t\t\t\t}\n
\t\t\t}\n
\n
\t\t\treturn focusCell.parentNode;\n
\t\t}\n
\n
\t\tif (editor.settings.table_grid === false) {\n
\t\t\teditor.addMenuItem(\'inserttable\', {\n
\t\t\t\ttext: \'Insert table\',\n
\t\t\t\ticon: \'table\',\n
\t\t\t\tcontext: \'table\',\n
\t\t\t\tonclick: dialogs.table\n
\t\t\t});\n
\t\t} else {\n
\t\t\teditor.addMenuItem(\'inserttable\', {\n
\t\t\t\ttext: \'Insert table\',\n
\t\t\t\ticon: \'table\',\n
\t\t\t\tcontext: \'table\',\n
\t\t\t\tariaHideMenu: true,\n
\t\t\t\tonclick: function(e) {\n
\t\t\t\t\tif (e.aria) {\n
\t\t\t\t\t\tthis.parent().hideAll();\n
\t\t\t\t\t\te.stopImmediatePropagation();\n
\t\t\t\t\t\tdialogs.table();\n
\t\t\t\t\t}\n
\t\t\t\t},\n
\t\t\t\tonshow: function() {\n
\t\t\t\t\tselectGrid(0, 0, this.menu.items()[0]);\n
\t\t\t\t},\n
\t\t\t\tonhide: function() {\n
\t\t\t\t\tvar elements = this.menu.items()[0].getEl().getElementsByTagName(\'a\');\n
\t\t\t\t\teditor.dom.removeClass(elements, \'mce-active\');\n
\t\t\t\t\teditor.dom.addClass(elements[0], \'mce-active\');\n
\t\t\t\t},\n
\t\t\t\tmenu: [\n
\t\t\t\t\t{\n
\t\t\t\t\t\ttype: \'container\',\n
\t\t\t\t\t\thtml: generateTableGrid(),\n
\n
\t\t\t\t\t\tonPostRender: function() {\n
\t\t\t\t\t\t\tthis.lastX = this.lastY = 0;\n
\t\t\t\t\t\t},\n
\n
\t\t\t\t\t\tonmousemove: function(e) {\n
\t\t\t\t\t\t\tvar target = e.target, x, y;\n
\n
\t\t\t\t\t\t\tif (target.tagName.toUpperCase() == \'A\') {\n
\t\t\t\t\t\t\t\tx = parseInt(target.getAttribute(\'data-mce-x\'), 10);\n
\t\t\t\t\t\t\t\ty = parseInt(target.getAttribute(\'data-mce-y\'), 10);\n
\n
\t\t\t\t\t\t\t\tif (this.isRtl() || this.parent().rel == \'tl-tr\') {\n
\t\t\t\t\t\t\t\t\tx = 9 - x;\n
\t\t\t\t\t\t\t\t}\n
\n
\t\t\t\t\t\t\t\tif (x !== this.lastX || y !== this.lastY) {\n
\t\t\t\t\t\t\t\t\tselectGrid(x, y, e.control);\n
\n
\t\t\t\t\t\t\t\t\tthis.lastX = x;\n
\t\t\t\t\t\t\t\t\tthis.lastY = y;\n
\t\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t},\n
\n
\t\t\t\t\t\tonclick: function(e) {\n
\t\t\t\t\t\t\tvar self = this;\n
\n
\t\t\t\t\t\t\tif (e.target.tagName.toUpperCase() == \'A\') {\n
\t\t\t\t\t\t\t\te.preventDefault();\n
\t\t\t\t\t\t\t\te.stopPropagation();\n
\t\t\t\t\t\t\t\tself.parent().cancel();\n
\n
\t\t\t\t\t\t\t\teditor.undoManager.transact(function() {\n
\t\t\t\t\t\t\t\t\tinsertTable(self.lastX + 1, self.lastY + 1);\n
\t\t\t\t\t\t\t\t});\n
\n
\t\t\t\t\t\t\t\teditor.addVisual();\n
\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t}\n
\t\t\t\t\t}\n
\t\t\t\t]\n
\t\t\t});\n
\t\t}\n
\n
\t\teditor.addMenuItem(\'tableprops\', {\n
\t\t\ttext: \'Table properties\',\n
\t\t\tcontext: \'table\',\n
\t\t\tonPostRender: postRender,\n
\t\t\tonclick: dialogs.tableProps\n
\t\t});\n
\n
\t\teditor.addMenuItem(\'deletetable\', {\n
\t\t\ttext: \'Delete table\',\n
\t\t\tcontext: \'table\',\n
\t\t\tonPostRender: postRender,\n
\t\t\tcmd: \'mceTableDelete\'\n
\t\t});\n
\n
\t\teditor.addMenuItem(\'cell\', {\n
\t\t\tseparator: \'before\',\n
\t\t\ttext: \'Cell\',\n
\t\t\tcontext: \'table\',\n
\t\t\tmenu: [\n
\t\t\t\t{text: \'Cell properties\', onclick: cmd(\'mceTableCellProps\'), onPostRender: postRenderCell},\n
\t\t\t\t{text: \'Merge cells\', onclick: cmd(\'mceTableMergeCells\'), onPostRender: postRenderCell},\n
\t\t\t\t{text: \'Split cell\', onclick: cmd(\'mceTableSplitCells\'), onPostRender: postRenderCell}\n
\t\t\t]\n
\t\t});\n
\n
\t\teditor.addMenuItem(\'row\', {\n
\t\t\ttext: \'Row\',\n
\t\t\tcontext: \'table\',\n
\t\t\tmenu: [\n
\t\t\t\t{text: \'Insert row before\', onclick: cmd(\'mceTableInsertRowBefore\'), onPostRender: postRenderCell},\n
\t\t\t\t{text: \'Insert row after\', onclick: cmd(\'mceTableInsertRowAfter\'), onPostRender: postRenderCell},\n
\t\t\t\t{text: \'Delete row\', onclick: cmd(\'mceTableDeleteRow\'), onPostRender: postRenderCell},\n
\t\t\t\t{text: \'Row properties\', onclick: cmd(\'mceTableRowProps\'), onPostRender: postRenderCell},\n
\t\t\t\t{text: \'-\'},\n
\t\t\t\t{text: \'Cut row\', onclick: cmd(\'mceTableCutRow\'), onPostRender: postRenderCell},\n
\t\t\t\t{text: \'Copy row\', onclick: cmd(\'mceTableCopyRow\'), onPostRender: postRenderCell},\n
\t\t\t\t{text: \'Paste row before\', onclick: cmd(\'mceTablePasteRowBefore\'), onPostRender: postRenderCell},\n
\t\t\t\t{text: \'Paste row after\', onclick: cmd(\'mceTablePasteRowAfter\'), onPostRender: postRenderCell}\n
\t\t\t]\n
\t\t});\n
\n
\t\teditor.addMenuItem(\'column\', {\n
\t\t\ttext: \'Column\',\n
\t\t\tcontext: \'table\',\n
\t\t\tmenu: [\n
\t\t\t\t{text: \'Insert column before\', onclick: cmd(\'mceTableInsertColBefore\'), onPostRender: postRenderCell},\n
\t\t\t\t{text: \'Insert column after\', onclick: cmd(\'mceTableInsertColAfter\'), onPostRender: postRenderCell},\n
\t\t\t\t{text: \'Delete column\', onclick: cmd(\'mceTableDeleteCol\'), onPostRender: postRenderCell}\n
\t\t\t]\n
\t\t});\n
\n
\t\tvar menuItems = [];\n
\t\teach("inserttable tableprops deletetable | cell row column".split(\' \'), function(name) {\n
\t\t\tif (name == \'|\') {\n
\t\t\t\tmenuItems.push({text: \'-\'});\n
\t\t\t} else {\n
\t\t\t\tmenuItems.push(editor.menuItems[name]);\n
\t\t\t}\n
\t\t});\n
\n
\t\teditor.addButton("table", {\n
\t\t\ttype: "menubutton",\n
\t\t\ttitle: "Table",\n
\t\t\tmenu: menuItems\n
\t\t});\n
\n
\t\t// Select whole table is a table border is clicked\n
\t\tif (!Env.isIE) {\n
\t\t\teditor.on(\'click\', function(e) {\n
\t\t\t\te = e.target;\n
\n
\t\t\t\tif (e.nodeName === \'TABLE\') {\n
\t\t\t\t\teditor.selection.select(e);\n
\t\t\t\t\teditor.nodeChanged();\n
\t\t\t\t}\n
\t\t\t});\n
\t\t}\n
\n
\t\tself.quirks = new Quirks(editor);\n
\n
\t\teditor.on(\'Init\', function() {\n
\t\t\tself.cellSelection = new CellSelection(editor);\n
\t\t});\n
\n
\t\teditor.on(\'PreInit\', function() {\n
\t\t\t// Remove internal data attributes\n
\t\t\teditor.serializer.addAttributeFilter(\n
\t\t\t\t\'data-mce-cell-padding,data-mce-border,data-mce-border-color\',\n
\t\t\t\tfunction(nodes, name) {\n
\n
\t\t\t\t\tvar i = nodes.length;\n
\n
\t\t\t\t\twhile (i--) {\n
\t\t\t\t\t\tnodes[i].attr(name, null);\n
\t\t\t\t\t}\n
\t\t\t\t});\n
\t\t});\n
\n
\t\t// Register action commands\n
\t\teach({\n
\t\t\tmceTableSplitCells: function(grid) {\n
\t\t\t\tgrid.split();\n
\t\t\t},\n
\n
\t\t\tmceTableMergeCells: function(grid) {\n
\t\t\t\tvar cell;\n
\n
\t\t\t\tcell = editor.dom.getParent(editor.selection.getStart(), \'th,td\');\n
\n
\t\t\t\tif (!editor.dom.select(\'td.mce-item-selected,th.mce-item-selected\').length) {\n
\t\t\t\t\tdialogs.merge(grid, cell);\n
\t\t\t\t} else {\n
\t\t\t\t\tgrid.merge();\n
\t\t\t\t}\n
\t\t\t},\n
\n
\t\t\tmceTableInsertRowBefore: function(grid) {\n
\t\t\t\tgrid.insertRow(true);\n
\t\t\t},\n
\n
\t\t\tmceTableInsertRowAfter: function(grid) {\n
\t\t\t\tgrid.insertRow();\n
\t\t\t},\n
\n
\t\t\tmceTableInsertColBefore: function(grid) {\n
\t\t\t\tgrid.insertCol(true);\n
\t\t\t},\n
\n
\t\t\tmceTableInsertColAfter: function(grid) {\n
\t\t\t\tgrid.insertCol();\n
\t\t\t},\n
\n
\t\t\tmceTableDeleteCol: function(grid) {\n
\t\t\t\tgrid.deleteCols();\n
\t\t\t},\n
\n
\t\t\tmceTableDeleteRow: function(grid) {\n
\t\t\t\tgrid.deleteRows();\n
\t\t\t},\n
\n
\t\t\tmceTableCutRow: function(grid) {\n
\t\t\t\tclipboardRows = grid.cutRows();\n
\t\t\t},\n
\n
\t\t\tmceTableCopyRow: function(grid) {\n
\t\t\t\tclipboardRows = grid.copyRows();\n
\t\t\t},\n
\n
\t\t\tmceTablePasteRowBefore: function(grid) {\n
\t\t\t\tgrid.pasteRows(clipboardRows, true);\n
\t\t\t},\n
\n
\t\t\tmceTablePasteRowAfter: function(grid) {\n
\t\t\t\tgrid.pasteRows(clipboardRows);\n
\t\t\t},\n
\n
\t\t\tmceTableDelete: function(grid) {\n
\t\t\t\tgrid.deleteTable();\n
\t\t\t}\n
\t\t}, function(func, name) {\n
\t\t\teditor.addCommand(name, function() {\n
\t\t\t\tvar grid = new TableGrid(editor);\n
\n
\t\t\t\tif (grid) {\n
\t\t\t\t\tfunc(grid);\n
\t\t\t\t\teditor.execCommand(\'mceRepaint\');\n
\t\t\t\t\tself.cellSelection.clear();\n
\t\t\t\t}\n
\t\t\t});\n
\t\t});\n
\n
\t\t// Register dialog commands\n
\t\teach({\n
\t\t\tmceInsertTable: dialogs.table,\n
\t\t\tmceTableProps: function() {\n
\t\t\t\tdialogs.table(true);\n
\t\t\t},\n
\t\t\tmceTableRowProps: dialogs.row,\n
\t\t\tmceTableCellProps: dialogs.cell\n
\t\t}, function(func, name) {\n
\t\t\teditor.addCommand(name, function(ui, val) {\n
\t\t\t\tfunc(val);\n
\t\t\t});\n
\t\t});\n
\n
\t\t// Enable tab key cell navigation\n
\t\tif (editor.settings.table_tab_navigation !== false) {\n
\t\t\teditor.on(\'keydown\', function(e) {\n
\t\t\t\tvar cellElm, grid, delta;\n
\n
\t\t\t\tif (e.keyCode == 9) {\n
\t\t\t\t\tcellElm = editor.dom.getParent(editor.selection.getStart(), \'th,td\');\n
\n
\t\t\t\t\tif (cellElm) {\n
\t\t\t\t\t\te.preventDefault();\n
\n
\t\t\t\t\t\tgrid = new TableGrid(editor);\n
\t\t\t\t\t\tdelta = e.shiftKey ? -1 : 1;\n
\n
\t\t\t\t\t\teditor.undoManager.transact(function() {\n
\t\t\t\t\t\t\tif (!grid.moveRelIdx(cellElm, delta) && delta > 0) {\n
\t\t\t\t\t\t\t\tgrid.insertRow();\n
\t\t\t\t\t\t\t\tgrid.refresh();\n
\t\t\t\t\t\t\t\tgrid.moveRelIdx(cellElm, delta);\n
\t\t\t\t\t\t\t}\n
\t\t\t\t\t\t});\n
\t\t\t\t\t}\n
\t\t\t\t}\n
\t\t\t});\n
\t\t}\n
\n
\t\tself.insertTable = insertTable;\n
\t}\n
\n
\tPluginManager.add(\'table\', Plugin);\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>10626</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>Plugin.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
