<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41268239.1</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Formatter_remove.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

module("tinymce.Formatter - Remove", {\n
\tsetupModule: function() {\n
\t\tdocument.getElementById(\'view\').innerHTML = \'<textarea id="elm1"></textarea><div id="elm2"></div>\';\n
\t\tQUnit.stop();\n
\n
\t\ttinymce.init({\n
\t\t\tselector: "textarea",\n
\t\t\tplugins: "noneditable",\n
\t\t\tindent: false,\n
\t\t\tadd_unload_trigger: false,\n
\t\t\tskin: false,\n
\t\t\textended_valid_elements: \'b,i,span[style|contenteditable]\',\n
\t\t\tentities: \'raw\',\n
\t\t\tvalid_styles: {\n
\t\t\t\t\'*\': \'color,font-size,font-family,background-color,font-weight,font-style,text-decoration,float,margin,margin-top,margin-right,margin-bottom,margin-left,display\'\n
\t\t\t},\n
\t\t\tdisable_nodechange: true,\n
\t\t\tinit_instance_callback: function(ed) {\n
\t\t\t\twindow.editor = ed;\n
\t\t\t\tQUnit.start();\n
\t\t\t}\n
\t\t});\n
\t}\n
});\n
\n
function getContent() {\n
\treturn editor.getContent().toLowerCase().replace(/[\\r]+/g, \'\');\n
}\n
\n
test(\'Inline element on selected text\', function() {\n
\teditor.formatter.register(\'format\', {inline : \'b\'});\n
\teditor.getBody().innerHTML = \'<p><b>1234</b></p>\';\n
\tvar rng = editor.dom.createRng();\n
\trng.setStart(editor.dom.select(\'b\')[0].firstChild, 0);\n
\trng.setEnd(editor.dom.select(\'b\')[0].firstChild, 4);\n
\teditor.selection.setRng(rng);\n
\teditor.formatter.remove(\'format\');\n
\tequal(getContent(), \'<p>1234</p>\', \'Inline element on selected text\');\n
});\n
\n
test(\'Inline element on selected text with remove=all\', function() {\n
\teditor.formatter.register(\'format\', {selector : \'b\', remove : \'all\'});\n
\teditor.getBody().innerHTML = \'<p><b title="text">1234</b></p>\';\n
\tvar rng = editor.dom.createRng();\n
\trng.setStart(editor.dom.select(\'b\')[0].firstChild, 0);\n
\trng.setEnd(editor.dom.select(\'b\')[0].firstChild, 4);\n
\teditor.selection.setRng(rng);\n
\teditor.formatter.remove(\'format\');\n
\tequal(getContent(), \'<p>1234</p>\', \'Inline element on selected text with remove=all\');\n
});\n
\n
test(\'Inline element on selected text with remove=none\', function() {\n
\teditor.formatter.register(\'format\', {selector : \'span\', styles : {fontWeight : \'bold\'}, remove : \'none\'});\n
\teditor.getBody().innerHTML = \'<p><span style="font-weight:bold">1234</span></p>\';\n
\tvar rng = editor.dom.createRng();\n
\trng.setStart(editor.dom.select(\'p\')[0], 0);\n
\trng.setEnd(editor.dom.select(\'p\')[0], 1);\n
\teditor.selection.setRng(rng);\n
\teditor.formatter.remove(\'format\');\n
\tequal(getContent(), \'<p><span>1234</span></p>\', \'Inline element on selected text with remove=none\');\n
});\n
\n
test(\'Inline element style where element is format root\', function() {\n
\teditor.formatter.register(\'format\', {inline : \'span\', styles : {fontWeight : \'bold\'}});\n
\teditor.getBody().innerHTML = \'<p><span style="font-weight:bold; color:#FF0000"><em>1234</em></span></p>\';\n
\tvar rng = editor.dom.createRng();\n
\trng.setStart(editor.dom.select(\'em\')[0].firstChild, 1);\n
\trng.setEnd(editor.dom.select(\'em\')[0].firstChild, 3);\n
\teditor.selection.setRng(rng);\n
\teditor.formatter.remove(\'format\');\n
\tequal(getContent(),\n
\t\t\'<p><span style="color: #ff0000; font-weight: bold;">\' +\n
\t\t\'<em>1</em></span><span style="color: #ff0000;"><em>23</em></span>\' +\n
\t\t\'<span style=\\"color: #ff0000; font-weight: bold;\\"><em>4\' +\n
\t\t\'</em></span></p>\',\n
\t\'Inline element style where element is format root\');\n
});\n
\n
test(\'Partially selected inline element text\', function() {\n
\teditor.formatter.register(\'format\', {inline : \'b\'});\n
\teditor.getBody().innerHTML = \'<p><b>1234</b></p>\';\n
\tvar rng = editor.dom.createRng();\n
\trng.setStart(editor.dom.select(\'b\')[0].firstChild, 2);\n
\trng.setEnd(editor.dom.select(\'b\')[0].firstChild, 4);\n
\teditor.selection.setRng(rng);\n
\teditor.formatter.remove(\'format\');\n
\tequal(getContent(), \'<p><b>12</b>34</p>\', \'Partially selected inline element text\');\n
});\n
\n
test(\'Partially selected inline element text with children\', function() {\n
\teditor.formatter.register(\'format\', {inline : \'b\'});\n
\teditor.getBody().innerHTML = \'<p><b><em><span>1234</span></em></b></p>\';\n
\tvar rng = editor.dom.createRng();\n
\trng.setStart(editor.dom.select(\'span\')[0].firstChild, 2);\n
\trng.setEnd(editor.dom.select(\'span\')[0].firstChild, 4);\n
\teditor.selection.setRng(rng);\n
\teditor.formatter.remove(\'format\');\n
\tequal(getContent(), \'<p><b><em><span>12</span></em></b><em><span>34</span></em></p>\', \'Partially selected inline element text with children\');\n
});\n
\n
test(\'Partially selected inline element text with complex children\', function() {\n
\teditor.formatter.register(\'format\', {inline : \'span\', styles : {fontWeight : \'bold\'}});\n
\teditor.getBody().innerHTML = \'<p><span style="font-weight:bold"><em><span style="color:#ff0000;font-weight:bold">1234</span></em></span></p>\';\n
\tvar rng = editor.dom.createRng();\n
\trng.setStart(editor.dom.select(\'span\')[1].firstChild, 2);\n
\trng.setEnd(editor.dom.select(\'span\')[1].firstChild, 4);\n
\teditor.selection.setRng(rng);\n
\teditor.formatter.remove(\'format\');\n
\tequal(getContent(), \'<p><span style="font-weight: bold;"><em><span style="color: #ff0000; font-weight: bold;">12</span></em></span><em><span style="color: #ff0000;">34</span></em></p>\', \'Partially selected inline element text with complex children\');\n
});\n
\n
test(\'Inline elements with exact flag\', function() {\n
\teditor.formatter.register(\'format\', {inline : \'span\', styles : {color : \'#ff0000\'}, exact : true});\n
\teditor.getBody().innerHTML = \'<p><span style="font-size:10px;color:#ff0000">1234</span><span style="font-size:10px;color:#00ff00">1234</span></p>\';\n
\tvar rng = editor.dom.createRng();\n
\trng.setStart(editor.dom.select(\'p\')[0], 0);\n
\trng.setEnd(editor.dom.select(\'p\')[0], 2);\n
\teditor.selection.setRng(rng);\n
\teditor.formatter.remove(\'format\');\n
\tequal(getContent(), \'<p><span style="font-size: 10px;">1234</span><span style="color: #00ff00; font-size: 10px;">1234</span></p>\', \'Inline elements with exact flag\');\n
});\n
\n
test(\'Inline elements with variables\', function() {\n
\teditor.formatter.register(\'format\', {inline : \'span\', styles : {color : \'%color\'}, exact : true});\n
\teditor.getBody().innerHTML = \'<p><span style="font-size:10px;color:#ff0000">1234</span><span style="font-size:10px;color:#00ff00">1234</span></p>\';\n
\tvar rng = editor.dom.createRng();\n
\trng.setStart(editor.dom.select(\'p\')[0], 0);\n
\trng.setEnd(editor.dom.select(\'p\')[0], 2);\n
\teditor.selection.setRng(rng);\n
\teditor.formatter.remove(\'format\', {color : \'#ff0000\'});\n
\tequal(getContent(), \'<p><span style="font-size: 10px;">1234</span><span style="color: #00ff00; font-size: 10px;">1234</span></p>\', \'Inline elements on selected text with variables\');\n
});\n
\n
test(\'Inline elements with functions and variables\', function() {\n
\teditor.formatter.register(\'format\', {\n
\t\tinline : \'span\',\n
\t\tstyles : {\n
\t\t\tcolor : function(vars) {\n
\t\t\t\treturn vars.color + "00";\n
\t\t\t}\n
\t\t},\n
\t\texact : true\n
\t});\n
\n
\teditor.getBody().innerHTML = \'<p><span style="font-size:10px;color:#ff0000">1234</span><span style="font-size:10px;color:#00ff00">1234</span></p>\';\n
\tvar rng = editor.dom.createRng();\n
\trng.setStart(editor.dom.select(\'p\')[0], 0);\n
\trng.setEnd(editor.dom.select(\'p\')[0], 2);\n
\teditor.selection.setRng(rng);\n
\teditor.formatter.remove(\'format\', {\n
\t\tcolor : \'#ff00\'\n
\t});\n
\tequal(getContent(), \'<p><span style="font-size: 10px;">1234</span><span style="color: #00ff00; font-size: 10px;">1234</span></p>\', \'Inline elements with functions and variables\');\n
});\n
\n
test(\'End within start element\', function() {\n
\teditor.formatter.register(\'format\', {inline : \'b\'});\n
\teditor.getBody().innerHTML = \'<p><b>1234<b>5678</b></b></p>\';\n
\tvar rng = editor.dom.createRng();\n
\trng.setStart(editor.dom.select(\'p\')[0], 0);\n
\trng.setEnd(editor.dom.select(\'b\')[0], 2);\n
\teditor.selection.setRng(rng);\n
\teditor.formatter.remove(\'format\');\n
\tequal(getContent(), \'<p>12345678</p>\', \'End within start element\');\n
});\n
\n
test(\'Start and end within similar format 1\', function() {\n
\teditor.formatter.register(\'format\', {inline : \'b\'});\n
\teditor.getBody().innerHTML = \'<p><b><em><b>1234<b>5678</b></b></em></b></p>\';\n
\tvar rng = editor.dom.createRng();\n
\trng.setStart(editor.dom.select(\'em\')[0], 0);\n
\trng.setEnd(editor.dom.select(\'b\')[1], 2);\n
\teditor.selection.setRng(rng);\n
\teditor.formatter.remove(\'format\');\n
\tequal(getContent(), \'<p><em>12345678</em></p>\', \'Start and end within similar format 1\');\n
});\n
\n
test(\'Start and end within similar format 2\', function() {\n
\teditor.formatter.register(\'format\', {inline : \'b\'});\n
\teditor.getBody().innerHTML = \'<p><b><em><b>1234</b><b>5678</b></em></b></p>\';\n
\tvar rng = editor.dom.createRng();\n
\trng.setStart(editor.dom.select(\'em\')[0], 0);\n
\trng.setEnd(editor.dom.select(\'em\')[0], 1);\n
\teditor.selection.setRng(rng);\n
\teditor.formatter.remove(\'format\');\n
\tequal(getContent(), \'<p><em>1234</em><b><em><b>5678</b></em></b></p>\', \'Start and end within similar format 2\');\n
});\n
\n
test(\'Start and end within similar format 3\', function() {\n
\teditor.formatter.register(\'format\', {inline : \'b\'});\n
\teditor.getBody().innerHTML = \'<p><b><em><b>1234</b></em></b></p>\';\n
\tvar rng = editor.dom.createRng();\n
\trng.setStart(editor.dom.select(\'em\')[0], 0);\n
\trng.setEnd(editor.dom.select(\'em\')[0], 1);\n
\teditor.selection.setRng(rng);\n
\teditor.formatter.remove(\'format\');\n
\tequal(getContent(), \'<p><em>1234</em></p>\', \'Start and end within similar format 3\');\n
});\n
\n
test(\'End within start\', function() {\n
\teditor.formatter.register(\'format\', {inline : \'b\'});\n
\teditor.getBody().innerHTML = \'<p><b><em>x<b>abc</b>y</em></b></p>\';\n
\tvar rng = editor.dom.createRng();\n
\trng.setStart(editor.dom.select(\'p\')[0], 0);\n
\trng.setEnd(editor.dom.select(\'b\')[1].firstChild, 3);\n
\teditor.selection.setRng(rng);\n
\teditor.formatter.remove(\'format\');\n
\tequal(getContent(), \'<p><em>x</em><em>abc</em><b><em>y</em></b></p>\', \'End within start\');\n
});\n
\n
test(\'Remove block format\', function() {\n
\teditor.formatter.register(\'format\', {block : \'h1\'});\n
\teditor.getBody().innerHTML = \'<h1>text</h1>\';\n
\tvar rng = editor.dom.createRng();\n
\trng.setStart(editor.dom.select(\'h1\')[0].firstChild, 0);\n
\trng.setEnd(editor.dom.select(\'h1\')[0].firstChild, 4);\n
\teditor.selection.setRng(rng);\n
\teditor.formatter.remove(\'format\');\n
\tequal(getContent(), \'<p>text</p>\', \'Remove block format\');\n
});\n
\n
test(\'Remove wrapper block format\', function() {\n
\teditor.formatter.register(\'format\', {block : \'blockquote\', wrapper : true});\n
\teditor.getBody().innerHTML = \'<blockquote><p>text</p></blockquote>\';\n
\tvar rng = editor.dom.createRng();\n
\trng.setStart(editor.dom.select(\'p\')[0].firstChild, 0);\n
\trng.setEnd(editor.dom.select(\'p\')[0].firstChild, 4);\n
\teditor.selection.setRng(rng);\n
\teditor.formatter.remove(\'format\');\n
\tequal(getContent(), \'<p>text</p>\', \'Remove wrapper block format\');\n
});\n
\n
test(\'Remove span format within block with style\', function() {\n
\teditor.formatter.register(\'format\', {selector : \'span\', attributes : [\'style\', \'class\'], remove : \'empty\', split : true, expand : false, deep : true});\n
\tvar rng = editor.dom.createRng();\n
\teditor.getBody().innerHTML = \'<p style="color:#ff0000"><span style="color:#00ff00">text</span></p>\';\n
\trng.setStart(editor.dom.select(\'span\')[0].firstChild, 1);\n
\trng.setEnd(editor.dom.select(\'span\')[0].firstChild, 3);\n
\teditor.selection.setRng(rng);\n
\teditor.formatter.remove(\'format\');\n
\tequal(getContent(), \'<p style="color: #ff0000;"><span style="color: #00ff00;">t</span>ex<span style="color: #00ff00;">t</span></p>\', \'Remove span format within block with style\');\n
});\n
\n
test(\'Remove and verify start element\', function() {\n
\teditor.formatter.register(\'format\', {inline : \'b\'});\n
\tvar rng = editor.dom.createRng();\n
\teditor.getBody().innerHTML = \'<p><b>text</b></p>\';\n
\trng.setStart(editor.dom.select(\'b\')[0].firstChild, 1);\n
\trng.setEnd(editor.dom.select(\'b\')[0].firstChild, 3);\n
\teditor.selection.setRng(rng);\n
\teditor.formatter.remove(\'format\');\n
\tequal(getContent(), \'<p><b>t</b>ex<b>t</b></p>\');\n
\tequal(editor.selection.getStart().nodeName, \'P\');\n
});\n
\n
test(\'Remove with selection collapsed ensure correct caret position\', function() {\n
\tvar content = \'<p>test</p><p>testing</p>\';\n
\n
\teditor.formatter.register(\'format\', {block : \'p\'});\n
\tvar rng = editor.dom.createRng();\n
\teditor.getBody().innerHTML = content;\n
\trng.setStart(editor.dom.select(\'p\')[0].firstChild, 4);\n
\trng.setEnd(editor.dom.select(\'p\')[0].firstChild, 4);\n
\teditor.selection.setRng(rng);\n
\teditor.formatter.remove(\'format\');\n
\tequal(getContent(), content);\n
\tequal(editor.selection.getStart(), editor.dom.select(\'p\')[0]);\n
});\n
\n
test(\'Caret format at middle of text\', function() {\n
\teditor.setContent(\'<p><b>abc</b></p>\');\n
\teditor.formatter.register(\'format\', {inline: \'b\'});\n
\tUtils.setSelection(\'b\', 1, \'b\', 1);\n
\teditor.formatter.remove(\'format\');\n
\tequal(editor.getContent(), \'<p>abc</p>\');\n
});\n
\n
test(\'Caret format at end of text\', function() {\n
\teditor.setContent(\'<p><b>abc</b></p>\');\n
\teditor.formatter.register(\'format\', {inline: \'b\'});\n
\tUtils.setSelection(\'b\', 3, \'b\', 3);\n
\teditor.formatter.remove(\'format\');\n
\tUtils.type(\'d\');\n
\tequal(editor.getContent(), \'<p><b>abc</b>d</p>\');\n
});\n
\n
test(\'Caret format at end of text inside other format\', function() {\n
\teditor.setContent(\'<p><em><b>abc</b></em></p>\');\n
\teditor.formatter.register(\'format\', {inline: \'b\'});\n
\tUtils.setSelection(\'b\', 3, \'b\', 3);\n
\teditor.formatter.remove(\'format\');\n
\tUtils.type(\'d\');\n
\tequal(editor.getContent(), \'<p><em><b>abc</b>d</em></p>\');\n
});\n
\n
test(\'Caret format at end of text inside other format with text after 1\', function() {\n
\teditor.setContent(\'<p><em><b>abc</b></em>e</p>\');\n
\teditor.formatter.register(\'format\', {inline: \'b\'});\n
\tUtils.setSelection(\'b\', 3, \'b\', 3);\n
\teditor.formatter.remove(\'format\');\n
\tUtils.type(\'d\');\n
\tequal(editor.getContent(), \'<p><em><b>abc</b>d</em>e</p>\');\n
});\n
\n
test(\'Caret format at end of text inside other format with text after 2\', function() {\n
\teditor.setContent(\'<p><em><b>abc</b></em>e</p>\');\n
\teditor.formatter.register(\'format\', {inline: \'em\'});\n
\tUtils.setSelection(\'b\', 3, \'b\', 3);\n
\teditor.formatter.remove(\'format\');\n
\tUtils.type(\'d\');\n
\tequal(editor.getContent(), \'<p><em><b>abc</b></em><b>d</b>e</p>\');\n
});\n
\n
test(\'Toggle styles at the end of the content don\\\' removes the format where it is not needed.\', function() {\n
\teditor.setContent(\'<p><em><b>abce</b></em></p>\');\n
\teditor.formatter.register(\'b\', {inline: \'b\'});\n
\teditor.formatter.register(\'em\', {inline: \'em\'});\n
\tUtils.setSelection(\'b\', 4, \'b\', 4);\n
\teditor.formatter.remove(\'b\');\n
\teditor.formatter.remove(\'em\');\n
\tequal(editor.getContent(), \'<p><em><b>abce</b></em></p>\');\n
});\n
\n
test(\'Caret format on second word in table cell\', function() {\n
\teditor.setContent(\'<table><tbody><tr><td>one <b>two</b></td></tr></tbody></table>\');\n
\teditor.formatter.register(\'format\', {inline: \'b\'});\n
\tUtils.setSelection(\'b\', 2, \'b\', 2);\n
\teditor.formatter.remove(\'format\');\n
\tequal(editor.getContent(), \'<table><tbody><tr><td>one two</td></tr></tbody></table>\');\n
});\n
\n
test(\'contentEditable: false on start and contentEditable: true on end\', function() {\n
\teditor.formatter.register(\'format\', {inline: \'b\'});\n
\teditor.setContent(\'<p>abc</p><p contenteditable="false"><b>def</b></p><p><b>ghj</b></p>\');\n
\tvar rng = editor.dom.createRng();\n
\trng.setStart(editor.dom.select(\'b\')[0].firstChild, 0);\n
\trng.setEnd(editor.dom.select(\'b\')[1].firstChild, 3);\n
\teditor.selection.setRng(rng);\n
\teditor.formatter.remove(\'format\');\n
\tequal(editor.getContent(), \'<p>abc</p><p><b>def</b></p><p>ghj</p>\', \'Text in last paragraph is not bold\');\n
});\n
\n
test(\'contentEditable: true on start and contentEditable: false on end\', function() {\n
\teditor.formatter.register(\'format\', {inline: \'b\'});\n
\teditor.setContent(\'<p>abc</p><p><b>def</b></p><p contenteditable="false"><b>ghj</b></p>\');\n
\tUtils.setSelection(\'p:nth-child(2) b\', 0, \'p:last b\', 3);\n
\teditor.formatter.remove(\'format\');\n
\tequal(editor.getContent(), \'<p>abc</p><p>def</p><p><b>ghj</b></p>\', \'Text in first paragraph is not bold\');\n
});\n
\n
test(\'contentEditable: true inside contentEditable: false\', function() {\n
\teditor.formatter.register(\'format\', {inline: \'b\'});\n
\teditor.setContent(\'<p>abc</p><p contenteditable="false"><span contenteditable="true"><b>def</b></span></p>\');\n
\tUtils.setSelection(\'b\', 0, \'b\', 3);\n
\teditor.formatter.remove(\'format\');\n
\tequal(editor.getContent(), \'<p>abc</p><p><span>def</span></p>\', \'Text is not bold\');\n
});\n
\n
test(\'remove format block on contentEditable: false block\', function() {\n
\teditor.formatter.register(\'format\', {block: \'h1\'});\n
\teditor.setContent(\'<p>abc</p><h1 contenteditable="false">def</h1>\');\n
\tUtils.setSelection(\'h1:nth-child(2)\', 0, \'h1:nth-child(2)\', 3);\n
\teditor.formatter.remove(\'format\');\n
\tequal(editor.getContent(), \'<p>abc</p><h1>def</h1>\', \'H1 is still not h1\');\n
});\n
\n
test(\'remove format on del using removeformat format\', function() {\n
\teditor.getBody().innerHTML = \'<p><del>abc</del></p>\';\n
\tUtils.setSelection(\'del\', 0, \'del\', 3);\n
\teditor.formatter.remove(\'removeformat\');\n
\tequal(Utils.cleanHtml(editor.getBody().innerHTML), \'<p>abc</p>\');\n
});\n
\n
test(\'remove format on span with class using removeformat format\', function() {\n
\teditor.getBody().innerHTML = \'<p><span class="x">abc</span></p>\';\n
\tUtils.setSelection(\'span\', 0, \'span\', 3);\n
\teditor.formatter.remove(\'removeformat\');\n
\tequal(Utils.cleanHtml(editor.getBody().innerHTML), \'<p>abc</p>\');\n
});\n
\n
test(\'remove format on span with internal class using removeformat format\', function() {\n
\teditor.getBody().innerHTML = \'<p><span class="mce-item-internal">abc</span></p>\';\n
\tUtils.setSelection(\'span\', 0, \'span\', 3);\n
\teditor.formatter.remove(\'removeformat\');\n
\tequal(Utils.normalizeHtml(Utils.cleanHtml(editor.getBody().innerHTML)), \'<p><span class="mce-item-internal">abc</span></p>\');\n
});\n
\n
test(\'Remove format bug 1\', function() {\n
\teditor.setContent(\'<p><b><i>ab</i>c</b></p>\');\n
\teditor.formatter.register(\'format\', {inline: \'b\'});\n
\tUtils.setSelection(\'i\', 1, \'i\', 2);\n
\teditor.formatter.remove(\'format\');\n
\tequal(editor.getContent(), \'<p><b><i>a</i></b><i>b</i><b>c</b></p>\');\n
});\n
\n
test(\'Remove format bug 2\', function() {\n
\teditor.setContent(\'<p>ab<b>c</b></p>\');\n
\teditor.formatter.register(\'format\', {inline: \'b\'});\n
\tUtils.setSelection(\'b\', 0, \'b\', 1);\n
\teditor.formatter.remove(\'format\');\n
\tequal(editor.getContent(), \'<p>abc</p>\');\n
});\n
\n
test(\'Remove format bug 3\', function() {\n
\teditor.setContent(\'<p><b><i>ab</i></b></p>\');\n
\teditor.formatter.register(\'format\', {inline: \'b\'});\n
\tUtils.setSelection(\'i\', 1, \'i\', 2);\n
\teditor.formatter.remove(\'format\');\n
\tequal(editor.getContent(), \'<p><b><i>a</i></b><i>b</i></p>\');\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>18007</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>Formatter_remove.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
