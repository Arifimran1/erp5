<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41268214.35</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>ColorButton.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

(function() {\n
\tmodule("tinymce.ui.ColorButton", {\n
\t\tsetup: function() {\n
\t\t\tdocument.getElementById(\'view\').innerHTML = \'\';\n
\t\t},\n
\n
\t\tteardown: function() {\n
\t\t\ttinymce.dom.Event.clean(document.getElementById(\'view\'));\n
\t\t}\n
\t});\n
\n
\tfunction createColorButton(settings) {\n
\t\treturn tinymce.ui.Factory.create(tinymce.extend({\n
\t\t\ttype: \'colorbutton\'\n
\t\t}, settings)).renderTo(document.getElementById(\'view\'));\n
\t}\n
\n
\ttest("colorbutton text, size default", function() {\n
\t\tvar colorButton = createColorButton({text: \'X\'});\n
\n
\t\tUtils.nearlyEqualRects(Utils.rect(colorButton), [0, 0, 42, 30], 4);\n
\t});\n
\n
\ttest("colorbutton text, size large", function() {\n
\t\tvar colorButton = createColorButton({text: \'X\', size: \'large\'});\n
\n
\t\tUtils.nearlyEqualRects(Utils.rect(colorButton), [0, 0, 44, 39], 4);\n
\t});\n
\n
\ttest("colorbutton text, size small", function() {\n
\t\tvar colorButton = createColorButton({text: \'X\', size: \'small\'});\n
\n
\t\tUtils.nearlyEqualRects(Utils.rect(colorButton), [0, 0, 39, 23], 4);\n
\t});\n
\n
\ttest("colorbutton text, width 100, height 100", function() {\n
\t\tvar colorButton = createColorButton({text: \'X\', width: 100, height: 100});\n
\n
\t\tdeepEqual(Utils.rect(colorButton), [0, 0, 100, 100]);\n
\t\tdeepEqual(Utils.rect(colorButton.getEl().firstChild), [1, 1, 98, 98]);\n
\t});\n
\n
\ttest("colorbutton icon, size default", function() {\n
\t\tvar colorButton = createColorButton({icon: \'test\'});\n
\n
\t\tUtils.nearlyEqualRects(Utils.rect(colorButton), [0, 0, 49, 30], 4);\n
\t});\n
\n
\ttest("colorbutton icon, size small", function() {\n
\t\tvar colorButton = createColorButton({icon: \'test\', size: \'small\'});\n
\n
\t\tUtils.nearlyEqualRects(Utils.rect(colorButton), [0, 0, 43, 24], 4);\n
\t});\n
\n
\ttest("colorbutton icon, size large", function() {\n
\t\tvar colorButton = createColorButton({icon: \'test\', size: \'large\'});\n
\n
\t\tUtils.nearlyEqualRects(Utils.rect(colorButton), [0, 0, 49, 40], 4);\n
\t});\n
\n
\ttest("colorbutton icon, width 100, height 100", function() {\n
\t\tvar colorButton = createColorButton({icon: \'test\', width: 100, height: 100});\n
\n
\t\tdeepEqual(Utils.rect(colorButton), [0, 0, 100, 100]);\n
\t\tdeepEqual(Utils.rect(colorButton.getEl().firstChild), [1, 1, 98, 98]);\n
\t});\n
\n
\ttest("colorbutton text & icon, size default", function() {\n
\t\tvar colorButton = createColorButton({text: \'X\', icon: \'test\'});\n
\n
\t\tUtils.nearlyEqualRects(Utils.rect(colorButton), [0, 0, 62, 30], 4);\n
\t});\n
\n
\ttest("colorbutton text & icon, size large", function() {\n
\t\tvar colorButton = createColorButton({text: \'X\', icon: \'test\', size: \'large\'});\n
\n
\t\tUtils.nearlyEqualRects(Utils.rect(colorButton), [0, 0, 64, 40], 4);\n
\t});\n
\n
\ttest("colorbutton text & icon, size small", function() {\n
\t\tvar colorButton = createColorButton({text: \'X\', icon: \'test\', size: \'small\'});\n
\n
\t\tUtils.nearlyEqualRects(Utils.rect(colorButton), [0, 0, 58, 24], 4);\n
\t});\n
\n
\ttest("colorbutton text & icon, width 100, height 100", function() {\n
\t\tvar colorButton = createColorButton({text: \'X\', icon: \'test\', width: 100, height: 100});\n
\n
\t\tdeepEqual(Utils.rect(colorButton), [0, 0, 100, 100]);\n
\t\tdeepEqual(Utils.rect(colorButton.getEl().firstChild), [1, 1, 98, 98]);\n
\t});\n
\n
\ttest("colorbutton click event", function() {\n
\t\tvar colorButton, clicks = {};\n
\n
\t\tcolorButton = createColorButton({text: \'X\', onclick: function() {clicks.a = \'a\';}});\n
\t\tcolorButton.renderTo(document.getElementById(\'view\'));\n
\t\tcolorButton.fire(\'click\', {target: colorButton.getEl()});\n
\n
\t\tdeepEqual(clicks, {a: \'a\'});\n
\t});\n
})();

]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>3365</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>ColorButton.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
