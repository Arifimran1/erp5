<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41268210.85</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>GridLayout.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string>(function() {\n
\tmodule("tinymce.ui.GridLayout", {\n
\t\tsetup: function() {\n
\t\t\tdocument.getElementById(\'view\').innerHTML = \'\';\n
\t\t},\n
\n
\t\tteardown: function() {\n
\t\t\ttinymce.dom.Event.clean(document.getElementById(\'view\'));\n
\t\t}\n
\t});\n
\n
\tfunction renderGridPanel(settings) {\n
\t\tvar panel = tinymce.ui.Factory.create(tinymce.extend({\n
\t\t\ttype: "panel",\n
\t\t\tlayout: "grid",\n
\t\t\tdefaults: {type: \'spacer\'}\n
\t\t}, settings)).renderTo(document.getElementById(\'view\')).reflow();\n
\n
\t\tUtils.resetScroll(panel.getEl(\'body\'));\n
\n
\t\treturn panel;\n
\t}\n
\n
\ttest("automatic grid size 2x2", function() {\n
\t\tvar panel = renderGridPanel({\n
\t\t\titems: [\n
\t\t\t\t{classes: \'red\'}, {classes: \'green\'},\n
\t\t\t\t{classes: \'blue\'}, {classes: \'cyan\'}\n
\t\t\t]\n
\t\t});\n
\n
\t\tdeepEqual(Utils.rect(panel), [0, 0, 40, 40]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[0]), [0, 0, 20, 20]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[1]), [20, 0, 20, 20]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[2]), [0, 20,  20, 20]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[3]), [20, 20, 20, 20]);\n
\t});\n
\n
\t/*\n
\ttest("fixed pixel size, automatic grid size 2x2", function() {\n
\t\tpanel = renderGridPanel({\n
\t\t\twidth: 100, height: 100,\n
\t\t\talign: "center",\n
\t\t\titems: [\n
\t\t\t\t{classes: \'red\'}, {classes: \'green\'},\n
\t\t\t\t{classes: \'blue\'}, {classes: \'cyan\'}\n
\t\t\t]\n
\t\t});\n
\n
\t\tdeepEqual(Utils.rect(panel), [0, 0, 200, 200]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[0]), [0, 0, 17, 22]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[1]), [17, 0, 17, 22]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[2]), [0, 22, 16, 22]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[3]), [17, 22, 17, 22]);\n
\t});\n
\t*/\n
\n
\ttest("spacing: 3, automatic grid size 2x2", function() {\n
\t\tvar panel = renderGridPanel({\n
\t\t\tspacing: 3,\n
\t\t\titems: [\n
\t\t\t\t{classes: \'red\'}, {classes: \'green\'},\n
\t\t\t\t{classes: \'blue\'}, {classes: \'cyan\'}\n
\t\t\t]\n
\t\t});\n
\n
\t\tdeepEqual(Utils.rect(panel), [0, 0, 43, 43]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[0]), [0, 0, 20, 20]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[1]), [23, 0, 20, 20]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[2]), [0, 23, 20, 20]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[3]), [23, 23, 20, 20]);\n
\t});\n
\n
\ttest("padding: 3, automatic grid size 2x2", function() {\n
\t\tvar panel = renderGridPanel({\n
\t\t\tpadding: 3,\n
\t\t\titems: [\n
\t\t\t\t{classes: \'red\'}, {classes: \'green\'},\n
\t\t\t\t{classes: \'blue\'}, {classes: \'cyan\'}\n
\t\t\t]\n
\t\t});\n
\n
\t\tdeepEqual(Utils.rect(panel), [0, 0, 46, 46]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[0]), [3, 3, 20, 20]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[1]), [23, 3, 20, 20]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[2]), [3, 23, 20, 20]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[3]), [23, 23, 20, 20]);\n
\t});\n
\n
\ttest("spacing: 3, padding: 3, automatic grid size 2x2", function() {\n
\t\tvar panel = renderGridPanel({\n
\t\t\tpadding: 3,\n
\t\t\tspacing: 3,\n
\t\t\titems: [\n
\t\t\t\t{classes: \'red\'}, {classes: \'green\'},\n
\t\t\t\t{classes: \'blue\'}, {classes: \'cyan\'}\n
\t\t\t]\n
\t\t});\n
\n
\t\tdeepEqual(Utils.rect(panel), [0, 0, 49, 49]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[0]), [3, 3, 20, 20]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[1]), [26, 3, 20, 20]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[2]), [3, 26, 20, 20]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[3]), [26, 26, 20, 20]);\n
\t});\n
\n
\ttest("inner elements 100x100 maxWidth/maxHeight: 118 (overflow W+H)", function() {\n
\t\tvar panel = renderGridPanel({\n
\t\t\tautoResize: true,\n
\t\t\tautoScroll: true,\n
\t\t\tmaxWidth: 118,\n
\t\t\tmaxHeight: 118,\n
\t\t\tdefaults: {\n
\t\t\t\ttype: \'spacer\',\n
\t\t\t\tminWidth: 100,\n
\t\t\t\tminHeight: 100\n
\t\t\t},\n
\t\t\titems: [\n
\t\t\t\t{classes: \'red dotted\'}, {classes: \'green dotted\'},\n
\t\t\t\t{classes: \'blue dotted\'}, {classes: \'cyan dotted\'}\n
\t\t\t]\n
\t\t});\n
\n
\t\tdeepEqual(Utils.rect(panel), [0, 0, 118, 118]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[0]), [0, 0, 100, 100]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[1]), [100, 0, 100, 100]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[2]), [0, 100, 100, 100]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[3]), [100, 100, 100, 100]);\n
\t\tequal(panel.layoutRect().w, 118);\n
\t\tequal(panel.layoutRect().h, 118);\n
\t\tequal(panel.layoutRect().contentW, 200);\n
\t\tequal(panel.layoutRect().contentH, 200);\n
\t});\n
\n
\ttest("inner elements: 100x100, padding: 20, spacing: 10, maxWidth/maxHeight: 118 (overflow W+H)", function() {\n
\t\tvar panel = renderGridPanel({\n
\t\t\tautoResize: true,\n
\t\t\tautoScroll: true,\n
\t\t\tmaxWidth: 118,\n
\t\t\tmaxHeight: 118,\n
\t\t\tpadding: 20,\n
\t\t\tspacing: 10,\n
\t\t\tdefaults: {\n
\t\t\t\ttype: \'spacer\',\n
\t\t\t\tminWidth: 100,\n
\t\t\t\tminHeight: 100\n
\t\t\t},\n
\t\t\titems: [\n
\t\t\t\t{classes: \'red dotted\'}, {classes: \'green dotted\'},\n
\t\t\t\t{classes: \'blue dotted\'}, {classes: \'cyan dotted\'}\n
\t\t\t]\n
\t\t});\n
\n
\t\tdeepEqual(Utils.rect(panel), [0, 0, 118, 118]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[0]), [20, 20, 100, 100]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[1]), [130, 20, 100, 100]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[2]), [20, 130, 100, 100]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[3]), [130, 130, 100, 100]);\n
\t\tequal(panel.layoutRect().w, 118);\n
\t\tequal(panel.layoutRect().h, 118);\n
\t\tequal(panel.layoutRect().contentW, 20 + 200 + 10 + 20);\n
\t\tequal(panel.layoutRect().contentH, 20 + 200 + 10 + 20);\n
\t});\n
\n
\ttest("inner elements 100x100 maxWidth: 118 (overflow W)", function() {\n
\t\tvar panel = renderGridPanel({\n
\t\t\tautoResize: true,\n
\t\t\tautoScroll: true,\n
\t\t\tmaxWidth: 100,\n
\t\t\tdefaults: {\n
\t\t\t\ttype: \'spacer\',\n
\t\t\t\tminWidth: 100,\n
\t\t\t\tminHeight: 100\n
\t\t\t},\n
\t\t\titems: [\n
\t\t\t\t{classes: \'red dotted\'}, {classes: \'green dotted\'},\n
\t\t\t\t{classes: \'blue dotted\'}, {classes: \'cyan dotted\'}\n
\t\t\t]\n
\t\t});\n
\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[0]), [0, 0, 100, 100]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[1]), [100, 0, 100, 100]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[2]), [0, 100, 100, 100]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[3]), [100, 100, 100, 100]);\n
\t\tequal(panel.layoutRect().contentW, 200);\n
\t\tequal(panel.layoutRect().contentH, 200);\n
\t});\n
\n
\ttest("inner elements 100x100 maxHeight: 118 (overflow H)", function() {\n
\t\tvar panel = renderGridPanel({\n
\t\t\tautoResize: true,\n
\t\t\tautoScroll: true,\n
\t\t\tmaxHeight: 100,\n
\t\t\tdefaults: {\n
\t\t\t\ttype: \'spacer\',\n
\t\t\t\tminWidth: 100,\n
\t\t\t\tminHeight: 100\n
\t\t\t},\n
\t\t\titems: [\n
\t\t\t\t{classes: \'red dotted\'}, {classes: \'green dotted\'},\n
\t\t\t\t{classes: \'blue dotted\'}, {classes: \'cyan dotted\'}\n
\t\t\t]\n
\t\t});\n
\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[0]), [0, 0, 100, 100]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[1]), [100, 0, 100, 100]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[2]), [0, 100, 100, 100]);\n
\t\tdeepEqual(Utils.rect(panel.find(\'spacer\')[3]), [100, 100, 100, 100]);\n
\t\tequal(panel.layoutRect().contentW, 200);\n
\t\tequal(panel.layoutRect().contentH, 200);\n
\t});\n
})();\n
</string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>6641</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>GridLayout.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
