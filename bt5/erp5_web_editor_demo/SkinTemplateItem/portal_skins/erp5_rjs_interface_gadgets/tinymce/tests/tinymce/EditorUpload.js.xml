<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41268195.85</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>EditorUpload.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

(function() {\n
\tvar testBlob, testBlobDataUri;\n
\n
\tif (!tinymce.Env.fileApi) {\n
\t\treturn;\n
\t}\n
\n
\tmodule("tinymce.EditorUpload", {\n
\t\tsetupModule: function() {\n
\t\t\tQUnit.stop();\n
\n
\t\t\ttinymce.init({\n
\t\t\t\tselector: "textarea",\n
\t\t\t\tadd_unload_trigger: false,\n
\t\t\t\tdisable_nodechange: true,\n
\t\t\t\tskin: false,\n
\t\t\t\tentities: \'raw\',\n
\t\t\t\tindent: false,\n
\t\t\t\tinit_instance_callback: function(ed) {\n
\t\t\t\t\tvar canvas, context;\n
\n
\t\t\t\t\twindow.editor = ed;\n
\n
\t\t\t\t\tcanvas = document.createElement("canvas");\n
\t\t\t\t\tcanvas.width = 320;\n
\t\t\t\t\tcanvas.height = 200;\n
\n
\t\t\t\t\tcontext = canvas.getContext("2d");\n
\t\t\t\t\tcontext.fillStyle = "#ff0000";\n
\t\t\t\t\tcontext.fillRect(0, 0, 160, 100);\n
\t\t\t\t\tcontext.fillStyle = "#00ff00";\n
\t\t\t\t\tcontext.fillRect(160, 0, 160, 100);\n
\t\t\t\t\tcontext.fillStyle = "#0000ff";\n
\t\t\t\t\tcontext.fillRect(0, 100, 160, 100);\n
\t\t\t\t\tcontext.fillStyle = "#ff00ff";\n
\t\t\t\t\tcontext.fillRect(160, 100, 160, 100);\n
\n
\t\t\t\t\ttestBlobDataUri = canvas.toDataURL();\n
\n
\t\t\t\t\ttinymce.file.Conversions.uriToBlob(testBlobDataUri).then(function(blob) {\n
\t\t\t\t\t\ttestBlob = blob;\n
\t\t\t\t\t\tQUnit.start();\n
\t\t\t\t\t});\n
\t\t\t\t}\n
\t\t\t});\n
\t\t},\n
\n
\t\tteardown: function() {\n
\t\t\teditor.editorUpload.destroy();\n
\t\t}\n
\t});\n
\n
\tfunction imageHtml(uri) {\n
\t\treturn tinymce.DOM.createHTML(\'img\', {src: uri});\n
\t}\n
\n
\tasyncTest(\'_scanForImages\', function() {\n
\t\teditor.setContent(imageHtml(testBlobDataUri));\n
\n
\t\teditor._scanForImages().then(function(result) {\n
\t\t\tvar blobInfo = result[0].blobInfo;\n
\n
\t\t\tQUnit.equal("data:" + blobInfo.blob().type + ";base64," + blobInfo.base64(), testBlobDataUri);\n
\t\t\tQUnit.equal(Utils.normalizeHtml(editor.getBody().innerHTML), \'<p><img alt="" src="\' + blobInfo.blobUri() + \'" /></p>\');\n
\t\t\tQUnit.equal(\'<p><img src="data:\' + blobInfo.blob().type + \';base64,\' + blobInfo.base64() + \'" alt="" /></p>\', editor.getContent());\n
\t\t\tQUnit.strictEqual(editor.editorUpload.blobCache.get(blobInfo.id()), blobInfo);\n
\t\t}).then(QUnit.start);\n
\t});\n
\n
\tasyncTest(\'uploadImages\', function() {\n
\t\tvar uploadedBlobInfo;\n
\n
\t\tfunction assertResult(result) {\n
\t\t\tQUnit.strictEqual(result[0].status, true);\n
\t\t\tQUnit.ok(result[0].element.src.indexOf(uploadedBlobInfo.id() + \'.png\') !== -1);\n
\t\t\tQUnit.equal(\'<p><img src="\' + uploadedBlobInfo.filename() + \'" alt="" /></p>\', editor.getContent());\n
\n
\t\t\treturn result;\n
\t\t}\n
\n
\t\teditor.setContent(imageHtml(testBlobDataUri));\n
\n
\t\teditor.settings.images_upload_handler = function(data, success) {\n
\t\t\tuploadedBlobInfo = data;\n
\t\t\tsuccess(data.id() + \'.png\');\n
\t\t};\n
\n
\t\teditor.uploadImages(assertResult).then(assertResult).then(function() {\n
\t\t\tuploadedBlobInfo = null;\n
\n
\t\t\treturn editor.uploadImages(function() {}).then(function(result) {\n
\t\t\t\tQUnit.strictEqual(result.length, 0);\n
\t\t\t\tQUnit.strictEqual(uploadedBlobInfo, null);\n
\t\t\t});\n
\t\t}).then(QUnit.start);\n
\t});\n
})();\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>2714</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>EditorUpload.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
