<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41268204.92</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Shortcuts.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string>module("tinymce.Shortcuts", {\n
\tsetupModule: function() {\n
\t\tQUnit.stop();\n
\n
\t\ttinymce.init({\n
\t\t\tselector: "textarea",\n
\t\t\tadd_unload_trigger: false,\n
\t\t\tdisable_nodechange: true,\n
\t\t\tindent: false,\n
\t\t\tskin: false,\n
\t\t\tentities: \'raw\',\n
\t\t\tschema: \'html5\',\n
\t\t\tinit_instance_callback: function(ed) {\n
\t\t\t\twindow.editor = ed;\n
\t\t\t\tQUnit.start();\n
\t\t\t}\n
\t\t});\n
\t}\n
});\n
\n
test(\'Shortcuts formats\', function() {\n
\tfunction assertShortcut(shortcut, args, assertState) {\n
\t\tvar called = false;\n
\n
\t\teditor.shortcuts.add(shortcut, \'\', function() {\n
\t\t\tcalled = true;\n
\t\t});\n
\n
\t\targs = tinymce.extend({\n
\t\t\tctrlKey: false,\n
\t\t\taltKey: false,\n
\t\t\tshiftKey: false,\n
\t\t\tmetaKey: false\n
\t\t}, args);\n
\n
\t\teditor.fire(\'keydown\', args);\n
\n
\t\tif (assertState) {\n
\t\t\tok(called, \'Shortcut wasn\\\'t called: \' + shortcut);\n
\t\t} else {\n
\t\t\tok(!called, \'Shortcut was called when it shouldn\\\'t have been: \' + shortcut);\n
\t\t}\n
\t}\n
\n
\tassertShortcut(\'ctrl+d\', {ctrlKey: true, keyCode: 68}, true);\n
\tassertShortcut(\'ctrl+d\', {altKey: true, keyCode: 68}, false);\n
\n
\tif (tinymce.Env.mac) {\n
\t\tassertShortcut(\'meta+d\', {metaKey: true, keyCode: 68}, true);\n
\t\tassertShortcut(\'access+d\', {ctrlKey: true, altKey: true, keyCode: 68}, true);\n
\t\tassertShortcut(\'meta+d\', {ctrlKey: true, keyCode: 68}, false);\n
\t\tassertShortcut(\'access+d\', {shiftKey: true, altKey: true, keyCode: 68}, false);\n
\t} else {\n
\t\tassertShortcut(\'meta+d\', {ctrlKey: true, keyCode: 68}, true);\n
\t\tassertShortcut(\'access+d\', {shiftKey: true, altKey: true, keyCode: 68}, true);\n
\t\tassertShortcut(\'meta+d\', {metaKey: true, keyCode: 68}, false);\n
\t\tassertShortcut(\'access+d\', {ctrlKey: true, altKey: true, keyCode: 68}, false);\n
\t}\n
\n
\tassertShortcut(\'ctrl+shift+d\', {ctrlKey: true, shiftKey: true, keyCode: 68}, true);\n
\tassertShortcut(\'ctrl+shift+alt+d\', {ctrlKey: true, shiftKey: true, altKey: true, keyCode: 68}, true);\n
\tassertShortcut(\'ctrl+221\', {ctrlKey: true, keyCode: 221}, true);\n
});\n
\n
test(\'Remove\', function() {\n
\tvar called = false, eventArgs;\n
\n
\teventArgs = {\n
\t\tctrlKey: true,\n
\t\tkeyCode: 68,\n
\t\taltKey: false,\n
\t\tshiftKey: false,\n
\t\tmetaKey: false\n
\t};\n
\n
\teditor.shortcuts.add(\'ctrl+d\', \'\', function() {\n
\t\tcalled = true;\n
\t});\n
\n
\teditor.fire(\'keydown\', eventArgs);\n
\tok(called, \'Shortcut wasn\\\'t called when it should have been.\');\n
\n
\tcalled = false;\n
\teditor.shortcuts.remove(\'ctrl+d\');\n
\teditor.fire(\'keydown\', eventArgs);\n
\tok(!called, \'Shortcut was called when it shouldn\\\'t.\');\n
});\n
</string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>2366</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>Shortcuts.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
