<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41268132.5</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>searchreplace.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

module("tinymce.plugins.SearchReplace", {\n
\tsetupModule: function() {\n
\t\tQUnit.stop();\n
\n
\t\ttinymce.init({\n
\t\t\tselector: "textarea",\n
\t\t\tplugins: "searchreplace",\n
\t\t\telements: "elm1",\n
\t\t\tadd_unload_trigger: false,\n
\t\t\tskin: false,\n
\t\t\tindent: false,\n
\t\t\tdisable_nodechange: true,\n
\t\t\tvalid_elements: \'b,i\',\n
\t\t\tinit_instance_callback : function(ed) {\n
\t\t\t\twindow.editor = ed;\n
\t\t\t\twindow.setTimeout(function() {\n
\t\t\t\t\tQUnit.start();\n
\t\t\t\t}, 0);\n
\t\t\t}\n
\t\t});\n
\t}\n
});\n
\n
test(\'Find no match\', function() {\n
\teditor.getBody().innerHTML = \'a\';\n
\tequal(0, editor.plugins.searchreplace.find(\'x\'));\n
});\n
\n
test(\'Find single match\', function() {\n
\teditor.getBody().innerHTML = \'a\';\n
\tequal(1, editor.plugins.searchreplace.find(\'a\'));\n
});\n
\n
test(\'Find single match in multiple elements\', function() {\n
\teditor.getBody().innerHTML = \'t<b>e</b><i>xt</i>\';\n
\tequal(1, editor.plugins.searchreplace.find(\'text\'));\n
});\n
\n
test(\'Find single match, match case: true\', function() {\n
\teditor.getBody().innerHTML = \'a A\';\n
\tequal(1, editor.plugins.searchreplace.find(\'A\', true));\n
});\n
\n
test(\'Find single match, whole words: true\', function() {\n
\teditor.getBody().innerHTML = \'a Ax\';\n
\tequal(1, editor.plugins.searchreplace.find(\'a\', false, true));\n
});\n
\n
test(\'Find multiple matches\', function() {\n
\teditor.getBody().innerHTML = \'a b A\';\n
\tequal(2, editor.plugins.searchreplace.find(\'a\'));\n
});\n
\n
test(\'Find and replace single match\', function() {\n
\teditor.getBody().innerHTML = \'a\';\n
\teditor.plugins.searchreplace.find(\'a\');\n
\tok(!editor.plugins.searchreplace.replace(\'x\'));\n
\tequal("<p>x</p>", editor.getContent());\n
});\n
\n
test(\'Find and replace first in multiple matches\', function() {\n
\teditor.getBody().innerHTML = \'a b a\';\n
\teditor.plugins.searchreplace.find(\'a\');\n
\tok(editor.plugins.searchreplace.replace(\'x\'));\n
\tequal("<p>x b a</p>", editor.getContent());\n
});\n
\n
test(\'Find and replace all in multiple matches\', function() {\n
\teditor.getBody().innerHTML = \'a b a\';\n
\teditor.plugins.searchreplace.find(\'a\');\n
\tok(!editor.plugins.searchreplace.replace(\'x\', true, true));\n
\tequal("<p>x b x</p>", editor.getContent());\n
});\n
\n
test(\'Find multiple matches, move to next and replace\', function() {\n
\teditor.getBody().innerHTML = \'a a\';\n
\tequal(2, editor.plugins.searchreplace.find(\'a\'));\n
\teditor.plugins.searchreplace.next();\n
\tok(!editor.plugins.searchreplace.replace(\'x\'));\n
\tequal("<p>a x</p>", editor.getContent());\n
});\n
\n
test(\'Find and replace fragmented match\', function() {\n
\teditor.getBody().innerHTML = \'<b>te<i>s</i>t</b><b>te<i>s</i>t</b>\';\n
\teditor.plugins.searchreplace.find(\'test\');\n
\tok(editor.plugins.searchreplace.replace(\'abc\'));\n
\tequal(editor.getContent(), "<p><b>abc</b><b>te<i>s</i>t</b></p>");\n
});\n
\n
test(\'Find and replace all fragmented matches\', function() {\n
\teditor.getBody().innerHTML = \'<b>te<i>s</i>t</b><b>te<i>s</i>t</b>\';\n
\teditor.plugins.searchreplace.find(\'test\');\n
\tok(!editor.plugins.searchreplace.replace(\'abc\', true, true));\n
\tequal(editor.getContent(), "<p><b>abc</b><b>abc</b></p>");\n
});\n
\n
test(\'Find multiple matches, move to next and replace backwards\', function() {\n
\teditor.getBody().innerHTML = \'a a\';\n
\tequal(2, editor.plugins.searchreplace.find(\'a\'));\n
\teditor.plugins.searchreplace.next();\n
\tok(editor.plugins.searchreplace.replace(\'x\', false));\n
\tok(!editor.plugins.searchreplace.replace(\'y\', false));\n
\tequal("<p>y x</p>", editor.getContent());\n
});\n
\n
test(\'Find multiple matches and unmark them\', function() {\n
\teditor.getBody().innerHTML = \'a b a\';\n
\tequal(2, editor.plugins.searchreplace.find(\'a\'));\n
\teditor.plugins.searchreplace.done();\n
\tequal(\'a\', editor.selection.getContent());\n
\tequal(0, editor.getBody().getElementsByTagName(\'span\').length);\n
});\n
\n
test(\'Find multiple matches with pre blocks\', function() {\n
\teditor.getBody().innerHTML = \'abc<pre>  abc  </pre>abc\';\n
\tequal(3, editor.plugins.searchreplace.find(\'b\'));\n
\tequal(Utils.normalizeHtml(editor.getBody().innerHTML), (\n
\t\t\'a<span class="mce-match-marker mce-match-marker-selected" data-mce-bogus="1" data-mce-index="0">b</span>c\' +\n
\t\t\'<pre>  a<span class="mce-match-marker" data-mce-bogus="1" data-mce-index="1">b</span>c  </pre>\' +\n
\t\t\'a<span class="mce-match-marker" data-mce-bogus="1" data-mce-index="2">b</span>c\'\n
\t));\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>4136</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>searchreplace.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
