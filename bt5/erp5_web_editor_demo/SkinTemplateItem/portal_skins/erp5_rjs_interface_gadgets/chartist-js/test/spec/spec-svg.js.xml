<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41272953.51</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>spec-svg.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

//TODO: Add tests!\n
describe(\'Chartist SVG\', function () {\n
  \'use strict\';\n
\n
  beforeEach(function () {\n
\n
  });\n
\n
  afterEach(function () {\n
\n
  });\n
\n
  it(\'should exist in global namespace\', function () {\n
    expect(window.Chartist.Svg).toBeDefined();\n
  });\n
\n
  it(\'should create a valid svg dom element\', function () {\n
    var svg = new window.Chartist.Svg(\'svg\');\n
\n
    expect(svg).toBeDefined();\n
    expect(svg._node).toBeDefined();\n
    expect(svg._node.nodeName.toLowerCase()).toBe(\'svg\');\n
  });\n
\n
  it(\'should create a valid svg dom element with attributes\', function () {\n
    var svg = new window.Chartist.Svg(\'svg\', {\n
      width: \'100%\',\n
      height: \'100%\'\n
    });\n
\n
    expect(svg).toBeDefined();\n
    expect(svg._node).toBeDefined();\n
    expect(svg._node.nodeName.toLowerCase()).toBe(\'svg\');\n
    expect(svg._node.attributes.width.textContent).toBe(\'100%\');\n
    expect(svg._node.attributes.height.textContent).toBe(\'100%\');\n
  });\n
\n
  it(\'should create nested objects with attributes\', function () {\n
    var svg = new window.Chartist.Svg(\'svg\');\n
    svg.elem(\'g\').elem(\'g\').elem(\'circle\', {\n
      cx: 100,\n
      cy: 100,\n
      r: 10\n
    });\n
\n
    expect(svg._node).toBeDefined();\n
    expect(svg._node.firstChild.firstChild.firstChild).toBeDefined();\n
    expect(svg._node.firstChild.firstChild.firstChild.attributes.cx.textContent).toBe(\'100\');\n
    expect(svg._node.firstChild.firstChild.firstChild.attributes.cy.textContent).toBe(\'100\');\n
    expect(svg._node.firstChild.firstChild.firstChild.attributes.r.textContent).toBe(\'10\');\n
  });\n
\n
  it(\'should allow to set attributes manually\', function () {\n
    var svg = new window.Chartist.Svg(\'svg\');\n
    svg.elem(\'circle\').attr({\n
      cx: 100,\n
      cy: 100,\n
      r: 10\n
    });\n
\n
    expect(svg._node).toBeDefined();\n
    expect(svg._node.firstChild).toBeDefined();\n
    expect(svg._node.firstChild.attributes.cx.textContent).toBe(\'100\');\n
    expect(svg._node.firstChild.attributes.cy.textContent).toBe(\'100\');\n
    expect(svg._node.firstChild.attributes.r.textContent).toBe(\'10\');\n
  });\n
\n
  it(\'should clear on each nesting level\', function () {\n
    var svg = new window.Chartist.Svg(\'svg\');\n
    var group = svg.elem(\'g\');\n
    group.elem(\'circle\');\n
    group.elem(\'circle\');\n
    group.elem(\'circle\');\n
\n
    expect(svg._node).toBeDefined();\n
    expect(svg._node.firstChild.childNodes.length).toBe(3);\n
\n
    group.empty();\n
    expect(svg._node.firstChild.childNodes.length).toBe(0);\n
\n
    svg.empty();\n
    expect(svg._node.firstChild).toBeNull();\n
  });\n
\n
  it(\'should allow to remove a certain element\', function () {\n
    var svg = new window.Chartist.Svg(\'svg\');\n
    var text = svg.elem(\'text\');\n
\n
    expect(svg._node).toBeDefined();\n
    expect(svg._node.childNodes.length).toBe(1);\n
    expect(svg._node.firstChild.nodeName.toLowerCase()).toBe(\'text\');\n
\n
    text.remove();\n
    expect(svg._node.childNodes.length).toBe(0);\n
  });\n
\n
  it(\'should allow to write text content into elements\', function () {\n
    var svg = new window.Chartist.Svg(\'svg\');\n
    svg.elem(\'text\').text(\'Hello World\');\n
\n
    expect(svg._node).toBeDefined();\n
    expect(svg._node.childNodes.length).toBe(1);\n
    expect(svg._node.firstChild.nodeName.toLowerCase()).toBe(\'text\');\n
    expect(svg._node.firstChild.firstChild.nodeType).toBe(3);\n
    expect(svg._node.firstChild.firstChild.textContent).toBe(\'Hello World\');\n
  });\n
\n
  it(\'should allow to add and remove classes on elements\', function () {\n
    var svg = new window.Chartist.Svg(\'svg\')\n
      .addClass(\'test-class-1\')\n
      .addClass(\'test-class-2\')\n
      // Should not allow duplicates\n
      .addClass(\'test-class-2\')\n
      // Should allow multiple classes with white spaces\n
      .addClass(\'test-class-3      test-class-4\');\n
\n
    expect(svg._node).toBeDefined();\n
    expect(svg._node.getAttribute(\'class\').split(\' \')).toEqual([\n
      \'test-class-1\',\n
      \'test-class-2\',\n
      \'test-class-3\',\n
      \'test-class-4\'\n
    ]);\n
\n
    svg.removeClass(\'test-class-1\');\n
    // Should allow multiple classes with whitespaces\n
    svg.removeClass(\'test-class-2        test-class-3\');\n
\n
    expect(svg._node.getAttribute(\'class\')).toBe(\'test-class-4\');\n
  });\n
\n
  it(\'should allow to travers up in the fluent API chain and set attributes on the way\', function () {\n
    var svg = new window.Chartist.Svg(\'svg\');\n
    svg.elem(\'g\').elem(\'g\').elem(\'g\').elem(\'circle\')\n
      .parent().attr({\n
        transform: \'rotate(10 10 10)\'\n
      })\n
      .parent().attr({\n
        transform: \'rotate(20 20 20)\'\n
      })\n
      .parent().attr({\n
        transform: \'rotate(30 30 30)\'\n
      })\n
      .parent().attr({\n
        width: \'100%\',\n
        height: \'100%\'\n
      });\n
\n
    expect(svg._node).toBeDefined();\n
    expect(svg._node.attributes.width.textContent).toBe(\'100%\');\n
    expect(svg._node.attributes.height.textContent).toBe(\'100%\');\n
\n
    expect(svg._node.firstChild).toBeDefined();\n
    expect(svg._node.firstChild.attributes.transform.textContent).toBe(\'rotate(30 30 30)\');\n
\n
    expect(svg._node.firstChild.firstChild).toBeDefined();\n
    expect(svg._node.firstChild.firstChild.attributes.transform.textContent).toBe(\'rotate(20 20 20)\');\n
\n
    expect(svg._node.firstChild.firstChild.firstChild).toBeDefined();\n
    expect(svg._node.firstChild.firstChild.firstChild.attributes.transform.textContent).toBe(\'rotate(10 10 10)\');\n
  });\n
\n
  describe(\'path tests\', function () {\n
    it(\'should handle position updates correctly\', function () {\n
      var path = new Chartist.Svg.Path();\n
      expect(path.position()).toBe(0);\n
      expect(path.position(100).position()).toBe(0);\n
      expect(path.position(-1).position()).toBe(0);\n
\n
      path.pathElements = [1, 2, 3];\n
      expect(path.position(100).position()).toBe(3);\n
    });\n
\n
    it(\'should add absolute and relative path elements correctly\', function () {\n
      var path = new Chartist.Svg.Path()\n
        .move(1, 2)\n
        .move(3, 4, true)\n
        .line(5, 6)\n
        .line(7, 8, true)\n
        .curve(9, 10, 11, 12, 13, 14)\n
        .curve(15, 16, 17, 18, 19, 20, true);\n
\n
      expect(path.pathElements.length).toBe(6);\n
      expect(path.pathElements).toEqual([\n
        { command: \'M\', x: 1, y: 2 },\n
        { command: \'m\', x: 3, y: 4 },\n
        { command: \'L\', x: 5, y: 6 },\n
        { command: \'l\', x: 7, y: 8 },\n
        { command: \'C\', x1: 9, y1: 10, x2: 11, y2: 12, x: 13, y: 14 },\n
        { command: \'c\', x1: 15, y1: 16, x2: 17, y2: 18, x: 19, y: 20 }\n
      ]);\n
    });\n
\n
    it(\'should insert new elements at correct position\', function () {\n
      var path = new Chartist.Svg.Path()\n
        .move(1, 2)\n
        .move(7, 8)\n
        .move(9, 10)\n
        .position(1)\n
        .move(3, 4)\n
        .move(5, 6)\n
        .position(100000)\n
        .move(11, 12)\n
        .position(-100000)\n
        .move(-1, 0);\n
\n
      expect(path.pathElements.length).toBe(7);\n
      expect(path.pathElements).toEqual([\n
        { command: \'M\', x: -1, y: 0 },\n
        { command: \'M\', x: 1, y: 2 },\n
        { command: \'M\', x: 3, y: 4 },\n
        { command: \'M\', x: 5, y: 6 },\n
        { command: \'M\', x: 7, y: 8 },\n
        { command: \'M\', x: 9, y: 10 },\n
        { command: \'M\', x: 11, y: 12 }\n
      ]);\n
    });\n
\n
    it(\'should stringify simple shape correctly\', function () {\n
      var path = new Chartist.Svg.Path(true).move(10, 10).line(10, 100).line(100, 100).line(100, 10);\n
      expect(path.stringify()).toEqual(\'M10,10L10,100L100,100L100,10Z\');\n
    });\n
\n
    it(\'should stringify with configured precision\', function () {\n
      var path = new Chartist.Svg.Path(false, {\n
        accuracy: 2\n
      }).move(10.12345, 10.14345).line(10.14545, 10).line(10.14000000645, 10.3333333333);\n
      expect(path.stringify()).toEqual(\'M10.12,10.14L10.15,10L10.14,10.33\');\n
    });\n
\n
    it(\'should parse Chartist SVG path style correctly\', function () {\n
      var path = new Chartist.Svg.Path().parse(\'M10,10L10,100L100,100L100,10\');\n
      expect(path.stringify()).toEqual(\'M10,10L10,100L100,100L100,10\');\n
    });\n
\n
    it(\'should parse MDN SVG path style correctly\', function () {\n
      var path = new Chartist.Svg.Path().parse(\'M10 10 L 10 100 L 100 100 L 100 10 C 1 1, 1 1, 1 1\');\n
      expect(path.stringify()).toEqual(\'M10,10L10,100L100,100L100,10C1,1,1,1,1,1\');\n
    });\n
\n
    it(\'should parse path with closing command\', function () {\n
      var path = new Chartist.Svg.Path().parse(\'M10 10 L 10 100 L 100 100 L 100 10 C 1 1, 1 1, 1 1 Z\');\n
      expect(path.stringify()).toEqual(\'M10,10L10,100L100,100L100,10C1,1,1,1,1,1\');\n
    });\n
\n
    it(\'should parse complex path correctly\', function () {\n
      var path = new Chartist.Svg.Path(false, {\n
        accuracy: false\n
      }).parse(\'M7.566371681415929,313.5870318472049L15.132743362831858,322.1479887268699L22.699115044247787,292.49058976570063L30.265486725663717,284.9469379116152L37.83185840707964,277.62070141556273L45.39823008849557,285.4043086222666L52.9646017699115,295.16905806058617L60.530973451327434,288.5395967440654L68.09734513274336,282.3023155078293L75.66371681415929,276.9420221519757L83.23008849557522,271.31296300227655L90.79646017699115,273.1827546735411L98.36283185840708,282.72148250847295L105.929203539823,276.55760703185683L113.49557522123892,278.16318930715545L121.06194690265487,279.67913384762466L128.6283185840708,296.53529757775897L136.1946902654867,324.4003397770142L143.76106194690263,317.1376004332516L151.32743362831857,323.3390406432677L158.89380530973452,328.5597479599146L166.46017699115043,329.67851354926904L174.02654867256635,327.71837583373326L181.5929203539823,335.05972598190976L189.15929203539824,334.29372633331286L196.72566371681415,332.68724934321176L204.29203539823007,330.6752327006325L211.858407079646,325.971917329413L219.42477876106196,328.13057177790404L226.99115044247785,309.6546479835954L234.5575221238938,310.6637826993739L242.12389380530973,310.65221523366176L249.69026548672568,318.40285733188773L257.2566371681416,298.18154267575227L264.8230088495575,307.4788389000347L272.3893805309734,304.189264255087L279.95575221238937,289.0288876874009L287.52212389380526,300.20654714775424L295.0884955752212,298.0164127652739L302.65486725663715,287.69192345832175L310.2212389380531,293.1860711045035L317.78761061946904,300.4760502113585L325.3539823008849,297.94852206276937L332.92035398230087,305.6594311405378L340.4867256637168,306.7859423144216L348.0530973451327,275.68998851331963L355.61946902654864,286.5550640745874L363.1858407079646,288.4952543187362L370.75221238938053,290.1896066608983L378.3185840707965,277.8447927515142L385.88495575221236,282.46018876596827L393.4513274336283,261.617847596371L401.01769911504425,265.06101027918726L408.58407079646014,264.60492966286677L416.1504424778761,252.35288845280365L423.716814159292,239.29220756750195L431.283185840708,229.73170018586225L438.8495575221239,224.1580859168795L446.41592920353986,217.20551113129414L453.9823008849557,212.63435660265037L461.54867256637164,210.4425212857057L469.1150442477876,201.0077146146342L476.6814159292035,182.3934004122068L484.24778761061947,176.98732946386616L491.8141592920354,175.3660655079267L499.38053097345136,181.1589144624976L506.9469026548673,172.81581557677976L514.5132743362832,177.82343674256106L522.079646017699,183.5573714672562L529.646017699115,184.4980688436067L537.2123893805309,201.60789339862924L544.7787610619469,193.42268767053048L552.3451327433628,209.9219909677575L559.9115044247787,221.1318944868172L567.4778761061947,222.47350026973174L575.0442477876105,229.94061399967882L582.6106194690265,213.57676800697396L590.1769911504424,232.97280246785252L597.7433628318583,232.8915724787845L605.3097345132743,231.486089735319L612.8761061946902,234.26534000120475L620.4424778761062,219.90951817170736L628.0088495575221,214.36149678900725L635.5752212389381,204.7245641444236L643.1415929203539,205.04759319834227L650.7079646017698,178.61624621480792L658.2743362831858,174.30656351022486L665.8407079646017,194.06864637030463L673.4070796460177,191.38404795482728L680.9734513274336,188.88380371217903L688.5398230088496,182.47430260433697L696.1061946902654,192.70175438596493L703.6725663716813,182.37945067166908L711.2389380530973,163.80499447227572L718.8053097345132,157.4839718811134L726.3716814159292,149.57403342725343L733.9380530973451,142.6076734278762L741.5044247787611,144.9954413314636L749.070796460177,152.29112878815386L756.637168141593,150.02544379977235L764.2035398230088,139.40203164917125L771.7699115044247,149.22935357717972L779.3362831858407,155.78116263659354L786.9026548672566,145.09966219897575L794.4690265486726,157.52407467202426L802.0353982300885,147.01645902195105L809.6017699115044,141.8658056183404L817.1681415929203,134.36135158737966L824.7345132743362,127.49269525433283L832.3008849557522,120.25886939571154L839.8672566371681,118.26230310074709L847.433628318584,98.76959064327474\');\n
      expect(path.stringify()).toEqual(\'M7.566371681415929,313.5870318472049L15.132743362831858,322.1479887268699L22.699115044247787,292.49058976570063L30.265486725663717,284.9469379116152L37.83185840707964,277.62070141556273L45.39823008849557,285.4043086222666L52.9646017699115,295.16905806058617L60.530973451327434,288.5395967440654L68.09734513274336,282.3023155078293L75.66371681415929,276.9420221519757L83.23008849557522,271.31296300227655L90.79646017699115,273.1827546735411L98.36283185840708,282.72148250847295L105.929203539823,276.55760703185683L113.49557522123892,278.16318930715545L121.06194690265487,279.67913384762466L128.6283185840708,296.53529757775897L136.1946902654867,324.4003397770142L143.76106194690263,317.1376004332516L151.32743362831857,323.3390406432677L158.89380530973452,328.5597479599146L166.46017699115043,329.67851354926904L174.02654867256635,327.71837583373326L181.5929203539823,335.05972598190976L189.15929203539824,334.29372633331286L196.72566371681415,332.68724934321176L204.29203539823007,330.6752327006325L211.858407079646,325.971917329413L219.42477876106196,328.13057177790404L226.99115044247785,309.6546479835954L234.5575221238938,310.6637826993739L242.12389380530973,310.65221523366176L249.69026548672568,318.40285733188773L257.2566371681416,298.18154267575227L264.8230088495575,307.4788389000347L272.3893805309734,304.189264255087L279.95575221238937,289.0288876874009L287.52212389380526,300.20654714775424L295.0884955752212,298.0164127652739L302.65486725663715,287.69192345832175L310.2212389380531,293.1860711045035L317.78761061946904,300.4760502113585L325.3539823008849,297.94852206276937L332.92035398230087,305.6594311405378L340.4867256637168,306.7859423144216L348.0530973451327,275.68998851331963L355.61946902654864,286.5550640745874L363.1858407079646,288.4952543187362L370.75221238938053,290.1896066608983L378.3185840707965,277.8447927515142L385.88495575221236,282.46018876596827L393.4513274336283,261.617847596371L401.01769911504425,265.06101027918726L408.58407079646014,264.60492966286677L416.1504424778761,252.35288845280365L423.716814159292,239.29220756750195L431.283185840708,229.73170018586225L438.8495575221239,224.1580859168795L446.41592920353986,217.20551113129414L453.9823008849557,212.63435660265037L461.54867256637164,210.4425212857057L469.1150442477876,201.0077146146342L476.6814159292035,182.3934004122068L484.24778761061947,176.98732946386616L491.8141592920354,175.3660655079267L499.38053097345136,181.1589144624976L506.9469026548673,172.81581557677976L514.5132743362832,177.82343674256106L522.079646017699,183.5573714672562L529.646017699115,184.4980688436067L537.2123893805309,201.60789339862924L544.7787610619469,193.42268767053048L552.3451327433628,209.9219909677575L559.9115044247787,221.1318944868172L567.4778761061947,222.47350026973174L575.0442477876105,229.94061399967882L582.6106194690265,213.57676800697396L590.1769911504424,232.97280246785252L597.7433628318583,232.8915724787845L605.3097345132743,231.486089735319L612.8761061946902,234.26534000120475L620.4424778761062,219.90951817170736L628.0088495575221,214.36149678900725L635.5752212389381,204.7245641444236L643.1415929203539,205.04759319834227L650.7079646017698,178.61624621480792L658.2743362831858,174.30656351022486L665.8407079646017,194.06864637030463L673.4070796460177,191.38404795482728L680.9734513274336,188.88380371217903L688.5398230088496,182.47430260433697L696.1061946902654,192.70175438596493L703.6725663716813,182.37945067166908L711.2389380530973,163.80499447227572L718.8053097345132,157.4839718811134L726.3716814159292,149.57403342725343L733.9380530973451,142.6076734278762L741.5044247787611,144.9954413314636L749.070796460177,152.29112878815386L756.637168141593,150.02544379977235L764.2035398230088,139.40203164917125L771.7699115044247,149.22935357717972L779.3362831858407,155.78116263659354L786.9026548672566,145.09966219897575L794.4690265486726,157.52407467202426L802.0353982300885,147.01645902195105L809.6017699115044,141.8658056183404L817.1681415929203,134.36135158737966L824.7345132743362,127.49269525433283L832.3008849557522,120.25886939571154L839.8672566371681,118.26230310074709L847.433628318584,98.76959064327474\');\n
    });\n
\n
    it(\'should scale path along both axes\', function () {\n
      var path = new Chartist.Svg.Path()\n
        .move(1, 2)\n
        .line(3, 4)\n
        .curve(5, 6, 7, 8, 9, 10)\n
        .scale(10, 100);\n
\n
      expect(path.pathElements).toEqual([\n
        { command: \'M\', x: 10, y: 200 },\n
        { command: \'L\', x: 30, y: 400 },\n
        { command: \'C\', x1: 50, y1: 600, x2: 70, y2: 800, x: 90, y: 1000 }\n
      ]);\n
    });\n
\n
    it(\'should translate path along both axes\', function () {\n
      var path = new Chartist.Svg.Path()\n
        .move(1, 2)\n
        .line(3, 4)\n
        .curve(5, 6, 7, 8, 9, 10)\n
        .translate(10, 100);\n
\n
      expect(path.pathElements).toEqual([\n
        { command: \'M\', x: 11, y: 102 },\n
        { command: \'L\', x: 13, y: 104 },\n
        { command: \'C\', x1: 15, y1: 106, x2: 17, y2: 108, x: 19, y: 110 }\n
      ]);\n
    });\n
\n
    it(\'should transform path correctly with custom function\', function () {\n
      var path = new Chartist.Svg.Path()\n
        .move(1, 2)\n
        .line(3, 4)\n
        .curve(5, 6, 7, 8, 9, 10)\n
        .transform(function(element, paramName, elementIndex, paramIndex) {\n
          if(paramIndex > 3) {\n
            return 0;\n
          } else if(paramName[0] === \'y\') {\n
            return 100;\n
          }\n
        });\n
\n
      expect(path.pathElements).toEqual([\n
        { command: \'M\', x: 1, y: 100 },\n
        { command: \'L\', x: 3, y: 100 },\n
        { command: \'C\', x1: 5, y1: 100, x2: 7, y2: 100, x: 0, y: 0 }\n
      ]);\n
    });\n
\n
    it(\'should split correctly by move command\', function () {\n
      var paths = new Chartist.Svg.Path().parse(\'M0,0L0,0L0,0L0,0M0,0L0,0L0,0L0,0\').splitByCommand(\'M\');\n
      expect(paths).toHaveLength(2);\n
      expect(paths[0].pathElements[0].command).toBe(\'M\');\n
      expect(paths[0].pathElements).toHaveLength(4);\n
      expect(paths[1].pathElements[0].command).toBe(\'M\');\n
      expect(paths[1].pathElements).toHaveLength(4);\n
    });\n
\n
    it(\'should split correctly by move command and tailing move element\', function () {\n
      var paths = new Chartist.Svg.Path().parse(\'M0,0L0,0L0,0L0,0M0,0L0,0L0,0L0,0M0,0\').splitByCommand(\'M\');\n
      expect(paths).toHaveLength(3);\n
      expect(paths[2].pathElements[0].command).toBe(\'M\');\n
    });\n
\n
    it(\'should split correctly by move command and leading other commands\', function () {\n
      var paths = new Chartist.Svg.Path().parse(\'L0,0C0,0,0,0,0,0M0,0L0,0L0,0L0,0M0,0L0,0L0,0L0,0\').splitByCommand(\'M\');\n
      expect(paths).toHaveLength(3);\n
      expect(paths[0].pathElements).toHaveLength(2);\n
      expect(paths[0].pathElements[0].command).toBe(\'L\');\n
      expect(paths[0].pathElements[1].command).toBe(\'C\');\n
\n
      expect(paths[1].pathElements).toHaveLength(4);\n
      expect(paths[1].pathElements[0].command).toBe(\'M\');\n
    });\n
  });\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>19560</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>spec-svg.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
