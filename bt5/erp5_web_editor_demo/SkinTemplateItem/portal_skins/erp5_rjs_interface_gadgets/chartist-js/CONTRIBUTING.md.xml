<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41272945.6</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>CONTRIBUTING.md</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/octet-stream</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

# Contributing to chartist-js\n
\n
 - [Issues and Bugs](#issue)\n
 - [Submission Guidelines](#submit)\n
 - [Coding Conventions](#conventions)\n
\n
## <a name="issue"></a> Found an Issue?\n
\n
If you find a bug in the source code or a mistake in the documentation, you can help us by\n
submitting an issue to our [GitHub Repository][github]. Even better you can submit a Pull Request\n
with a fix.\n
\n
## Pre-requisites\n
\n
You will need the following to run a local development enviroment.\n
\n
- Node.js & npm\n
- Bower (`sudo npm install bower -g`)\n
- Grunt (`sudo npm install grunt-cli -g`)\n
- Text editor of your choice\n
\n
\n
## How to Run a Local Distribution\n
\n
1. `cd` into your local copy of the repository.\n
2. Run `npm install` to install dependencies located in `package.json`.\n
3. Run `bower install` to install bower dependencies.\n
5. Run `grunt preview` to start the watch task, and the web server should automatically open. Congrats, you should now be able to see your local copy of the demo site.\n
\n
## <a name="submit"></a> Submission Guidelines\n
\n
If you are creating a Pull Request, fork the repository and make any changes on the `develop` branch.\n
\n
### <a name="conventions"></a> Conventions\n
\n
Check out the [Coding Style document](CODINGSTYLE.md)\n
\n
### Grunt\n
\n
We have five grunt tasks:\n
\n
1. `grunt build` - Combines the scripts and creates the library for distribution\n
2. `grunt public` - Creates the distribution of the example / demo site which is used as visual development help of the charts but also serves as the documentation site / gh-pages.\n
3. `grunt dev` - Starts watch with livereload that is executing the same things as the site build default task but for live development.\n
4. `grunt preview` - Executes a dist and serves the directory statically in order to serve with the production example / demo site.\n
5. `grunt test` - Executes jasmine tests separately, although we have a very big lack of tests.\n
\n
`dist` should **not** be included in any Pull Requests. So please ensure that code is not being committed as part of the Pull Request.\n
\n
### Documentation\n
\n
- Everything is already in place and in the `sitedist` there is a `apidoc` folder generated by [doxication](https://github.com/gionkunz/grunt-doxication) generator that uses JSDoc like comments to generate documentation meta files. Always use proper JSDoc comments when documenting methods and API interfaces. Also assign documentation blocks using @memberof to the virtual module they belong to.\n
- The site documentation is built with [Assemble.io](http://assemble.io/). Generally a component based approach should be followed where there are already Handlebar partials / helpers in order to create whole sites based on components that can be specified by type and with their data in yaml files.\n
\n
### Important missing stuff \n
\n
1. Jasmine Tests!\n
2. Documentation: JSDoc, Getting started documentation and landing page\n
3. Better accessibility using ARIA and other optimizations\n
4. Better interfaces to the library (i.e. jQuery with data-* attributes for configuration), Angular.js directive etc.\n
5. Richer Sass / CSS framework\n
6. Other charts types (spider etc.)\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>3104</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>CONTRIBUTING.md</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
