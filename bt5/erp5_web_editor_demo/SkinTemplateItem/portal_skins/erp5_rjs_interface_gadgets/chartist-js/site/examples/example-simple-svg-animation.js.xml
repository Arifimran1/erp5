<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41273053.09</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>example-simple-svg-animation.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string>var chart = new Chartist.Line(\'.ct-chart\', {\n
  labels: [\'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'10\', \'11\', \'12\'],\n
  series: [\n
    [12, 4, 2, 8, 5, 4, 6, 2, 3, 3, 4, 6],\n
    [4, 8, 9, 3, 7, 2, 10, 5, 8, 1, 7, 10]\n
  ]\n
}, {\n
  low: 0,\n
  showLine: false,\n
  axisX: {\n
    showLabel: false,\n
    offset: 0\n
  },\n
  axisY: {\n
    showLabel: false,\n
    offset: 0\n
  }\n
});\n
\n
// Let\'s put a sequence number aside so we can use it in the event callbacks\n
var seq = 0;\n
\n
// Once the chart is fully created we reset the sequence\n
chart.on(\'created\', function() {\n
  seq = 0;\n
});\n
\n
// On each drawn element by Chartist we use the Chartist.Svg API to trigger SMIL animations\n
chart.on(\'draw\', function(data) {\n
  if(data.type === \'point\') {\n
    // If the drawn element is a line we do a simple opacity fade in. This could also be achieved using CSS3 animations.\n
    data.element.animate({\n
      opacity: {\n
        // The delay when we like to start the animation\n
        begin: seq++ * 80,\n
        // Duration of the animation\n
        dur: 500,\n
        // The value where the animation should start\n
        from: 0,\n
        // The value where it should end\n
        to: 1\n
      },\n
      x1: {\n
        begin: seq++ * 80,\n
        dur: 500,\n
        from: data.x - 100,\n
        to: data.x,\n
        // You can specify an easing function name or use easing functions from Chartist.Svg.Easing directly\n
        easing: Chartist.Svg.Easing.easeOutQuart\n
      }\n
    });\n
  }\n
});\n
\n
// For the sake of the example we update the chart every time it\'s created with a delay of 8 seconds\n
chart.on(\'created\', function() {\n
  if(window.__anim0987432598723) {\n
    clearTimeout(window.__anim0987432598723);\n
    window.__anim0987432598723 = null;\n
  }\n
  window.__anim0987432598723 = setTimeout(chart.update.bind(chart), 8000);\n
});\n
\n
</string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>1782</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>example-simple-svg-animation.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
