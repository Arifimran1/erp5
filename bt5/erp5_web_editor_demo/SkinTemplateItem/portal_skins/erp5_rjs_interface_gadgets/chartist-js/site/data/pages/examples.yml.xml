<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41272980.99</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>examples.yml</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/octet-stream</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

sections:\n
  - title: Line chart examples\n
    level: 3\n
    items:\n
      - type: live-example\n
        data:\n
          title: Simple line chart\n
          level: 4\n
          id: simple-line-chart\n
          classes: ct-golden-section\n
          intro: An example of a simple line chart with three series. You can edit this example in realtime.\n
      - type: live-example\n
        data:\n
          title: Holes in data\n
          level: 4\n
          id: example-line-data-holes\n
          classes: ct-golden-section\n
          intro: >\n
                   Chartist does not freak out if you have holes in your data. Instead it will render the lines in\n
                   segments and handles these holes gracefully. This also allows you to introduce a line at a later\n
                   point or to terminate the series before others.\n
      - type: live-example\n
        data:\n
          title: Only whole numbers\n
          level: 4\n
          id: example-line-only-integer\n
          classes: ct-golden-section\n
          intro: >\n
                   You\'re dealing with series that contain only whole numbers? It looks weird that Chartist is creating\n
                   a scale that contains fractions even if your data does not? No problem! Tell the Chartist guy to\n
                   only use integers and he\'ll do the math!\n
      - type: live-example\n
        data:\n
          title: Line scatter diagram with responsive settings\n
          level: 4\n
          id: line-scatter-random\n
          classes: ct-golden-section\n
          intro: >\n
                   This advanced example uses a line chart to draw a scatter diagram. The data object is created\n
                   with a functional style random mechanism. There is a mobile first responsive configuration using\n
                   the responsive options to show less labels on small screens.\n
      - type: live-example\n
        data:\n
          title: Line chart with tooltips\n
          level: 4\n
          id: behavior-with-jquery\n
          classes: ct-golden-section\n
          intro: >\n
                   Adding behavior to your chart with JavaScript is a breeze and is just like any other DOM manipulation\n
                   you do to your site. This is just one of many benefits of using inline-SVG and provides you with the\n
                   freedom you need in order to create exactly the experience you\'re looking for.\n
      - type: live-example\n
        data:\n
          title: Line chart with area\n
          level: 4\n
          id: example-line-area\n
          classes: ct-golden-section\n
          intro: >\n
                   This chart uses the showArea option to draw line, dots but also an area shape. Use the low option to\n
                   specify a fixed lower bound that will make the area expand. You can also use the areaBase property\n
                   to specify a data value that will be used to determine the area shape base position (this is 0 by default).\n
      - type: live-example\n
        data:\n
          title: Bi-polar Line chart with area only\n
          level: 4\n
          id: example-bipolar-line-area\n
          classes: ct-golden-section\n
          intro: >\n
                   You can also only draw the area shapes of the line chart. Area shapes will always be constructed around\n
                   their areaBase (that can be configured in the options) which also allows you to draw nice bi-polar\n
                   areas.\n
      - type: live-example\n
        data:\n
          title: Using events to replace graphics\n
          level: 4\n
          id: example-line-modify-drawing\n
          classes: ct-golden-section\n
          intro: >\n
                   Chartist has fixed graphical representations that are chosen because of their flexibility and to\n
                   provide a high level of separation of the concerns. However, sometimes you probably would like to use\n
                   different shapes or even images for your charts. One way to achieve this is by using the draw events and replace\n
                   or add custom SVG shapes.\n
      - type: live-example\n
        data:\n
          title: Advanced SMIL Animations\n
          level: 4\n
          id: example-line-svg-animation\n
          classes: ct-golden-section\n
          intro: >\n
                   Chartist provides a simple API to animate the elements on the Chart using SMIL. Usually you can achieve most\n
                   animation with CSS3 animations but in some cases you\'d like to animate SVG properties that are not available\n
                   in CSS.\n
      - type: live-example\n
        data:\n
          title: SVG Path animation\n
          level: 4\n
          id: example-line-path-animation\n
          classes: ct-golden-section\n
          intro: >\n
                   Path animation is made easy with the <a href="api-documentation.html#module-chartistsvgpath">SVG Path API</a>.\n
                   The API allows you to modify complex SVG paths and transform them for different animation morphing states.\n
      - type: live-example\n
        data:\n
          title: Line Interpolation / Smoothing\n
          level: 4\n
          id: example-line-simple-smoothing\n
          classes: ct-golden-section\n
          intro: >\n
                   By default Chartist uses a cardinal spline algorithm to smooth the lines. However, like all other\n
                   things in Chartist, this can be customized easily! Check out\n
                   <a href="api-documentation.html#module-chartistinterpolation">the API Documentation</a> for more\n
                   smoothing options.\n
      - type: live-example\n
        data:\n
          title: Series Overrides\n
          level: 4\n
          id: example-line-series-override\n
          classes: ct-golden-section\n
          intro: >\n
                   By naming your series using the series object notation with a name property, you can enable the\n
                   individual configuration of series specific settings. <code>showLine</code>, <code>showPoint</code>,\n
                   <code>showArea</code> and even the smoothing function can be overriden per series! And guess what?\n
                   You can even override those series settings in the responsive configuration! Check the example code\n
                   for more details.\n
  - title: Bar chart examples\n
    level: 3\n
    items:\n
      - type: live-example\n
        data:\n
          title: Bi-polar bar chart\n
          level: 4\n
          id: bi-polar-bar-interpolated\n
          classes: ct-golden-section\n
          intro: >\n
                    A bi-polar bar chart with a range limit set with low and high. There is also an interpolation\n
                    function used to skip every odd grid line / label.\n
      - type: live-example\n
        data:\n
          title: Overlapping bars on mobile\n
          level: 4\n
          id: overlapping-bars\n
          classes: ct-golden-section\n
          intro: >\n
                    This example makes use of label interpolation and the seriesBarDistance property that allows you\n
                    to make bars overlap over each other. This then can be used to use the available space on mobile better.\n
                    Resize your browser to see the effect of the responsive configuration.\n
      - type: live-example\n
        data:\n
          title: Add peak circles using the draw events\n
          level: 4\n
          id: example-bar-with-circle-modify-drawing\n
          classes: ct-golden-section\n
          intro: >\n
                    With the help of draw events we are able to add a custom SVG shape to the peak of our bars.\n
      - type: live-example\n
        data:\n
          title: Multi-line labels\n
          level: 4\n
          id: example-multiline-bar\n
          classes: ct-golden-section\n
          intro: >\n
                    Chartist will figure out if your browser supports foreignObject and it will use them to create labels\n
                    that re based on regular HTML text elements. Multi-line and regular CSS styles are just two of many\n
                    benefits while using foreignObjects!\n
      - type: live-example\n
        data:\n
          title: Stacked bar chart\n
          level: 4\n
          id: stacked-bar\n
          classes: ct-golden-section\n
          intro: >\n
                    You can also set your bar chart to stack the series bars on top of each other easily by using the\n
                    <code>stackBars</code> property in your configuration.\n
      - type: live-example\n
        data:\n
          title: Horizontal bar chart\n
          level: 4\n
          id: example-bar-horizontal\n
          classes: ct-golden-section\n
          intro: >\n
                    Guess what! Creating horizontal bar charts is as simple as it can get. There\'s no new chart type\n
                    you need to learn, just passing an additional option is enough.\n
      - type: live-example\n
        data:\n
          title: Extreme responsive configuration\n
          level: 4\n
          id: example-bar-extreme-responsive\n
          classes: ct-golden-section\n
          intro: >\n
                    As all settings of a chart can be customized with the responsive configuration override mechanism of\n
                    Chartist, you can create a chart that adopts to every media condition!\n
      - type: live-example\n
        data:\n
          title: Distributed series\n
          level: 4\n
          id: example-bar-distributed-series\n
          classes: ct-golden-section\n
          intro: >\n
                    Sometime it\'s desired to have bar charts that show one bar per series distributed along the x-axis. If\n
                    this option is enabled, you need to make sure that you pass a single series array to Chartist that\n
                    contains the series values. In this example you can see T-shirt sales of a store categorized by size.\n
      - type: live-example\n
        data:\n
          title: Label placement\n
          level: 4\n
          id: example-bar-label-position\n
          classes: ct-golden-section\n
          intro: >\n
                    You can change the position of the labels on line and bar charts easily by using the <code>position</code>\n
                    option inside of the axis configuration.\n
\n
  - title: Pie chart examples\n
    level: 3\n
    items:\n
      - type: live-example\n
        data:\n
          title: Simple pie chart\n
          level: 4\n
          id: simple-pie-chart\n
          classes: ct-golden-section ct-negative-labels\n
          intro: A very simple pie chart with label interpolation to show percentage instead of the actual data series value.\n
      - type: live-example\n
        data:\n
          title: Pie chart with custom labels\n
          level: 4\n
          id: pie-with-custom-labels\n
          classes: ct-golden-section\n
          intro: >\n
                    This pie chart is configured with custom labels specified in the data object. On desktop we use the labelOffset\n
                    property to offset the labels from the center. Also labelDirection can be used to control the direction\n
                    in which the labels are expanding.\n
\n
      - type: live-example\n
        data:\n
          title: Gauge chart\n
          level: 4\n
          id: simple-gauge-chart\n
          classes: ct-golden-section ct-negative-labels\n
          intro: This pie chart uses donut, startAngle and total to draw a gauge chart.\n
\n
      - type: live-example\n
        data:\n
          title: Animating a Donut with Svg.animate\n
          level: 4\n
          id: example-donut-animation\n
          classes: ct-golden-section\n
          intro: >\n
                    Although it\'d be also possible to achieve this animation with CSS, with some minor suboptimal\n
                    things, here\'s an example of how to animate donut charts using Chartist.Svg.animate and SMIL.\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>11680</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>examples.yml</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
