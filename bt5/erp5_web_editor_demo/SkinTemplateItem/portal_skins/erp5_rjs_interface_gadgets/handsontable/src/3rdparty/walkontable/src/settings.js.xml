<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41272608.82</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>settings.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

\n
import {fastInnerText} from \'./../../../helpers/dom/element\';\n
\n
\n
/**\n
 * @class WalkontableSettings\n
 */\n
class WalkontableSettings {\n
  /**\n
   * @param {Walkontable} wotInstance\n
   * @param {Object} settings\n
   */\n
  constructor(wotInstance, settings) {\n
    this.wot = wotInstance;\n
    // legacy support\n
    this.instance = wotInstance;\n
\n
    // default settings. void 0 means it is required, null means it can be empty\n
    this.defaults = {\n
      table: void 0,\n
      debug: false, // shows WalkontableDebugOverlay\n
\n
      // presentation mode\n
      externalRowCalculator: false,\n
      stretchH: \'none\', // values: all, last, none\n
      currentRowClassName: null,\n
      currentColumnClassName: null,\n
\n
      //data source\n
      data: void 0,\n
      fixedColumnsLeft: 0,\n
      fixedRowsTop: 0,\n
      // this must be array of functions: [function (row, TH) {}]\n
      rowHeaders: function() {\n
        return [];\n
      },\n
      // this must be array of functions: [function (column, TH) {}]\n
      columnHeaders: function() {\n
        return [];\n
      },\n
      totalRows: void 0,\n
      totalColumns: void 0,\n
      cellRenderer: (row, column, TD) => {\n
        let cellData = this.getSetting(\'data\', row, column);\n
\n
        fastInnerText(TD, cellData === void 0 || cellData === null ? \'\' : cellData);\n
      },\n
      // columnWidth: 50,\n
      columnWidth: function(col) {\n
        return; //return undefined means use default size for the rendered cell content\n
      },\n
      rowHeight: function(row) {\n
        return; //return undefined means use default size for the rendered cell content\n
      },\n
      defaultRowHeight: 23,\n
      defaultColumnWidth: 50,\n
      selections: null,\n
      hideBorderOnMouseDownOver: false,\n
      viewportRowCalculatorOverride: null,\n
      viewportColumnCalculatorOverride: null,\n
\n
      //callbacks\n
      onCellMouseDown: null,\n
      onCellMouseOver: null,\n
      //    onCellMouseOut: null,\n
      onCellDblClick: null,\n
      onCellCornerMouseDown: null,\n
      onCellCornerDblClick: null,\n
      beforeDraw: null,\n
      onDraw: null,\n
      onBeforeDrawBorders: null,\n
      onScrollVertically: null,\n
      onScrollHorizontally: null,\n
      onBeforeTouchScroll: null,\n
      onAfterMomentumScroll: null,\n
\n
      //constants\n
      scrollbarWidth: 10,\n
      scrollbarHeight: 10,\n
\n
      renderAllRows: false,\n
      groups: false\n
    };\n
    // reference to settings\n
    this.settings = {};\n
\n
    for (let i in this.defaults) {\n
      if (this.defaults.hasOwnProperty(i)) {\n
        if (settings[i] !== void 0) {\n
          this.settings[i] = settings[i];\n
\n
        } else if (this.defaults[i] === void 0) {\n
          throw new Error(\'A required setting "\' + i + \'" was not provided\');\n
\n
        } else {\n
          this.settings[i] = this.defaults[i];\n
        }\n
      }\n
    }\n
  }\n
\n
  /**\n
   * Update settings\n
   *\n
   * @param {Object} settings\n
   * @param {*} value\n
   * @returns {Walkontable}\n
   */\n
  update(settings, value) {\n
    if (value === void 0) { //settings is object\n
      for (let i in settings) {\n
        if (settings.hasOwnProperty(i)) {\n
          this.settings[i] = settings[i];\n
        }\n
      }\n
    } else { //if value is defined then settings is the key\n
      this.settings[settings] = value;\n
    }\n
    return this.wot;\n
  }\n
\n
  /**\n
   * Get setting by name\n
   *\n
   * @param {String} key\n
   * @param {*} param1\n
   * @param {*} param2\n
   * @param {*} param3\n
   * @param {*} param4\n
   * @returns {*}\n
   */\n
  getSetting(key, param1, param2, param3, param4) {\n
    if (typeof this.settings[key] === \'function\') {\n
      // this is faster than .apply - https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips\n
      return this.settings[key](param1, param2, param3, param4);\n
\n
    } else if (param1 !== void 0 && Array.isArray(this.settings[key])) {\n
      // perhaps this can be removed, it is only used in tests\n
      return this.settings[key][param1];\n
\n
    } else {\n
      return this.settings[key];\n
    }\n
  }\n
\n
  /**\n
   * Checks if setting exists\n
   *\n
   * @param {Boolean} key\n
   * @returns {Boolean}\n
   */\n
  has(key) {\n
    return !!this.settings[key];\n
  }\n
}\n
\n
export {WalkontableSettings};\n
\n
window.WalkontableSettings = WalkontableSettings;\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>4172</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>settings.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
