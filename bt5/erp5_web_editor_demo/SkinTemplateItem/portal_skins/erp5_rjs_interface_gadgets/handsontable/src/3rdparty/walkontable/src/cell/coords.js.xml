<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41272614.56</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>coords.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

\n
/**\n
 * WalkontableCellCoords holds cell coordinates (row, column) and few method to validate them and\n
 * retrieve as an array or an object\n
 *\n
 * @class WalkontableCellCoords\n
 */\n
class WalkontableCellCoords {\n
  /**\n
   * @param {Number} row Row index\n
   * @param {Number} col Column index\n
   */\n
  constructor(row, col) {\n
    if (typeof row !== \'undefined\' && typeof col !== \'undefined\') {\n
      this.row = row;\n
      this.col = col;\n
\n
    } else {\n
      this.row = null;\n
      this.col = null;\n
    }\n
  }\n
\n
  /**\n
   * Checks if given set of coordinates is valid in context of a given Walkontable instance\n
   *\n
   * @param {Walkontable} wotInstance\n
   * @returns {Boolean}\n
   */\n
  isValid(wotInstance) {\n
    // is it a valid cell index (0 or higher)\n
    if (this.row < 0 || this.col < 0) {\n
      return false;\n
    }\n
    // is selection within total rows and columns\n
    if (this.row >= wotInstance.getSetting(\'totalRows\') || this.col >= wotInstance.getSetting(\'totalColumns\')) {\n
      return false;\n
    }\n
\n
    return true;\n
  }\n
\n
  /**\n
   * Checks if this cell coords are the same as cell coords given as a parameter\n
   *\n
   * @param {WalkontableCellCoords} cellCoords\n
   * @returns {Boolean}\n
   */\n
  isEqual(cellCoords) {\n
    if (cellCoords === this) {\n
      return true;\n
    }\n
\n
    return this.row === cellCoords.row && this.col === cellCoords.col;\n
  }\n
\n
  /**\n
   * Checks if tested coordinates are positioned in south-east from this cell coords\n
   *\n
   * @param {Object} testedCoords\n
   * @returns {Boolean}\n
   */\n
  isSouthEastOf(testedCoords) {\n
    return this.row >= testedCoords.row && this.col >= testedCoords.col;\n
  }\n
\n
  /**\n
   * Checks if tested coordinates are positioned in north-east from this cell coords\n
   *\n
   * @param {Object} testedCoords\n
   * @returns {Boolean}\n
   */\n
  isNorthWestOf(testedCoords) {\n
    return this.row <= testedCoords.row && this.col <= testedCoords.col;\n
  }\n
\n
  /**\n
   * Checks if tested coordinates are positioned in south-west from this cell coords\n
   *\n
   * @param {Object} testedCoords\n
   * @returns {Boolean}\n
   */\n
  isSouthWestOf(testedCoords) {\n
    return this.row >= testedCoords.row && this.col <= testedCoords.col;\n
  }\n
\n
  /**\n
   * Checks if tested coordinates are positioned in north-east from this cell coords\n
   *\n
   * @param {Object} testedCoords\n
   * @returns {Boolean}\n
   */\n
  isNorthEastOf(testedCoords) {\n
    return this.row <= testedCoords.row && this.col >= testedCoords.col;\n
  }\n
}\n
\n
export {WalkontableCellCoords};\n
\n
window.WalkontableCellCoords = WalkontableCellCoords;\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>2518</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>coords.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
