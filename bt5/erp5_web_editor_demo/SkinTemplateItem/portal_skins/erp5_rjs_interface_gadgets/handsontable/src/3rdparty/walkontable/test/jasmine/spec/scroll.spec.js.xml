<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41272581.34</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>scroll.spec.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

describe(\'WalkontableScroll\', function () {\n
var $table\n
  , $container\n
  , $wrapper\n
  , debug = false;\n
\n
  beforeEach(function () {\n
    $wrapper = $(\'<div></div>\').css({\'overflow\': \'hidden\'});\n
    $container = $(\'<div></div>\');\n
    $table = $(\'<table></table>\'); //create a table that is not attached to document\n
    $wrapper.append($container);\n
    $container.append($table);\n
    $wrapper.appendTo(\'body\');\n
    createDataArray(100, 4);\n
  });\n
\n
  afterEach(function () {\n
    if (!debug) {\n
      $(\'.wtHolder\').remove();\n
    }\n
\n
    $wrapper.remove();\n
  });\n
\n
  describe("scroll", function () {\n
    it("should scroll to last column when rowHeaders is not in use", function () {\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns\n
      });\n
      wt.draw().scrollHorizontal(999).draw();\n
      expect($table.find(\'tbody tr:eq(0) td:last\')[0].innerHTML).toBe(\'c\');\n
    });\n
\n
    it("should scroll to last column when rowHeaders is in use", function () {\n
      function plusOne(i) {\n
        return i + 1;\n
      }\n
\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns,\n
        columnHeaders: [function (col, TH) {\n
          TH.innerHTML = plusOne(col);\n
        }],\n
        rowHeaders: [function (row, TH) {\n
          TH.innerHTML = plusOne(row);\n
        }]\n
      });\n
      wt.draw().scrollHorizontal(999).draw();\n
      expect($table.find(\'tbody tr:eq(0) td:last\')[0].innerHTML).toBe(\'c\');\n
    });\n
\n
    it("scroll not scroll the viewport if all rows are visible", function () {\n
      this.data.splice(5);\n
\n
      $wrapper.height(201).width(100);\n
\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns\n
      });\n
\n
      wt.draw();\n
\n
      expect(wt.wtTable.getVisibleRowsCount()).toEqual(5);\n
\n
      wt.scrollVertical(999).draw();\n
      expect(wt.wtTable.getCoords($table.find(\'tbody tr:eq(0) td:eq(0)\')[0])).toEqual(new WalkontableCellCoords(0, 0));\n
    });\n
\n
    it("scroll horizontal should take totalColumns if it is smaller than width", function () {\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns\n
      });\n
      wt.draw().scrollHorizontal(999).draw();\n
      expect(wt.wtTable.getCoords($table.find(\'tbody tr:eq(0) td:eq(0)\')[0])).toEqual(new WalkontableCellCoords(0, 0));\n
    });\n
\n
    it("scroll vertical should scroll to first row if given number smaller than 0", function () {\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns\n
      });\n
      wt.draw().scrollVertical(-1).draw();\n
      expect(wt.wtTable.getCoords($table.find(\'tbody tr:first td:first\')[0])).toEqual(new WalkontableCellCoords(0, 0));\n
    });\n
\n
    it("scroll vertical should scroll to last row if given number bigger than totalRows", function () {\n
      this.data.splice(20, this.data.length - 20);\n
\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns\n
      });\n
      wt.draw().scrollVertical(999).draw();\n
      expect(wt.wtTable.getCoords($table.find(\'tbody tr:last td:first\')[0])).toEqual(new WalkontableCellCoords(19, 0));\n
    });\n
\n
    it("scroll horizontal should scroll to first row if given number smaller than 0", function () {\n
\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns\n
      });\n
      wt.draw().scrollHorizontal(-1).draw();\n
      expect(wt.wtTable.getCoords($table.find(\'tbody tr:first td:first\')[0])).toEqual(new WalkontableCellCoords(0, 0));\n
    });\n
\n
    it("scroll horizontal should scroll to last row if given number bigger than totalRows", function () {\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns\n
      });\n
      wt.draw().scrollHorizontal(999).draw();\n
      expect(wt.wtTable.getCoords($table.find(\'tbody tr:first td:last\')[0])).toEqual(new WalkontableCellCoords(0, 3));\n
    });\n
\n
    it("scroll viewport to a cell that is visible should do nothing", function () {\n
\n
      $wrapper.height(201).width(120);\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns\n
      });\n
      wt.draw();\n
      var tmp = wt.getViewport();\n
      wt.scrollViewport(new WalkontableCellCoords(0, 1)).draw();\n
      expect(wt.getViewport()).toEqual(tmp);\n
    });\n
\n
    it("scroll viewport to a cell on far right should make it visible on right edge", function () {\n
\n
\n
      $wrapper.width(125).height(201);\n
\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns\n
      });\n
      wt.draw();\n
      var height = $wrapper[0].clientHeight;\n
      var visibleRowCount = Math.floor(height/23);\n
      wt.scrollViewport(new WalkontableCellCoords(0, 2)).draw();\n
      expect(wt.getViewport()).toEqual([0, 1, visibleRowCount - 1, 2]);\n
    });\n
\n
    it("scroll viewport to a cell on far left should make it visible on left edge", function () {\n
\n
      $wrapper.width(100).height(201);\n
\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns\n
      });\n
      wt.draw();\n
      var height = $wrapper[0].clientHeight;\n
      var visibleRowCount = Math.floor(height/23);\n
      wt.scrollViewport(new WalkontableCellCoords(0, 3)).draw();\n
      expect(wt.getViewport()).toEqual([0, 3, visibleRowCount - 1, 3]);\n
\n
\n
      wt.scrollViewport(new WalkontableCellCoords(0, 1)).draw();\n
      expect(wt.getViewport()).toEqual([0, 1, visibleRowCount - 1, 1]);\n
    });\n
\n
    it("scroll viewport to a cell on far left should make it visible on left edge (with row header)", function () {\n
      $wrapper.width(140).height(201);\n
\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns,\n
        rowHeaders: [function (row, TH) {\n
          TH.innerHTML = row + 1;\n
        }]\n
      });\n
      wt.draw();\n
\n
      var height = $wrapper[0].clientHeight;\n
      var visibleRowCount = Math.floor(height/23);\n
\n
      wt.scrollViewport(new WalkontableCellCoords(0, 3)).draw();\n
      expect(wt.getViewport()).toEqual([0, 3, visibleRowCount - 1, 3]);\n
      wt.scrollViewport(new WalkontableCellCoords(0, 1)).draw();\n
      expect(wt.wtTable.getFirstVisibleColumn()).toEqual(1);\n
    });\n
\n
    it("scroll viewport to a cell on far right should make it visible on right edge (with row header)", function () {\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns,\n
        rowHeaders: [function (row, TH) {\n
          TH.innerHTML = row + 1;\n
        }]\n
      });\n
      wt.draw().scrollViewport(new WalkontableCellCoords(0, 2)).draw();\n
      expect(wt.wtTable.getCoords($table.find(\'tbody tr:first td:last\')[0])).toEqual(new WalkontableCellCoords(0, 3));\n
    });\n
\n
    it("scroll viewport to a cell on far bottom should make it visible on bottom edge", function () {\n
      $wrapper.width(125).height(201);\n
\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns\n
      });\n
      wt.draw();\n
\n
      wt.scrollViewport(new WalkontableCellCoords(12, 0)).draw();\n
      expect(wt.getViewport()[0]).toBeAroundValue(5);\n
      expect(wt.getViewport()[1]).toBeAroundValue(0);\n
      expect(wt.getViewport()[2]).toBeAroundValue(12);\n
      expect(wt.getViewport()[3]).toBeAroundValue(1);\n
    });\n
\n
    it("scroll viewport to a cell on far top should make it visible on top edge", function () {\n
      $wrapper.width(100).height(201);\n
\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns\n
      });\n
      wt.draw();\n
      wt.scrollViewport(new WalkontableCellCoords(20, 0)).draw();\n
      wt.scrollViewport(new WalkontableCellCoords(12, 0)).draw();\n
\n
      expect(wt.wtTable.getCoords($table.find(\'tbody tr:first td:first\')[0])).toEqual(new WalkontableCellCoords(12, 0));\n
    });\n
\n
    it("scroll viewport to a cell that does not exist (vertically) should throw an error", function () {\n
      this.data.splice(20, this.data.length - 20);\n
\n
      expect(function () {\n
        $wrapper.width(100).height(201);\n
        var wt = new Walkontable({\n
          table: $table[0],\n
          data: getData,\n
          totalRows: getTotalRows,\n
          totalColumns: getTotalColumns\n
        });\n
        wt.draw();\n
        wt.scrollViewport(new WalkontableCellCoords(40, 0)).draw();\n
      }).toThrow()\n
\n
    });\n
\n
    it("scroll viewport to a cell that does not exist (horizontally) should throw an error", function () {\n
      expect(function () {\n
        $wrapper.width(100).height(201);\n
        var wt = new Walkontable({\n
          table: $table[0],\n
          data: getData,\n
          totalRows: getTotalRows,\n
          totalColumns: getTotalColumns\n
        });\n
        wt.draw();\n
        wt.scrollViewport(new WalkontableCellCoords(0, 40)).draw();\n
      }).toThrow()\n
    });\n
\n
    it("remove row from the last scroll page should scroll viewport a row up if needed", function () {\n
\n
      $wrapper.width(100).height(210);\n
\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns\n
      });\n
      wt.draw().scrollViewport(new WalkontableCellCoords(getTotalRows() - 1, 0)).draw();\n
\n
      var originalViewportStartRow = wt.getViewport()[0];\n
\n
      this.data.splice(getTotalRows() - 4, 1); //remove row at index 96\n
      wt.draw();\n
\n
      expect(originalViewportStartRow - 1).toEqual(wt.getViewport()[0]);\n
    });\n
\n
    it("should scroll to last row if smaller data source is loaded that does not have currently displayed row", function () {\n
      $wrapper.width(100).height(260);\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns\n
      });\n
      wt.draw();\n
      wt.scrollVertical(50).draw();\n
      this.data.splice(30, this.data.length - 30);\n
      wt.draw();\n
      expect($table.find(\'tbody tr\').length).toBeGreaterThan(9);\n
    });\n
\n
    it("should scroll to last column if smaller data source is loaded that does not have currently displayed column", function () {\n
      createDataArray(20, 100);\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns\n
      });\n
      wt.draw().scrollHorizontal(50).draw();\n
      createDataArray(100, 30);\n
      wt.draw();\n
      expect($table.find(\'tbody tr:first td\').length).toBeGreaterThan(3);\n
    });\n
\n
    xit("should scroll to last row with very high rows", function () {\n
      createDataArray(20, 100);\n
\n
      for (var i = 0, ilen = this.data.length; i < ilen; i++) {\n
        this.data[i][0] += \'\\n this \\nis \\na \\nmultiline \\ncell\';\n
      }\n
\n
      $wrapper.width(260).height(201);\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns\n
      });\n
      wt.draw();\n
      wt.scrollVertical(20).draw();\n
      expect($table.find(\'tbody tr:last td:first\')[0]).toBe(wt.wtTable.getCell(new WalkontableCellCoords(this.data.length - 1, 0))); //last rendered row should be last data row\n
    });\n
\n
    xit("should scroll to last row with very high rows (respecting fixedRows)", function () {\n
      createDataArray(20, 100);\n
\n
      for (var i = 0, ilen = this.data.length; i < ilen; i++) {\n
        this.data[i][0] += \'\\n this \\nis \\na \\nmultiline \\ncell\';\n
      }\n
\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns,\n
        fixedRowsTop: 2\n
      });\n
      wt.draw().scrollVertical(Infinity).draw();\n
      expect($table.find(\'tbody tr:eq(0) td:first\')[0]).toBe(wt.wtTable.getCell(new WalkontableCellCoords(0, 0))); //first rendered row should fixed row 0\n
      expect($table.find(\'tbody tr:eq(1) td:first\')[0]).toBe(wt.wtTable.getCell(new WalkontableCellCoords(1, 0))); //second rendered row should fixed row 1\n
      expect($table.find(\'tbody tr:eq(2) td:first\')[0]).toBe(wt.wtTable.getCell(new WalkontableCellCoords(16, 0))); //third rendered row should fixed row 1\n
      expect($table.find(\'tbody tr:last td:first\')[0]).toBe(wt.wtTable.getCell(new WalkontableCellCoords(this.data.length - 1, 0))); //last rendered row should be last data row\n
    });\n
\n
    it("should scroll to last column with very wide cells", function () {\n
      createDataArray(20, 100);\n
      $wrapper.width(260).height(201);\n
\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns\n
      });\n
      wt.draw().scrollHorizontal(50).draw();\n
      createDataArray(100, 30);\n
      wt.draw();\n
      expect($table.find(\'tbody tr:first td\').length).toBeGreaterThan(3);\n
    });\n
\n
    it("should scroll the desired cell to the bottom edge even if it\'s located in a fixed column", function () {\n
      createDataArray(20, 100);\n
      $wrapper.width(260).height(201);\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns,\n
        fixedColumnsLeft: 2\n
      });\n
\n
      wt.draw().scrollViewport(new WalkontableCellCoords(8,1)).draw();\n
      waits(20);\n
      runs(function() {\n
        expect(wt.wtTable.getLastVisibleRow()).toBe(8);\n
      });\n
\n
    });\n
\n
  });\n
\n
  describe(\'scrollViewport - horizontally\', function () {\n
\n
    beforeEach(function () {\n
      $wrapper.width(201).height(201);\n
    });\n
\n
    it("should scroll to last column on the right", function () {\n
      this.data = Handsontable.helper.createSpreadsheetData(10, 10);\n
\n
      $wrapper.width(201).height(201);\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns,\n
        columnWidth: 50\n
      });\n
      wt.draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(2);\n
      wt.scrollViewport(new WalkontableCellCoords(0, 9)).draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(9);\n
    });\n
\n
    it("should not scroll back to a column that is in viewport", function () {\n
      this.data = Handsontable.helper.createSpreadsheetData(10, 10);\n
\n
\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns,\n
        columnWidth: 50\n
      });\n
      wt.draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(2);\n
      wt.scrollViewport(new WalkontableCellCoords(0, 9)).draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(9);\n
\n
      wt.scrollViewport(new WalkontableCellCoords(0, 9)).draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(9); //nothing changed\n
\n
      wt.scrollViewport(new WalkontableCellCoords(0, 8)).draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(9); //nothing changed\n
\n
      wt.scrollViewport(new WalkontableCellCoords(0, 7)).draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(9); //nothing changed\n
    });\n
\n
    it("should scroll back to a column that is before viewport", function () {\n
      this.data = Handsontable.helper.createSpreadsheetData(10, 10);\n
\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns,\n
        columnWidth: 50\n
      });\n
      wt.draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(2);\n
      wt.scrollViewport(new WalkontableCellCoords(0, 9)).draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(9);\n
\n
      wt.draw().scrollViewport(new WalkontableCellCoords(0, 3)).draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(5);\n
\n
      wt.draw().scrollViewport(new WalkontableCellCoords(0, 4)).draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(5);//nothing changed\n
\n
      wt.scrollViewport(new WalkontableCellCoords(0, 9)).draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(9);\n
    });\n
\n
    it("should scroll to a column that is after viewport", function () {\n
      this.data = Handsontable.helper.createSpreadsheetData(10, 10);\n
\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns,\n
        columnWidth: 50\n
      });\n
      wt.draw();\n
      wt.scrollViewport(new WalkontableCellCoords(0, 2)).draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(2);\n
\n
      wt.draw().scrollViewport(new WalkontableCellCoords(0, 4)).draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(4);\n
    });\n
\n
    it("should scroll to a wide column that is after viewport", function () {\n
      this.data = Handsontable.helper.createSpreadsheetData(10, 10);\n
\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns,\n
        columnWidth: function (col) {\n
          if (col === 3) {\n
            return 100\n
          }\n
          else {\n
            return 50\n
          }\n
        }\n
      });\n
\n
      wt.draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(2);\n
      expect(wt.wtTable.getFirstVisibleColumn()).toEqual(0);\n
      wt.scrollViewport(new WalkontableCellCoords(0, 3)).draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(3);\n
      expect(wt.wtTable.getFirstVisibleColumn()).toEqual(2);\n
    });\n
\n
    xit("should scroll to a very wide column that is after viewport", function () {\n
      this.data = Handsontable.helper.createSpreadsheetData(10, 10);\n
\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns,\n
        columnWidth: function (col) {\n
          if (col === 3) {\n
            return 300\n
          }\n
          else {\n
            return 50\n
          }\n
        }\n
      });\n
\n
      wt.draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(3);\n
      expect(wt.wtTable.getFirstVisibleColumn()).toEqual(0);\n
\n
      wt.scrollViewport(new WalkontableCellCoords(0, 3)).draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(3);\n
      expect(wt.wtTable.getFirstVisibleColumn()).toEqual(3);\n
\n
      wt.scrollViewport(new WalkontableCellCoords(0, 2)).draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(3);\n
      expect(wt.wtTable.getFirstVisibleColumn()).toEqual(2);\n
\n
      wt.scrollViewport(new WalkontableCellCoords(0, 3)).draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(3);\n
      expect(wt.wtTable.getFirstVisibleColumn()).toEqual(3);\n
\n
      wt.scrollViewport(new WalkontableCellCoords(0, 4)).draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(4);\n
      expect(wt.wtTable.getFirstVisibleColumn()).toEqual(3);\n
\n
    });\n
\n
    xit("should scroll to a very wide column that is after viewport (with fixedColumnsLeft)", function () {\n
      this.data = Handsontable.helper.createSpreadsheetData(1, 10);\n
\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns,\n
        columnWidth: function (col) {\n
          if (col === 3) {\n
            return 300\n
          }\n
          else {\n
            return 50\n
          }\n
        },\n
        fixedColumnsLeft: 2\n
      });\n
\n
      wt.draw();\n
      wt.scrollViewport(new WalkontableCellCoords(0, 3)).draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(3);\n
\n
      wt.draw().scrollViewport(new WalkontableCellCoords(0, 2)).draw();\n
      expect(wt.wtTable.getFirstVisibleColumn()).toBeGreaterThan(2);\n
      expect(wt.wtTable.getLastVisibleColumn()).toBeGreaterThan(2);\n
\n
\n
      wt.draw().scrollViewport(new WalkontableCellCoords(0, 3)).draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(3);\n
\n
      wt.draw().scrollViewport(new WalkontableCellCoords(0, 4)).draw();\n
      expect(wt.wtTable.getLastVisibleColumn()).toEqual(4);\n
    });\n
  });\n
\n
  describe(\'scrollViewport - vertically\', function () {\n
\n
    beforeEach(function () {\n
      $wrapper.width(201).height(201);\n
    });\n
\n
    xit("should scroll to a very high row that is after viewport", function () {\n
      this.data = Handsontable.helper.createSpreadsheetData(20, 1);\n
\n
      var txt = \'Very very very very very very very very very very very very very very very very very long text.\';\n
      this.data[4][0] = txt;\n
\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns\n
      });\n
\n
      wt.draw();\n
      expect(wt.wtTable.getFirstVisibleRow()).toEqual(0);\n
\n
      wt.scrollViewport(new WalkontableCellCoords(4, 0)).draw();\n
      expect(wt.wtTable.getLastVisibleRow()).toEqual(4);\n
\n
      wt.draw().scrollViewport(new WalkontableCellCoords(5, 0)).draw();\n
      expect(wt.wtTable.getLastVisibleRow()).toEqual(5);\n
\n
      wt.draw().scrollViewport(new WalkontableCellCoords(4, 0)).draw();\n
      expect(wt.wtTable.getFirstVisibleRow()).toEqual(4);\n
\n
      wt.draw().scrollViewport(new WalkontableCellCoords(3, 0)).draw();\n
      expect(wt.wtTable.getFirstVisibleRow()).toEqual(3);\n
    });\n
\n
    xit("should scroll to a very high row that is after viewport (at the end)", function () {\n
      this.data = Handsontable.helper.createSpreadsheetData(20, 1);\n
\n
      var txt = \'Very very very very very very very very very very very very very very very very very long text.\';\n
      this.data[19][0] = txt;\n
\n
      var wt = new Walkontable({\n
        table: $table[0],\n
        data: getData,\n
        totalRows: getTotalRows,\n
        totalColumns: getTotalColumns\n
      });\n
\n
      wt.draw().scrollViewport(new WalkontableCellCoords(18, 0)).draw();\n
      expect($table.find(\'tbody tr\').length).toBe(2);\n
      expect($table.find(\'tbody tr:eq(0) td:eq(0)\').html()).toBe(\'A18\');\n
      expect($table.find(\'tbody tr:eq(1) td:eq(0)\').html()).toBe(txt);\n
\n
      wt.draw().scrollViewport(new WalkontableCellCoords(19, 0)).draw();\n
      expect($table.find(\'tbody tr\').length).toBe(1);\n
      expect($table.find(\'tbody tr:eq(0) td:eq(0)\').html()).toBe(txt); //scrolled down\n
\n
      wt.draw().scrollViewport(new WalkontableCellCoords(18, 0)).draw();\n
      expect($table.find(\'tbody tr\').length).toBe(2);\n
      expect($table.find(\'tbody tr:eq(0) td:eq(0)\').html()).toBe(\'A18\'); //scrolled up\n
      expect($table.find(\'tbody tr:eq(1) td:eq(0)\').html()).toBe(txt);\n
\n
      wt.draw().scrollViewport(new WalkontableCellCoords(17, 0)).draw();\n
      expect($table.find(\'tbody tr\').length).toBe(3);\n
      expect($table.find(\'tbody tr:eq(0) td:eq(0)\').html()).toBe(\'A17\'); //scrolled up\n
      expect($table.find(\'tbody tr:eq(1) td:eq(0)\').html()).toBe(\'A18\');\n
      expect($table.find(\'tbody tr:eq(2) td:eq(0)\').html()).toBe(txt);\n
    });\n
  });\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>23619</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>scroll.spec.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
