<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41272606.05</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>SpecHelper.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

var spec = function () {\n
  return jasmine.getEnv().currentSpec;\n
};\n
\n
var createDataArray = function (rows, cols) {\n
  spec().data = [];\n
  rows = typeof rows === \'number\' ? rows : 100;\n
  cols = typeof cols === \'number\' ? cols : 4;\n
  for (var i = 0; i < rows; i++) {\n
    var row = [];\n
    if (cols > 0) {\n
      row.push(i);\n
      for (var j = 0; j < cols - 1; j++) {\n
        row.push(String.fromCharCode(65 + j % 20).toLowerCase() + (j / 20 | 0 || \'\'));  // | 0 is parseInt - see http://jsperf.com/math-floor-vs-math-round-vs-parseint/18\n
      }\n
    }\n
    spec().data.push(row);\n
  }\n
};\n
\n
var getData = function (row, col) {\n
  return spec().data[row][col];\n
};\n
\n
var getTotalRows = function () {\n
  return spec().data.length;\n
};\n
\n
var getTotalColumns = function () {\n
  return spec().data[0] ? spec().data[0].length : 0;\n
};\n
\n
beforeEach(function () {\n
  var matchers = {\n
    toBeInArray: function (arr) {\n
      return ($.inArray(this.actual, arr) > -1);\n
    },\n
    toBeAroundValue: function (val) {\n
      this.message = function (val) {\n
        return [\n
          "Expected " + this.actual + " to be around " + val + " (between " + (val - 1) + " and " + (val + 1) + ")",\n
          "Expected " + this.actual + " NOT to be around " + val + " (between " + (val - 1) + " and " + (val + 1) + ")"\n
        ];\n
      };\n
      return (this.actual >= val - 1 && this.actual <= val + 1);\n
    }\n
  };\n
\n
  this.addMatchers(matchers);\n
});\n
\n
var getTableWidth = function (elem) {\n
  return $(elem).outerWidth() || $(elem).find(\'tbody\').outerWidth() || $(elem).find(\'thead\').outerWidth(); //IE8 reports 0 as <table> offsetWidth\n
};\n
\n
var range = function (from, to) {\n
  if (!arguments.length){\n
    return [];\n
  }\n
\n
  if (arguments.length == 1){\n
    to = from;\n
    from = 0;\n
  }\n
\n
  if (to > from){\n
    from = [to, to = from][0]; //one-liner for swapping two values\n
  }\n
\n
  var result = [];\n
\n
  while (to++ < from) result.push(to);\n
\n
  return result;\n
};\n
\n
/**\n
 * Rewrite all existing selections from selections[0] etc. to selections.current etc\n
 * @param instance\n
 * @returns {object} modified instance\n
 */\n
function shimSelectionProperties(instance) {\n
  if(instance.selections[0]) instance.selections.current = instance.selections[0];\n
  if(instance.selections[1]) instance.selections.area = instance.selections[1];\n
  if(instance.selections[2]) instance.selections.highlight = instance.selections[2];\n
  if(instance.selections[3]) instance.selections.fill = instance.selections[3];\n
\n
  return instance;\n
}\n
\n
function getTableTopClone() {\n
  return $(\'.ht_clone_top\');\n
}\n
\n
function getTableLeftClone() {\n
  return $(\'.ht_clone_left\');\n
}\n
\n
function getTableCornerClone() {\n
  return $(\'.ht_clone_corner\');\n
}\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>2653</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>SpecHelper.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
