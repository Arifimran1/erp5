<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41272626.41</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>dateValidator.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

\n
import moment from \'moment\';\n
import {getEditor} from \'./../editors\';\n
\n
/**\n
 * Date cell validator\n
 *\n
 * @private\n
 * @validator DateValidator\n
 * @dependencies moment\n
 * @param {*} value - Value of edited cell\n
 * @param {Function} callback - Callback called with validation result\n
 */\n
Handsontable.DateValidator = function(value, callback) {\n
  let valid = true;\n
  let dateEditor = getEditor(\'date\', this.instance);\n
\n
  if (value === null) {\n
    value = \'\';\n
  }\n
  let isValidDate = moment(new Date(value)).isValid();\n
  // is it in the specified format\n
  let isValidFormat = moment(value, this.dateFormat || dateEditor.defaultDateFormat, true).isValid();\n
\n
  if (!isValidDate) {\n
    valid = false;\n
  }\n
  if (!isValidDate && isValidFormat) {\n
    valid = true;\n
  }\n
\n
  if (isValidDate && !isValidFormat) {\n
    if (this.correctFormat === true) { // if format correction is enabled\n
      let correctedValue = correctFormat(value, this.dateFormat);\n
\n
      this.instance.setDataAtCell(this.row, this.col, correctedValue, \'dateValidator\');\n
      valid = true;\n
    } else {\n
      valid = false;\n
    }\n
  }\n
\n
  callback(valid);\n
};\n
\n
/**\n
 * Format the given string using moment.js\' format feature\n
 *\n
 * @param {String} value\n
 * @param {String} dateFormat\n
 * @returns {String}\n
 */\n
let correctFormat = function correctFormat(value, dateFormat) {\n
  let date = moment(new Date(value));\n
  let year = date.format(\'YYYY\');\n
  let yearNow = moment().format(\'YYYY\');\n
\n
  // Firefox and IE counting 2-digits year from 1900 rest from current age.\n
  if (year.substr(0, 2) !== yearNow.substr(0, 2)) {\n
    if (!value.match(new RegExp(year))) {\n
      date.year(year.replace(year.substr(0, 2), yearNow.substr(0, 2)));\n
    }\n
\n
  } else if (year.length > 4) {\n
    // Ugly fix for moment bug which can not format 5-digits year using YYYY\n
    date.year((date.year() + \'\').substr(0, 4));\n
  }\n
\n
  return date.format(dateFormat);\n
};\n
\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>1887</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>dateValidator.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
