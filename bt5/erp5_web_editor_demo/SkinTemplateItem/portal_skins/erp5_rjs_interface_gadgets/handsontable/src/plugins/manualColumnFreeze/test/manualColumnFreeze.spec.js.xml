<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41272664.41</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>manualColumnFreeze.spec.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

describe("ManualColumnFreeze plugin:", function () {\n
  var id = \'testContainer\';\n
\n
  beforeEach(function () {\n
    this.$container = $(\'<div id="\' + id + \'"></div>\').appendTo(\'body\');\n
  });\n
\n
  afterEach(function () {\n
    if (this.$container) {\n
      destroy();\n
      this.$container.remove();\n
    }\n
  });\n
\n
  describe("addFixedColumn", function () {\n
    it("should increment fixed column count by 1", function () {\n
      var hot = handsontable({\n
        data: Handsontable.helper.createSpreadsheetData(10, 10),\n
        manualColumnFreeze: true,\n
        fixedColumnsLeft: 2\n
      });\n
\n
      var plugin = hot.getPlugin(\'manualColumnFreeze\');\n
\n
      expect(hot.getSettings().fixedColumnsLeft).toEqual(2);\n
      plugin.addFixedColumn();\n
      expect(hot.getSettings().fixedColumnsLeft).toEqual(3);\n
      plugin.addFixedColumn();\n
      expect(hot.getSettings().fixedColumnsLeft).toEqual(4);\n
    });\n
  });\n
\n
  describe("removeFixedColumn", function () {\n
    it("should decrement fixed column count by 1", function () {\n
      var hot = handsontable({\n
        data: Handsontable.helper.createSpreadsheetData(10, 10),\n
        manualColumnFreeze: true,\n
        fixedColumnsLeft: 4\n
      });\n
\n
      var plugin = hot.getPlugin(\'manualColumnFreeze\');\n
\n
      expect(hot.getSettings().fixedColumnsLeft).toEqual(4);\n
      plugin.removeFixedColumn();\n
      expect(hot.getSettings().fixedColumnsLeft).toEqual(3);\n
      plugin.removeFixedColumn();\n
      expect(hot.getSettings().fixedColumnsLeft).toEqual(2);\n
    });\n
  });\n
\n
  describe("checkPositionData", function () {\n
    it("should check whether \'manualColumnPositions\' array needs creating and/or initializing, and if so, do it", function () {\n
      var hot = handsontable({\n
        data: Handsontable.helper.createSpreadsheetData(10, 10),\n
        manualColumnFreeze: true,\n
        fixedColumnsLeft: 2\n
      });\n
\n
      var plugin = hot.getPlugin(\'manualColumnFreeze\');\n
\n
      expect(typeof hot.manualColumnPositions).toEqual("object");\n
      expect(hot.manualColumnPositions.length).toEqual(0);\n
\n
      plugin.checkPositionData();\n
      expect(hot.manualColumnPositions.length).toEqual(10);\n
\n
      hot.manualColumnPositions = void 0;\n
      plugin.checkPositionData();\n
      expect(hot.manualColumnPositions.length).toEqual(10);\n
\n
      hot.manualColumnPositions = [];\n
      plugin.checkPositionData(5);\n
      expect(hot.manualColumnPositions.length).toEqual(6);\n
\n
      for (var i = 0; i < 6; i++) {\n
        expect(hot.manualColumnPositions[i]).toEqual(i);\n
      }\n
\n
    });\n
  });\n
\n
  describe("modifyColumnOrder", function () {\n
    it("should update \'manualColumnPositions\' array order, accordingly to provided parameters", function () {\n
      var hot = handsontable({\n
        data: Handsontable.helper.createSpreadsheetData(10, 10),\n
        manualColumnFreeze: true,\n
        fixedColumnsLeft: 2\n
      });\n
\n
      var plugin = hot.getPlugin(\'manualColumnFreeze\');\n
\n
      plugin.checkPositionData(5);\n
\n
      plugin.modifyColumnOrder(4, 4, null, \'freeze\');\n
      expect(hot.manualColumnPositions[2]).toEqual(4);\n
      expect(hot.manualColumnPositions[4]).toEqual(3);\n
\n
      plugin.modifyColumnOrder(4, 2, null, \'unfreeze\');\n
      expect(hot.manualColumnPositions[2]).toEqual(2);\n
      expect(hot.manualColumnPositions[4]).toEqual(4);\n
\n
      plugin.modifyColumnOrder(1, 1, 3, \'unfreeze\');\n
      expect(hot.manualColumnPositions[1]).toEqual(2);\n
      expect(hot.manualColumnPositions[3]).toEqual(1);\n
\n
    });\n
  });\n
\n
  describe("getBestColumnReturnPosition", function () {\n
    it("should calculate/estimate the best return position for already fixed column", function () {\n
      var hot = handsontable({\n
        data: Handsontable.helper.createSpreadsheetData(10, 10),\n
        manualColumnFreeze: true,\n
        fixedColumnsLeft: 2\n
      });\n
\n
      var plugin = hot.getPlugin(\'manualColumnFreeze\');\n
\n
      plugin.checkPositionData(5);\n
      plugin.modifyColumnOrder(4, 4, null, \'freeze\');\n
      plugin.addFixedColumn();\n
      // here manualColumnPositions looks like [0, 1, 4, 2, 3, 5] with 3 fixed columns\n
\n
      expect(plugin.getBestColumnReturnPosition(2)).toEqual(4);\n
      expect(plugin.getBestColumnReturnPosition(1)).toEqual(2);\n
      expect(plugin.getBestColumnReturnPosition(0)).toEqual(2);\n
\n
      plugin.addFixedColumn();\n
      expect(plugin.getBestColumnReturnPosition(2)).toEqual(4);\n
      expect(plugin.getBestColumnReturnPosition(1)).toEqual(3);\n
      expect(plugin.getBestColumnReturnPosition(0)).toEqual(3);\n
    });\n
  });\n
\n
  describe("freezeColumn", function () {\n
    it("should freeze (make fixed) the column provided as an argument", function () {\n
      var hot = handsontable({\n
        data: Handsontable.helper.createSpreadsheetData(10, 10),\n
        manualColumnFreeze: true,\n
        fixedColumnsLeft: 2\n
      });\n
\n
      var plugin = hot.getPlugin(\'manualColumnFreeze\');\n
\n
      plugin.freezeColumn(5);\n
\n
      expect(hot.getSettings().fixedColumnsLeft).toEqual(3);\n
      expect(hot.manualColumnPositions[2]).toEqual(5);\n
      expect(hot.manualColumnPositions[3]).toEqual(2);\n
      expect(hot.manualColumnPositions[4]).toEqual(3);\n
    });\n
  });\n
\n
  describe("unfreezeColumn", function () {\n
    it("should unfreeze (make non-fixed) the column provided as an argument", function () {\n
      var hot = handsontable({\n
        data: Handsontable.helper.createSpreadsheetData(10, 10),\n
        manualColumnFreeze: true,\n
        fixedColumnsLeft: 3\n
      });\n
\n
      var plugin = hot.getPlugin(\'manualColumnFreeze\');\n
\n
      plugin.unfreezeColumn(0);\n
\n
      expect(hot.getSettings().fixedColumnsLeft).toEqual(2);\n
      expect(hot.manualColumnPositions[0]).toEqual(1);\n
      expect(hot.manualColumnPositions[2]).toEqual(0);\n
      expect(hot.manualColumnPositions[3]).toEqual(3);\n
    });\n
  });\n
\n
  describe("functionality", function () {\n
\n
    it("should add a \'freeze this column\' context menu entry for non-fixed columns", function () {\n
      var hot = handsontable({\n
        data: Handsontable.helper.createSpreadsheetData(10, 10),\n
        manualColumnFreeze: true,\n
        contextMenu: true\n
      });\n
\n
      selectCell(1, 1);\n
      contextMenu();\n
\n
      var freezeEntry = $(hot.getPlugin(\'contextMenu\').menu.container).find("div").filter(function () {\n
        return $(this).text() === "Freeze this column";\n
\n
      });\n
\n
      expect(freezeEntry.size()).toEqual(1);\n
    });\n
\n
    it("should add a \'unfreeze this column\' context menu entry for fixed columns", function () {\n
      var hot = handsontable({\n
        data: Handsontable.helper.createSpreadsheetData(10, 10),\n
        manualColumnFreeze: true,\n
        contextMenu: true,\n
        fixedColumnsLeft: 2\n
      });\n
\n
      selectCell(1, 1);\n
      contextMenu();\n
\n
      var freezeEntry = $(hot.getPlugin(\'contextMenu\').menu.container).find("div").filter(function () {\n
        return $(this).text() === "Unfreeze this column";\n
\n
      });\n
\n
      expect(freezeEntry.size()).toEqual(1);\n
    });\n
\n
    it("should fix the desired column after clicking the \'freeze this column\' context menu entry", function () {\n
      var hot = handsontable({\n
        data: Handsontable.helper.createSpreadsheetData(10, 10),\n
        manualColumnFreeze: true,\n
        fixedColumnsLeft: 1,\n
        contextMenu: true\n
      });\n
\n
      selectCell(1, 3);\n
\n
      var dataAtCell = hot.getDataAtCell(1, 3);\n
\n
      contextMenu();\n
\n
      var freezeEntry = $(hot.getPlugin(\'contextMenu\').menu.container).find("div").filter(function () {\n
        if ($(this).text() === "Freeze this column") {\n
          return true;\n
        }\n
        return false;\n
      });\n
\n
      expect(freezeEntry.size()).toEqual(1);\n
      freezeEntry.eq(0).simulate("mousedown");\n
\n
      expect(hot.getSettings().fixedColumnsLeft).toEqual(2);\n
      expect(hot.getDataAtCell(1, 1)).toEqual(dataAtCell);\n
\n
    });\n
\n
    it("should unfix the desired column (and revert it to it\'s original position) after clicking the \'unfreeze this column\' context menu entry", function () {\n
      var hot = handsontable({\n
        data: Handsontable.helper.createSpreadsheetData(10, 10),\n
        manualColumnFreeze: true,\n
        fixedColumnsLeft: 3,\n
        manualColumnMove: [0, 2, 5, 3, 4, 1, 6, 7, 8, 9],\n
        contextMenu: true\n
      });\n
\n
      var dataAtCell = hot.getDataAtCell(1, 0);\n
      expect(dataAtCell).toEqual("A2");\n
      dataAtCell = hot.getDataAtCell(1, 1);\n
      expect(dataAtCell).toEqual("C2");\n
      dataAtCell = hot.getDataAtCell(1, 2);\n
      expect(dataAtCell).toEqual("F2");\n
\n
      selectCell(1, 1);\n
      contextMenu();\n
\n
      var freezeEntry = $(hot.getPlugin(\'contextMenu\').menu.container).find("div").filter(function () {\n
        return $(this).text() === "Unfreeze this column";\n
\n
      });\n
      freezeEntry.eq(0).simulate("mousedown");\n
\n
      expect(hot.getSettings().fixedColumnsLeft).toEqual(2);\n
      dataAtCell = hot.getDataAtCell(1, 0);\n
      expect(dataAtCell).toEqual("A2");\n
      dataAtCell = hot.getDataAtCell(1, 1);\n
      expect(dataAtCell).toEqual("F2");\n
      dataAtCell = hot.getDataAtCell(1, 2);\n
      expect(dataAtCell).toEqual("C2");\n
\n
      selectCell(1, 1);\n
      contextMenu();\n
\n
      freezeEntry = $(hot.getPlugin(\'contextMenu\').menu.container).find("div").filter(function () {\n
        if ($(this).text() === "Unfreeze this column") {\n
          return true;\n
        }\n
        return false;\n
      });\n
      freezeEntry.eq(0).simulate("mousedown");\n
\n
      expect(hot.getSettings().fixedColumnsLeft).toEqual(1);\n
      dataAtCell = hot.getDataAtCell(1, 0);\n
      expect(dataAtCell).toEqual("A2");\n
      dataAtCell = hot.getDataAtCell(1, 1);\n
      expect(dataAtCell).toEqual("C2");\n
      dataAtCell = hot.getDataAtCell(1, 2);\n
      expect(dataAtCell).toEqual("D2");\n
\n
      dataAtCell = hot.getDataAtCell(1, 5);\n
      expect(dataAtCell).toEqual("F2");\n
    });\n
\n
  });\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>9705</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>manualColumnFreeze.spec.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
