<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41272674.43</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>manualRowResize.spec.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

describe(\'manualRowResize\', function () {\n
  var id = \'test\';\n
  var defaultRowHeight = 22;\n
\n
  beforeEach(function () {\n
    this.$container = $(\'<div id="\' + id + \'"></div>\').appendTo(\'body\');\n
  });\n
\n
  afterEach(function () {\n
    if (this.$container) {\n
      destroy();\n
      this.$container.remove();\n
    }\n
  });\n
\n
  it("should change row heights at init", function () {\n
    handsontable({\n
      rowHeaders: true,\n
      manualRowResize: [50, 40, 100]\n
    });\n
\n
    expect(rowHeight(this.$container, 0)).toEqual(51);\n
    expect(rowHeight(this.$container, 1)).toEqual(40);\n
    expect(rowHeight(this.$container, 2)).toEqual(100);\n
  });\n
\n
  it("should change the default row height with updateSettings", function () {\n
    handsontable({\n
      manualRowResize: true\n
    });\n
\n
    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2); // + Double border\n
    expect(rowHeight(this.$container, 1)).toEqual(defaultRowHeight + 1); // + Single border\n
    expect(rowHeight(this.$container, 2)).toEqual(defaultRowHeight + 1); // + Single border\n
\n
    updateSettings({\n
      manualRowResize: [60, 50, 80]\n
    });\n
\n
    expect(rowHeight(this.$container, 0)).toEqual(61);\n
    expect(rowHeight(this.$container, 1)).toEqual(50);\n
    expect(rowHeight(this.$container, 2)).toEqual(80);\n
  });\n
\n
  it("should change the row height with updateSettings", function () {\n
    handsontable({\n
      manualRowResize: [60, 50, 80]\n
    });\n
\n
    expect(rowHeight(this.$container, 0)).toEqual(61);\n
    expect(rowHeight(this.$container, 1)).toEqual(50);\n
    expect(rowHeight(this.$container, 2)).toEqual(80);\n
\n
    updateSettings({\n
      manualRowResize: [30, 80, 100]\n
    });\n
\n
    expect(rowHeight(this.$container, 0)).toEqual(31);\n
    expect(rowHeight(this.$container, 1)).toEqual(80);\n
    expect(rowHeight(this.$container, 2)).toEqual(100);\n
  });\n
\n
  it("should reset row height", function () {\n
    handsontable({\n
      manualRowResize: true\n
    });\n
\n
    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2);\n
    expect(rowHeight(this.$container, 1)).toEqual(defaultRowHeight + 1);\n
    expect(rowHeight(this.$container, 2)).toEqual(defaultRowHeight + 1);\n
\n
    updateSettings({\n
      manualRowResize: true\n
    });\n
\n
    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2);\n
    expect(rowHeight(this.$container, 1)).toEqual(defaultRowHeight + 1);\n
    expect(rowHeight(this.$container, 2)).toEqual(defaultRowHeight + 1);\n
  });\n
\n
  it("should trigger afterRowResize event after row height changes", function () {\n
    var afterRowResizeCallback = jasmine.createSpy(\'afterRowResizeCallback\');\n
\n
    handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(5, 5),\n
      rowHeaders: true,\n
      manualRowResize: true,\n
      afterRowResize: afterRowResizeCallback\n
    });\n
\n
    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2);\n
\n
    resizeRow(0, 100);\n
    expect(afterRowResizeCallback).toHaveBeenCalledWith(0, 100, void 0, void 0, void 0, void 0);\n
    expect(rowHeight(this.$container, 0)).toEqual(101);\n
  });\n
\n
  it("should not trigger afterRowResize event if row height does not change (delta = 0)", function () {\n
    var afterRowResizeCallback = jasmine.createSpy(\'afterRowResizeCallback\');\n
\n
    handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(5, 5),\n
      rowHeaders: true,\n
      manualRowResize: true,\n
      afterRowResize: afterRowResizeCallback\n
    });\n
\n
    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2);\n
\n
    resizeRow(0, defaultRowHeight);\n
    expect(afterRowResizeCallback).not.toHaveBeenCalled();\n
    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2);\n
  });\n
\n
  it("should not trigger afterRowResize event after if row height does not change (no mousemove event)", function () {\n
    var afterRowResizeCallback = jasmine.createSpy(\'afterRowResizeCallback\');\n
\n
    handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(5, 5),\n
      rowHeaders: true,\n
      manualRowResize: true,\n
      afterRowResize: afterRowResizeCallback\n
    });\n
\n
    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2);\n
\n
    var $th = this.$container.find(\'tbody tr:eq(0) th:eq(0)\');\n
    $th.simulate(\'mouseover\');\n
\n
    var $resizer = this.$container.find(\'.manualRowResizer\');\n
    var resizerPosition = $resizer.position();\n
\n
//    var mouseDownEvent = new $.Event(\'mousedown\', {pageY: resizerPosition.top});\n
    $resizer.simulate(\'mousedown\',{\n
      clientY: resizerPosition.top\n
    });\n
\n
    $resizer.simulate(\'mouseup\');\n
\n
    expect(afterRowResizeCallback).not.toHaveBeenCalled();\n
    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2);\n
  });\n
\n
  it("should trigger an afterRowResize after row size changes, after double click", function () {\n
    var afterRowResizeCallback = jasmine.createSpy(\'afterRowResizeCallback\');\n
\n
    handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(5, 5),\n
      rowHeaders: true,\n
      manualRowResize: true,\n
      autoRowSize: true,\n
      afterRowResize: afterRowResizeCallback\n
    });\n
\n
    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2);\n
\n
    var $th = this.$container.find(\'tbody tr:eq(2) th:eq(0)\');\n
    $th.simulate(\'mouseover\');\n
\n
    var $resizer = this.$container.find(\'.manualRowResizer\');\n
    var resizerPosition = $resizer.position();\n
\n
    $resizer.simulate(\'mousedown\',{\n
      clientY: resizerPosition.top\n
    });\n
    $resizer.simulate(\'mouseup\');\n
\n
    $resizer.simulate(\'mousedown\',{\n
      clientY:resizerPosition.top\n
    });\n
    $resizer.simulate(\'mouseup\');\n
\n
    waitsFor(function() {\n
      return afterRowResizeCallback.calls.length > 0;\n
    }, \'Row resize\', 500);\n
\n
    runs(function () {\n
      expect(afterRowResizeCallback.calls.length).toEqual(1);\n
      expect(afterRowResizeCallback.calls[0].args[0]).toEqual(2);\n
\n
      expect(afterRowResizeCallback.calls[0].args[1]).toEqual(defaultRowHeight + 1);\n
      expect(rowHeight(this.$container, 2)).toEqual(defaultRowHeight + 1);\n
    });\n
  });\n
\n
  it("should not trigger afterRowResize event after if row height does not change (no dblclick event)", function () {\n
    var afterRowResizeCallback = jasmine.createSpy(\'afterRowResizeCallback\');\n
\n
    handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(5, 5),\n
      rowHeaders: true,\n
      manualRowResize: true,\n
      afterRowResize: afterRowResizeCallback\n
    });\n
\n
    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2);\n
\n
    var $th = this.$container.find(\'tbody tr:eq(2) th:eq(0)\');\n
    $th.simulate(\'mouseover\');\n
\n
    var $resizer = this.$container.find(\'.manualRowResizer\');\n
    var resizerPosition = $resizer.position();\n
\n
    $resizer.simulate(\'mousedown\',{\n
      clientY:resizerPosition.top\n
    });\n
    $resizer.simulate(\'mouseup\');\n
\n
    expect(afterRowResizeCallback).not.toHaveBeenCalled();\n
    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2);\n
  })\n
\n
  it("should display the resize handle in the correct place after the table has been scrolled", function () {\n
    var hot = handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(20, 20),\n
      rowHeaders: true,\n
      manualRowResize: true,\n
      height: 100,\n
      width: 200\n
    });\n
\n
    var mainHolder = hot.view.wt.wtTable.holder;\n
\n
    var $rowHeader = this.$container.find(\'.ht_clone_left tbody tr:eq(2) th:eq(0)\');\n
    $rowHeader.simulate("mouseover");\n
    var $handle = this.$container.find(\'.manualRowResizer\');\n
    $handle[0].style.background = "red";\n
\n
    expect($rowHeader.offset().left).toEqual($handle.offset().left);\n
    expect($rowHeader.offset().top + $rowHeader.height() - 5).toEqual($handle.offset().top);\n
\n
    $(mainHolder).scrollTop(200);\n
    $(mainHolder).scroll();\n
\n
    $rowHeader = this.$container.find(\'.ht_clone_left tbody tr:eq(2) th:eq(0)\');\n
    $rowHeader.simulate("mouseover");\n
    expect($rowHeader.offset().left).toEqual($handle.offset().left);\n
    expect($rowHeader.offset().top + $rowHeader.height() - 5).toEqual($handle.offset().top);\n
  });\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>7991</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>manualRowResize.spec.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
