<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41272645.55</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>manualColumnMove.spec.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

describe(\'manualColumnMove\', function () {\n
  var id = \'testContainer\';\n
\n
  beforeEach(function () {\n
    this.$container = $(\'<div id="\' + id + \'"></div>\').appendTo(\'body\');\n
  });\n
\n
  afterEach(function () {\n
    if (this.$container) {\n
      destroy();\n
      this.$container.remove();\n
    }\n
  });\n
\n
  it("should change column order at init", function () {\n
    handsontable({\n
      data: [\n
        {id: 1, name: "Ted", lastName: "Right"},\n
        {id: 2, name: "Frank", lastName: "Honest"},\n
        {id: 3, name: "Joan", lastName: "Well"},\n
        {id: 4, name: "Sid", lastName: "Strong"},\n
        {id: 5, name: "Jane", lastName: "Neat"},\n
        {id: 6, name: "Chuck", lastName: "Jackson"},\n
        {id: 7, name: "Meg", lastName: "Jansen"},\n
        {id: 8, name: "Rob", lastName: "Norris"},\n
        {id: 9, name: "Sean", lastName: "O\'Hara"},\n
        {id: 10, name: "Eve", lastName: "Branson"}\n
      ],\n
      manualColumnMove: [1, 2, 0]\n
    });\n
\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'Ted\');\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Right\');\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'1\');\n
  });\n
\n
  it("should change the default column order with updateSettings", function () {\n
    handsontable({\n
      data: [\n
        {id: 1, name: "Ted", lastName: "Right"},\n
        {id: 2, name: "Frank", lastName: "Honest"},\n
        {id: 3, name: "Joan", lastName: "Well"},\n
        {id: 4, name: "Sid", lastName: "Strong"},\n
        {id: 5, name: "Jane", lastName: "Neat"},\n
        {id: 6, name: "Chuck", lastName: "Jackson"},\n
        {id: 7, name: "Meg", lastName: "Jansen"},\n
        {id: 8, name: "Rob", lastName: "Norris"},\n
        {id: 9, name: "Sean", lastName: "O\'Hara"},\n
        {id: 10, name: "Eve", lastName: "Branson"}\n
      ],\n
      manualColumnMove: true\n
    });\n
\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'1\');\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Ted\');\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'Right\');\n
\n
    updateSettings({\n
      manualColumnMove: [2, 1, 0]\n
    });\n
\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'Right\');\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Ted\');\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'1\');\n
  });\n
\n
  it("should change column order with updateSettings", function () {\n
    handsontable({\n
      data: [\n
        {id: 1, name: "Ted", lastName: "Right"},\n
        {id: 2, name: "Frank", lastName: "Honest"},\n
        {id: 3, name: "Joan", lastName: "Well"},\n
        {id: 4, name: "Sid", lastName: "Strong"},\n
        {id: 5, name: "Jane", lastName: "Neat"},\n
        {id: 6, name: "Chuck", lastName: "Jackson"},\n
        {id: 7, name: "Meg", lastName: "Jansen"},\n
        {id: 8, name: "Rob", lastName: "Norris"},\n
        {id: 9, name: "Sean", lastName: "O\'Hara"},\n
        {id: 10, name: "Eve", lastName: "Branson"}\n
      ],\n
      manualColumnMove: [1, 2, 0]\n
    });\n
\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'Ted\');\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Right\');\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'1\');\n
\n
    updateSettings({\n
      manualColumnMove: [2, 1, 0]\n
    });\n
\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'Right\');\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Ted\');\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'1\');\n
  });\n
\n
  it("should reset column order", function () {\n
    handsontable({\n
      data: [\n
        {id: 1, name: "Ted", lastName: "Right"},\n
        {id: 2, name: "Frank", lastName: "Honest"},\n
        {id: 3, name: "Joan", lastName: "Well"},\n
        {id: 4, name: "Sid", lastName: "Strong"},\n
        {id: 5, name: "Jane", lastName: "Neat"},\n
        {id: 6, name: "Chuck", lastName: "Jackson"},\n
        {id: 7, name: "Meg", lastName: "Jansen"},\n
        {id: 8, name: "Rob", lastName: "Norris"},\n
        {id: 9, name: "Sean", lastName: "O\'Hara"},\n
        {id: 10, name: "Eve", lastName: "Branson"}\n
      ],\n
      manualColumnMove: [1, 2, 0]\n
    });\n
\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'Ted\');\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Right\');\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'1\');\n
\n
    updateSettings({\n
      manualColumnMove: true\n
    });\n
\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'1\');\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Ted\');\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'Right\');\n
  });\n
\n
  it("should move columns when viewport has been scrolled", function () {\n
    this.$container.width(120);\n
\n
    var hot = handsontable({\n
      data: [\n
        {id: 1, name: "Ted", lastName: "Right"},\n
        {id: 2, name: "Frank", lastName: "Honest"},\n
        {id: 3, name: "Joan", lastName: "Well"},\n
        {id: 4, name: "Sid", lastName: "Strong"},\n
        {id: 5, name: "Jane", lastName: "Neat"},\n
        {id: 6, name: "Chuck", lastName: "Jackson"},\n
        {id: 7, name: "Meg", lastName: "Jansen"},\n
        {id: 8, name: "Rob", lastName: "Norris"},\n
        {id: 9, name: "Sean", lastName: "O\'Hara"},\n
        {id: 10, name: "Eve", lastName: "Branson"}\n
      ],\n
      colHeaders: true,\n
      manualColumnMove: true\n
    });\n
\n
    var htCore = getHtCore();\n
\n
    selectCell(0, 2);\n
\n
    var lastVisibleColumnIndex = hot.view.wt.wtTable.getLastVisibleColumn();\n
\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(\' + (lastVisibleColumnIndex - 1) +\')\').text()).toEqual(\'Ted\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(\' + lastVisibleColumnIndex +\')\').text()).toEqual(\'Right\');\n
\n
    //wait for clones to reposition after table scroll\n
    waits(100);\n
\n
    runs(function () {\n
      moveSecondDisplayedColumnBeforeFirstColumn(htCore, lastVisibleColumnIndex);\n
\n
      expect(htCore.find(\'tbody tr:eq(0) td:eq(\' + (lastVisibleColumnIndex - 1) +\')\').text()).toEqual(\'Right\');\n
      expect(htCore.find(\'tbody tr:eq(0) td:eq(\' + lastVisibleColumnIndex +\')\').text()).toEqual(\'Ted\');\n
\n
    });\n
\n
  });\n
\n
  it("should move columns only in specific HOT instance", function () {\n
\n
    this.$container2 = $(\'<div id="\' + id + \'-2" style="width: 300px; height: 200px;"></div>\').appendTo(\'body\');\n
\n
    this.$container2.width(120);\n
    this.$container.width(120);\n
\n
    handsontable({\n
      data: [\n
        {id: 1, name: "Ted", lastName: "Left"},\n
        {id: 2, name: "Frank", lastName: "Sincere"},\n
        {id: 3, name: "Joan", lastName: "Well"},\n
        {id: 4, name: "Sid", lastName: "Strong"},\n
        {id: 5, name: "Jane", lastName: "Neat"},\n
        {id: 6, name: "Chuck", lastName: "Jackson"},\n
        {id: 7, name: "Meg", lastName: "Jansen"},\n
        {id: 8, name: "Rob", lastName: "Norris"},\n
        {id: 9, name: "Sean", lastName: "O\'Hara"},\n
        {id: 10, name: "Eve", lastName: "Branson"}\n
      ],\n
      colHeaders: true,\n
      manualColumnMove: true\n
    });\n
\n
    var htCore1 = getHtCore();\n
\n
    this.$container2.handsontable({\n
      data: [\n
        {id: 1, name: "Ted", lastName: "Right"},\n
        {id: 2, name: "Frank", lastName: "Honest"},\n
        {id: 3, name: "Joan", lastName: "Well"},\n
        {id: 4, name: "Sid", lastName: "Strong"},\n
        {id: 5, name: "Jane", lastName: "Neat"},\n
        {id: 6, name: "Chuck", lastName: "Jackson"},\n
        {id: 7, name: "Meg", lastName: "Jansen"},\n
        {id: 8, name: "Rob", lastName: "Norris"},\n
        {id: 9, name: "Sean", lastName: "O\'Hara"},\n
        {id: 10, name: "Eve", lastName: "Branson"}\n
      ],\n
      colHeaders: true,\n
      manualColumnMove: true\n
    });\n
\n
    var hot2 = this.$container2.handsontable(\'getInstance\');\n
    var htCore2 = this.$container2.find(\'.htCore\');\n
\n
    hot2.selectCell(0, 0);\n
    expect(htCore1.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'1\');\n
    expect(htCore1.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Ted\');\n
    expect(htCore1.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'Left\');\n
\n
    expect(htCore2.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'1\');\n
    expect(htCore2.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Ted\');\n
    expect(htCore2.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'Right\');\n
\n
    moveSecondDisplayedColumnBeforeFirstColumn(htCore2, 1);\n
\n
    expect(htCore1.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'1\');\n
    expect(htCore1.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Ted\');\n
    expect(htCore1.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'Left\');\n
\n
    expect(htCore2.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'Ted\');\n
    expect(htCore2.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'1\');\n
    expect(htCore2.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'Right\');\n
\n
    hot2.destroy();\n
    this.$container2.remove();\n
  });\n
\n
  it("should mark apropriate column as invalid, when column order is changed", function () {\n
\n
    var onAfterValidate = jasmine.createSpy(\'onAfterValidate\');\n
\n
    handsontable({\n
      data: [\n
        {id: 1, name: "Ted", lastName: "Right"},\n
        {id: 2, name: "Frank", lastName: "Honest"},\n
        {id: 3, name: "Joan", lastName: "Well"},\n
        {id: 4, name: "Sid", lastName: "Strong"},\n
        {id: 5, name: "Jane", lastName: "Neat"},\n
        {id: 6, name: "Chuck", lastName: "Jackson"},\n
        {id: 7, name: "Meg", lastName: "Jansen"},\n
        {id: 8, name: "Rob", lastName: "Norris"},\n
        {id: 9, name: "Sean", lastName: "O\'Hara"},\n
        {id: 10, name: "Eve", lastName: "Branson"}\n
      ],\n
      colHeaders: true,\n
      manualColumnMove: [2, 0, 1],\n
      columns: [\n
        {\n
          type: \'numeric\',\n
          data: \'id\'\n
        },\n
        {\n
          data: \'name\'\n
        },\n
        {\n
          data: \'lastName\'\n
        }\n
      ],\n
      allowInvalid: true,\n
      afterValidate: onAfterValidate\n
    });\n
\n
    selectCell(0, 1);\n
    keyDownUp(\'enter\');\n
    var editor = $(\'.handsontableInput\');\n
    editor.val(\'foo\');\n
\n
    onAfterValidate.reset();\n
    keyDownUp(\'enter\');\n
\n
    waitsFor(function () {\n
      return onAfterValidate.calls.length > 0;\n
    }, \'Cell validation 2\', 1000);\n
\n
    runs(function () {\n
      expect(this.$container.find(\'.htInvalid\').length).toEqual(1);\n
      expect(this.$container.find(\'.htInvalid\').text()).toMatch(\'foo\');\n
    });\n
\n
  });\n
\n
  it("should display the move handle in the correct place after the table has been scrolled", function () {\n
    var hot = handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(10, 20),\n
      colHeaders: true,\n
      manualColumnMove: true,\n
      height: 100,\n
      width: 200\n
    });\n
\n
    var mainHolder = hot.view.wt.wtTable.holder;\n
\n
    var $colHeader = this.$container.find(\'.ht_clone_top thead tr:eq(0) th:eq(2)\');\n
//    $colHeader.trigger("mouseenter");\n
    $colHeader.simulate("mouseover");\n
    var $handle = this.$container.find(\'.manualColumnMover\');\n
    $handle[0].style.background = "red";\n
\n
    expect($colHeader.offset().left).toEqual($handle.offset().left);\n
    expect($colHeader.offset().top).toEqual($handle.offset().top);\n
\n
    $(mainHolder).scrollLeft(200);\n
    hot.render();\n
\n
    $colHeader = this.$container.find(\'.ht_clone_top thead tr:eq(0) th:eq(3)\');\n
//    $colHeader.trigger("mouseenter");\n
    $colHeader.simulate("mouseover");\n
    expect($colHeader.offset().left).toEqual($handle.offset().left);\n
    expect($colHeader.offset().top).toEqual($handle.offset().top);\n
  });\n
\n
  it("should not move the column if you click the handle without dragging", function () {\n
    handsontable({\n
      data: [\n
        {id: 1, name: "Ted", lastName: "Right"}\n
      ],\n
      colHeaders: true,\n
      manualColumnMove: true\n
    });\n
\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'1\');\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Ted\');\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'Right\');\n
\n
    selectCell(0, 0);\n
\n
    var $colHeader = this.$container.find(\'.ht_clone_top thead tr:eq(0) th:eq(2)\');\n
//    $colHeader.trigger("mouseenter");\n
    $colHeader.simulate("mouseover");\n
    var $manualColumnMover = this.$container.find(\'.manualColumnMover\');\n
\n
    //Grab the column\n
    $manualColumnMover.simulate(\'mousedown\',{\n
      pageX:$manualColumnMover[0].getBoundingClientRect().left\n
    });\n
\n
    //Drop it without dragging\n
//    $colHeader.trigger(\'mouseup\');\n
    $colHeader.simulate(\'mouseup\');\n
\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'1\');\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Ted\');\n
    expect(this.$container.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'Right\');\n
  });\n
\n
  it("should return an appropriate column width, when column order has changed", function () {\n
    var hot = handsontable({\n
      columns: [\n
        {\n
          width: 50\n
        },\n
        {\n
          width: 60\n
        },\n
        {\n
          width: 70\n
        }\n
      ]\n
    });\n
\n
    expect(hot.getColWidth(0)).toEqual(50);\n
    expect(hot.getColWidth(1)).toEqual(60);\n
    expect(hot.getColWidth(2)).toEqual(70);\n
\n
    hot.updateSettings({\n
      manualColumnMove: [2, 0, 1]\n
    });\n
\n
    expect(hot.getColWidth(0)).toEqual(70);\n
    expect(hot.getColWidth(1)).toEqual(50);\n
    expect(hot.getColWidth(2)).toEqual(60);\n
\n
\n
  });\n
\n
  it("should not change the default spreadsheet-like column headers when column order has changed ", function(){\n
    var hot = handsontable({\n
      data: [\n
        {id: 1, name: "Ted", lastName: "Right"},\n
        {id: 2, name: "Frank", lastName: "Honest"},\n
        {id: 3, name: "Joan", lastName: "Well"},\n
        {id: 4, name: "Sid", lastName: "Strong"}\n
      ],\n
      colHeaders: true,\n
      columns: [\n
        {\n
          type: \'numeric\',\n
          data: \'id\'\n
        },\n
        {\n
          data: \'name\'\n
        },\n
        {\n
          data: \'lastName\'\n
        }\n
      ]\n
    });\n
\n
    if(hot.getSettings().colHeaders === true) {\n
      expect(hot.getColHeader(0)).toEqual(\'A\');\n
      expect(hot.getColHeader(1)).toEqual(\'B\');\n
      expect(hot.getColHeader(2)).toEqual(\'C\');\n
\n
      hot.updateSettings({\n
        manualColumnMove: [2, 0, 1]\n
      });\n
\n
      expect(hot.getColHeader(0)).toEqual(\'A\');\n
      expect(hot.getColHeader(1)).toEqual(\'B\');\n
      expect(hot.getColHeader(2)).toEqual(\'C\');\n
    }\n
\n
  });\n
\n
  it("should change the custom column headers order when column order has changed", function(){\n
    var hot = handsontable({\n
      data: [\n
        {id: 1, name: "Ted", lastName: "Right"},\n
        {id: 2, name: "Frank", lastName: "Honest"},\n
        {id: 3, name: "Joan", lastName: "Well"},\n
        {id: 4, name: "Sid", lastName: "Strong"}\n
      ],\n
      colHeaders: ["Id","Name","Last Name"],\n
      columns: [\n
        {\n
          type: \'numeric\',\n
          data: \'id\'\n
        },\n
        {\n
          data: \'name\'\n
        },\n
        {\n
          data: \'lastName\'\n
        }\n
      ]\n
    });\n
\n
    if(!hot.getSettings().colHeaders === true) {\n
      expect(hot.getColHeader(0)).toEqual(\'Id\');\n
      expect(hot.getColHeader(1)).toEqual(\'Name\');\n
      expect(hot.getColHeader(2)).toEqual(\'Last Name\');\n
\n
      hot.updateSettings({\n
        manualColumnMove: [2, 0, 1]\n
      });\n
\n
      expect(hot.getColHeader(0)).toEqual(\'Last Name\');\n
      expect(hot.getColHeader(1)).toEqual(\'Id\');\n
      expect(hot.getColHeader(2)).toEqual(\'Name\');\n
    }\n
  });\n
\n
  it("should not select the column when the user clicks the move handler", function() {\n
    var hot = handsontable({\n
      data: [\n
        {id: 1, name: "Ted", lastName: "Right"},\n
        {id: 2, name: "Frank", lastName: "Honest"},\n
        {id: 3, name: "Joan", lastName: "Well"},\n
        {id: 4, name: "Sid", lastName: "Strong"},\n
        {id: 5, name: "Jane", lastName: "Neat"}\n
      ],\n
      colHeaders: true,\n
      manualColumnMove: true\n
    });\n
\n
    var $colHeader = this.$container.find(\'.ht_clone_top thead tr:eq(0) th:eq(1)\');\n
    $colHeader.simulate("mouseover");\n
    var $manualColumnMover = this.$container.find(\'.manualColumnMover\');\n
\n
    $manualColumnMover.eq(1).simulate(\'mousedown\');\n
\n
    expect(hot.getSelected()).toEqual(undefined);\n
\n
  });\n
\n
  it("should display the resize handle in the correct place after the table has been scrolled", function () {\n
    var hot = handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(10, 20),\n
      colHeaders: true,\n
      manualColumnMove: true,\n
      height: 100,\n
      width: 200\n
    });\n
\n
    var mainHolder = hot.view.wt.wtTable.holder;\n
\n
    var $colHeader = this.$container.find(\'.ht_clone_top thead tr:eq(0) th:eq(2)\');\n
    $colHeader.simulate("mouseover");\n
    var $handle = this.$container.find(\'.manualColumnMover\');\n
    $handle[0].style.background = "red";\n
\n
    expect($colHeader.offset().left).toEqual($handle.offset().left);\n
    expect($colHeader.offset().top).toEqual($handle.offset().top);\n
\n
    $(mainHolder).scrollLeft(200);\n
    hot.render();\n
\n
    $colHeader = this.$container.find(\'.ht_clone_top thead tr:eq(0) th:eq(3)\');\n
    $colHeader.simulate("mouseover");\n
    expect($colHeader.offset().left).toEqual($handle.offset().left);\n
    expect($colHeader.offset().top).toEqual($handle.offset().top);\n
  });\n
\n
  it("should move the first column to the second column", function () {\n
    handsontable({\n
      data: [\n
        {id: 1, name: "Ted", lastName: "Right"},\n
        {id: 2, name: "Frank", lastName: "Honest"},\n
        {id: 3, name: "Joan", lastName: "Well"},\n
        {id: 4, name: "Sid", lastName: "Strong"},\n
        {id: 5, name: "Jane", lastName: "Neat"}\n
      ],\n
      colHeaders: true,\n
      manualColumnMove: true\n
    });\n
\n
    var htCore = getHtCore();\n
\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'1\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Ted\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'Right\');\n
\n
    moveFirstDisplayedColumnAfterSecondColumn(htCore, 0);\n
\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'Ted\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'1\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'Right\');\n
  });\n
\n
  it("should move the second column to the third column", function () {\n
    handsontable({\n
      data: [\n
        {id: 1, name: "Ted", lastName: "Right"},\n
        {id: 2, name: "Frank", lastName: "Honest"},\n
        {id: 3, name: "Joan", lastName: "Well"},\n
        {id: 4, name: "Sid", lastName: "Strong"},\n
        {id: 5, name: "Jane", lastName: "Neat"}\n
      ],\n
      colHeaders: true,\n
      manualColumnMove: true\n
    });\n
\n
    var htCore = getHtCore();\n
\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'1\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Ted\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'Right\');\n
\n
    moveFirstDisplayedColumnAfterSecondColumn(htCore, 1);\n
\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'1\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Right\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'Ted\');\n
  });\n
\n
  it("should not move the column when dropped in the row header column", function () {\n
    handsontable({\n
      data: [\n
        {id: 1, name: "Ted", lastName: "Right", color: "Blue"},\n
        {id: 2, name: "Frank", lastName: "Honest", color: "Red"},\n
        {id: 3, name: "Joan", lastName: "Well", color: "Yellow"},\n
        {id: 4, name: "Sid", lastName: "Strong", color: "Black"},\n
        {id: 5, name: "Jane", lastName: "Neat", color: "White"}\n
      ],\n
      colHeaders: true,\n
      rowHeaders: true,\n
      manualColumnMove: true\n
    });\n
\n
    var htCore = getHtCore();\n
\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'1\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Ted\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'Right\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(3)\').text()).toEqual(\'Blue\');\n
\n
    moveSecondDisplayedColumnBeforeFirstColumn(htCore, 1);\n
\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'1\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Ted\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'Right\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(3)\').text()).toEqual(\'Blue\');\n
  });\n
\n
  it("should not display the move handler in the row header column", function () {\n
    handsontable({\n
      data: [\n
        {id: 1, name: "Ted", lastName: "Right", color: "Blue"},\n
        {id: 2, name: "Frank", lastName: "Honest", color: "Red"},\n
        {id: 3, name: "Joan", lastName: "Well", color: "Yellow"},\n
        {id: 4, name: "Sid", lastName: "Strong", color: "Black"},\n
        {id: 5, name: "Jane", lastName: "Neat", color: "White"}\n
      ],\n
      colHeaders: true,\n
      rowHeaders: true,\n
      manualColumnMove: true\n
    });\n
\n
    var htCore = getHtCore();\n
\n
    var $mainContainer = htCore.parents(".handsontable").not("[class*=clone]").not("[class*=master]").first();\n
    var $colHeaders = htCore.find(\'thead tr:eq(0) th\');\n
    var $rowHeader = $colHeaders.eq(0);\n
    var $firstColHeader = $colHeaders.eq(1);\n
\n
    //Enter the first column header\n
    $firstColHeader.simulate(\'mouseover\');\n
    var $manualColumnMover = $mainContainer.find(\'.manualColumnMover\');\n
\n
    //Grab the first column\n
    $manualColumnMover.simulate(\'mousedown\',{\n
      pageX:$manualColumnMover[0].getBoundingClientRect().left\n
    });\n
\n
    //Drag the first column over the row header column\n
    $manualColumnMover.simulate(\'mousemove\',{\n
      pageX:$manualColumnMover[0].getBoundingClientRect().left - 20\n
    });\n
\n
    $rowHeader.simulate(\'mouseover\');\n
\n
    expect($manualColumnMover[0].getBoundingClientRect().left).not.toEqual($rowHeader[0].getBoundingClientRect().left);\n
    expect($manualColumnMover[0].getBoundingClientRect().left).toEqual($firstColHeader[0].getBoundingClientRect().left);\n
\n
\n
    //Drop the second column\n
    $firstColHeader.trigger(\'mouseup\');\n
  });\n
\n
  it("moving column should keep cell meta created using cells function", function () {\n
    handsontable({\n
      data: [\n
        {id: 1, name: "Ted", lastName: "Right"},\n
        {id: 2, name: "Frank", lastName: "Honest"},\n
        {id: 3, name: "Joan", lastName: "Well"},\n
        {id: 4, name: "Sid", lastName: "Strong"},\n
        {id: 5, name: "Jane", lastName: "Neat"}\n
      ],\n
      colHeaders: true,\n
      manualColumnMove: true,\n
      cells: function (row, col) {\n
        if (row == 0 && col == 1) {\n
          this.readOnly = true;\n
        }\n
      }\n
    });\n
\n
    var htCore = getHtCore();\n
\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(1)\')[0].className.indexOf("htDimmed")).toBeGreaterThan(-1);\n
\n
    moveFirstDisplayedColumnAfterSecondColumn(htCore, 1);\n
\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(2)\')[0].className.indexOf("htDimmed")).toBeGreaterThan(-1);\n
  });\n
\n
  it("moving column should keep cell meta created using cell array", function () {\n
    var hot = handsontable({\n
      data: [\n
        {id: 1, name: "Ted", lastName: "Right"},\n
        {id: 2, name: "Frank", lastName: "Honest"},\n
        {id: 3, name: "Joan", lastName: "Well"},\n
        {id: 4, name: "Sid", lastName: "Strong"},\n
        {id: 5, name: "Jane", lastName: "Neat"}\n
      ],\n
      colHeaders: true,\n
      manualColumnMove: true,\n
      cell: [\n
        {row: 0, col: 1, readOnly: true}\n
      ]\n
    });\n
\n
    var htCore = getHtCore();\n
\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(1)\')[0].className.indexOf("htDimmed")).toBeGreaterThan(-1);\n
\n
    moveFirstDisplayedColumnAfterSecondColumn(htCore, 1);\n
\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(2)\')[0].className.indexOf("htDimmed")).toBeGreaterThan(-1);\n
\n
  });\n
\n
  it("should reconstruct manualcolpositions after adding columns", function () {\n
    var hot = handsontable({\n
      data: [\n
        ["", "Kia", "Nissan", "Toyota", "Honda"],\n
        ["2008", 10, 11, 12, 13],\n
        ["2009", 20, 11, 14, 13],\n
        ["2010", 30, 15, 12, 13]\n
      ],\n
      colHeaders: true,\n
      rowHeaders: true,\n
      manualColumnMove: true,\n
      contextMenu: true\n
    });\n
\n
    var htCore = getHtCore();\n
\n
    selectCell(0, 2);\n
\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Kia\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'Nissan\');\n
\n
    moveSecondDisplayedColumnBeforeFirstColumn(htCore, 3);\n
\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Nissan\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'Kia\');\n
    expect(hot.manualColumnPositions).toEqual([0, 2, 1, 3, 4]);\n
\n
    alter(\'insert_col\', 2);\n
\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Nissan\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'\');\n
    expect(hot.manualColumnPositions).toEqual([0, 3, 2, 1, 4, 5]);\n
  });\n
\n
  it("should reconstruct manualcolpositions after removing columns", function () {\n
    var hot = handsontable({\n
      data: [\n
        ["", "Kia", "Nissan", "Toyota", "Honda"],\n
        ["2008", 10, 11, 12, 13],\n
        ["2009", 20, 11, 14, 13],\n
        ["2010", 30, 15, 12, 13]\n
      ],\n
      colHeaders: true,\n
      rowHeaders: true,\n
      manualColumnMove: true,\n
      contextMenu: true\n
    });\n
\n
    var htCore = getHtCore();\n
\n
    selectCell(0, 2);\n
\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Kia\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'Nissan\');\n
\n
    moveSecondDisplayedColumnBeforeFirstColumn(htCore, 3);\n
\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Nissan\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'Kia\');\n
    expect(hot.manualColumnPositions).toEqual([0, 2, 1, 3, 4]);\n
\n
    alter(\'remove_col\', 2);\n
\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(0)\').text()).toEqual(\'\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(1)\').text()).toEqual(\'Kia\');\n
    expect(htCore.find(\'tbody tr:eq(0) td:eq(2)\').text()).toEqual(\'Toyota\');\n
    expect(hot.manualColumnPositions).toEqual([0, 1, 2, 3]);\n
  });\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>26500</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>manualColumnMove.spec.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
