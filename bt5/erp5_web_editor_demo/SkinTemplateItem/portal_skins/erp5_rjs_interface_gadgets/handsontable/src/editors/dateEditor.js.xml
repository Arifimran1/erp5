<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41272748.99</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>dateEditor.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

\n
import {addClass, outerHeight} from \'./../helpers/dom/element\';\n
import {deepExtend} from \'./../helpers/object\';\n
import {EventManager} from \'./../eventManager\';\n
import {getEditor, registerEditor} from \'./../editors\';\n
import {isMetaKey} from \'./../helpers/unicode\';\n
import {stopPropagation} from \'./../helpers/dom/event\';\n
import {TextEditor} from \'./textEditor\';\n
import moment from \'moment\';\n
import Pikaday from \'pikaday\';\n
\n
\n
Handsontable.editors = Handsontable.editors || {};\n
Handsontable.editors.DateEditor = DateEditor;\n
\n
/**\n
 * @private\n
 * @editor DateEditor\n
 * @class DateEditor\n
 * @dependencies TextEditor moment pikaday\n
 */\n
class DateEditor extends TextEditor {\n
  /**\n
   * @param {Core} hotInstance Handsontable instance\n
   */\n
  constructor(hotInstance) {\n
    this.$datePicker = null;\n
    this.datePicker = null;\n
    this.datePickerStyle = null;\n
    this.defaultDateFormat = \'DD/MM/YYYY\';\n
    this.isCellEdited = false;\n
    this.parentDestroyed = false;\n
\n
    super(hotInstance);\n
  }\n
\n
  init() {\n
    if (typeof moment !== \'function\') {\n
      throw new Error("You need to include moment.js to your project.");\n
    }\n
\n
    if (typeof Pikaday !== \'function\') {\n
      throw new Error("You need to include Pikaday to your project.");\n
    }\n
    super.init();\n
    this.instance.addHook(\'afterDestroy\', () => {\n
      this.parentDestroyed = true;\n
      this.destroyElements();\n
    });\n
  }\n
\n
  /**\n
   * Create data picker instance\n
   */\n
  createElements() {\n
    super.createElements();\n
\n
    this.datePicker = document.createElement(\'DIV\');\n
    this.datePickerStyle = this.datePicker.style;\n
    this.datePickerStyle.position = \'absolute\';\n
    this.datePickerStyle.top = 0;\n
    this.datePickerStyle.left = 0;\n
    this.datePickerStyle.zIndex = 9999;\n
\n
    addClass(this.datePicker, \'htDatepickerHolder\');\n
    document.body.appendChild(this.datePicker);\n
\n
    this.$datePicker = new Pikaday(this.getDatePickerConfig());\n
    const eventManager = new EventManager(this);\n
\n
    /**\n
     * Prevent recognizing clicking on datepicker as clicking outside of table\n
     */\n
    eventManager.addEventListener(this.datePicker, \'mousedown\', (event) => stopPropagation(event));\n
    this.hideDatepicker();\n
  }\n
\n
  /**\n
   * Destroy data picker instance\n
   */\n
  destroyElements() {\n
    this.$datePicker.destroy();\n
  }\n
\n
  /**\n
   * Prepare editor to appear\n
   *\n
   * @param {Number} row Row index\n
   * @param {Number} col Column index\n
   * @param {String} prop Property name (passed when datasource is an array of objects)\n
   * @param {HTMLTableCellElement} td Table cell element\n
   * @param {*} originalValue Original value\n
   * @param {Object} cellProperties Object with cell properties ({@see Core#getCellMeta})\n
   */\n
  prepare(row, col, prop, td, originalValue, cellProperties) {\n
    this._opened = false;\n
    super.prepare(row, col, prop, td, originalValue, cellProperties);\n
  }\n
\n
  /**\n
   * Open editor\n
   *\n
   * @param {Event} [event=null]\n
   */\n
  open(event = null) {\n
    super.open();\n
    this.showDatepicker(event);\n
  }\n
\n
  /**\n
   * Close editor\n
   */\n
  close() {\n
    this._opened = false;\n
    this.instance._registerTimeout(setTimeout(() => {\n
      this.instance.selection.refreshBorders();\n
    }, 0));\n
\n
    super.close();\n
  }\n
\n
  /**\n
   * @param {Boolean} [isCancelled=false]\n
   * @param {Boolean} [ctrlDown=false]\n
   */\n
  finishEditing(isCancelled = false, ctrlDown = false) {\n
    if (isCancelled) { // pressed ESC, restore original value\n
      // var value = this.instance.getDataAtCell(this.row, this.col);\n
      let value = this.originalValue;\n
\n
      if (value !== void 0) {\n
        this.setValue(value);\n
      }\n
    }\n
    this.hideDatepicker();\n
    super.finishEditing(isCancelled, ctrlDown);\n
  }\n
\n
  /**\n
   * Show data picker\n
   *\n
   * @param {Event} event\n
   */\n
  showDatepicker(event) {\n
    this.$datePicker.config(this.getDatePickerConfig());\n
\n
    let offset = this.TD.getBoundingClientRect();\n
    let dateFormat = this.cellProperties.dateFormat || this.defaultDateFormat;\n
    let datePickerConfig = this.$datePicker.config();\n
    let dateStr;\n
    let isMouseDown = this.instance.view.isMouseDown();\n
    let isMeta = event ? isMetaKey(event.keyCode) : false;\n
\n
    this.datePickerStyle.top = (window.pageYOffset + offset.top + outerHeight(this.TD)) + \'px\';\n
    this.datePickerStyle.left = (window.pageXOffset + offset.left) + \'px\';\n
\n
    this.$datePicker._onInputFocus = function() {};\n
    datePickerConfig.format = dateFormat;\n
\n
    if (this.originalValue) {\n
      dateStr = this.originalValue;\n
\n
      if (moment(dateStr, dateFormat, true).isValid()) {\n
        this.$datePicker.setMoment(moment(dateStr, dateFormat), true);\n
      }\n
      if (!isMeta && !isMouseDown) {\n
        this.setValue(\'\');\n
      }\n
\n
    } else {\n
      if (this.cellProperties.defaultDate) {\n
        dateStr = this.cellProperties.defaultDate;\n
\n
        datePickerConfig.defaultDate = dateStr;\n
\n
        if (moment(dateStr, dateFormat, true).isValid()) {\n
          this.$datePicker.setMoment(moment(dateStr, dateFormat), true);\n
        }\n
\n
        if (!isMeta && !isMouseDown) {\n
          this.setValue(\'\');\n
        }\n
      } else {\n
        // if a default date is not defined, set a soft-default-date: display the current day and month in the\n
        // datepicker, but don\'t fill the editor input\n
        this.$datePicker.gotoToday();\n
      }\n
    }\n
\n
    this.datePickerStyle.display = \'block\';\n
    this.$datePicker.show();\n
  }\n
\n
  /**\n
   * Hide data picker\n
   */\n
  hideDatepicker() {\n
    this.datePickerStyle.display = \'none\';\n
    this.$datePicker.hide();\n
  }\n
\n
  /**\n
   * Get date picker options.\n
   *\n
   * @returns {Object}\n
   */\n
  getDatePickerConfig() {\n
    let htInput = this.TEXTAREA;\n
    let options = {};\n
\n
    if (this.cellProperties && this.cellProperties.datePickerConfig) {\n
      deepExtend(options, this.cellProperties.datePickerConfig);\n
    }\n
    const origOnSelect = options.onSelect;\n
    const origOnClose = options.onClose;\n
\n
    options.field = htInput;\n
    options.trigger = htInput;\n
    options.container = this.datePicker;\n
    options.bound = false;\n
    options.format = options.format || this.defaultDateFormat;\n
    options.reposition = options.reposition || false;\n
    options.onSelect = (dateStr) => {\n
      if (!isNaN(dateStr.getTime())) {\n
        dateStr = moment(dateStr).format(this.cellProperties.dateFormat || this.defaultDateFormat);\n
      }\n
      this.setValue(dateStr);\n
      this.hideDatepicker();\n
\n
      if (origOnSelect) {\n
        origOnSelect();\n
      }\n
    };\n
    options.onClose = () => {\n
      if (!this.parentDestroyed) {\n
        this.finishEditing(false);\n
      }\n
      if (origOnClose) {\n
        origOnClose();\n
      }\n
    };\n
\n
    return options;\n
  }\n
}\n
\n
export {DateEditor};\n
\n
registerEditor(\'date\', DateEditor);\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>6701</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>dateEditor.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
