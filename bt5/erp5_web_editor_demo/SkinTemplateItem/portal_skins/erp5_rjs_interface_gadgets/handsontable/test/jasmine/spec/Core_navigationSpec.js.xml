<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41272509.25</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Core_navigationSpec.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

describe(\'Core_navigation\', function () {\n
  var id = \'testContainer\';\n
\n
  beforeEach(function () {\n
    this.$container = $(\'<div id="\' + id + \'"></div>\').appendTo(\'body\');\n
  });\n
\n
  afterEach(function () {\n
    if (this.$container) {\n
      destroy();\n
      this.$container.remove();\n
    }\n
  });\n
\n
  it("should move to the next cell", function () {\n
    handsontable({\n
      startRows: 5,\n
      startCols: 5\n
    });\n
\n
    selectCell(0, 0);\n
    keyDown(\'arrow_right\');\n
\n
    expect(getSelected()).toEqual([0, 1, 0, 1]);\n
  });\n
\n
  it("should move to the previous cell", function () {\n
    handsontable({\n
      startRows: 5,\n
      startCols: 5\n
    });\n
\n
    selectCell(1, 2);\n
    keyDown(\'arrow_left\');\n
\n
    expect(getSelected()).toEqual([1, 1, 1, 1]);\n
  });\n
\n
  it("should move to the cell above", function () {\n
    handsontable({\n
      startRows: 5,\n
      startCols: 5\n
    });\n
\n
    selectCell(1, 2);\n
    keyDown(\'arrow_up\');\n
\n
    expect(getSelected()).toEqual([0, 2, 0, 2]);\n
  });\n
\n
  it("should move to the cell below", function () {\n
    handsontable({\n
      startRows: 5,\n
      startCols: 5\n
    });\n
\n
    selectCell(1, 2);\n
    keyDown(\'arrow_down\');\n
\n
    expect(getSelected()).toEqual([2, 2, 2, 2]);\n
  });\n
\n
  describe("autoWrap disabled", function () {\n
    it("should NOT move to the next cell, if already at the last cell in row", function () {\n
      handsontable({\n
        startRows: 5,\n
        startCols: 5,\n
        autoWrapRow: false\n
      });\n
\n
      selectCell(0, 4);\n
      keyDown(\'arrow_right\');\n
\n
      expect(getSelected()).toEqual([0, 4, 0, 4]);\n
    });\n
\n
    it("should NOT move to the previous cell, if already at the first cell in row", function () {\n
      handsontable({\n
        startRows: 5,\n
        startCols: 5,\n
        autoWrapRow: false\n
      });\n
\n
      selectCell(1, 0);\n
      keyDown(\'arrow_left\');\n
\n
      expect(getSelected()).toEqual([1, 0, 1, 0]);\n
    });\n
\n
    it("should NOT move to the cell below, if already at the last cell in column", function () {\n
      handsontable({\n
        startRows: 5,\n
        startCols: 5,\n
        autoWrapCol: false\n
      });\n
\n
      selectCell(4, 0);\n
      keyDown(\'arrow_down\');\n
\n
      expect(getSelected()).toEqual([4, 0, 4, 0]);\n
    });\n
\n
    it("should NOT move to the cell above, if already at the first cell in column", function () {\n
      handsontable({\n
        startRows: 5,\n
        startCols: 5,\n
        autoWrapCol: false\n
      });\n
\n
      selectCell(0, 1);\n
      keyDown(\'arrow_up\');\n
\n
      expect(getSelected()).toEqual([0, 1, 0, 1]);\n
    });\n
\n
  });\n
\n
  describe("autoWrap enabled", function () {\n
    it("should move to the first cell of the next row, if already at the last cell in row", function () {\n
      handsontable({\n
        startRows: 5,\n
        startCols: 5,\n
        autoWrapRow: true\n
      });\n
\n
      selectCell(0, 4);\n
      keyDown(\'arrow_right\');\n
\n
      expect(getSelected()).toEqual([1, 0, 1, 0]);\n
    });\n
\n
    it("should move to the first cell of the previous row, if already at the first cell in row", function () {\n
      handsontable({\n
        startRows: 5,\n
        startCols: 5,\n
        autoWrapRow: true\n
      });\n
\n
      selectCell(1, 0);\n
      keyDown(\'arrow_left\');\n
\n
      expect(getSelected()).toEqual([0, 4, 0, 4]);\n
    });\n
\n
    it("should move to the first cell of the next column, if already at the last cell in column", function () {\n
      handsontable({\n
        startRows: 5,\n
        startCols: 5,\n
        autoWrapCol: true\n
      });\n
\n
      selectCell(4, 1);\n
      keyDown(\'arrow_down\');\n
\n
      expect(getSelected()).toEqual([0, 2, 0, 2]);\n
    });\n
\n
    it("should move to the last cell of the previous column, if already at the first cell in column", function () {\n
      handsontable({\n
        startRows: 5,\n
        startCols: 5,\n
        autoWrapCol: true\n
      });\n
\n
      selectCell(0, 1);\n
      keyDown(\'arrow_up\');\n
\n
      expect(getSelected()).toEqual([4, 0, 4, 0]);\n
    });\n
\n
    it("should move to the first cell of the first row, after trying to get to the next cell in row, being already at the last cell in table", function () {\n
      handsontable({\n
        startRows: 5,\n
        startCols: 5,\n
        autoWrapRow: true\n
      });\n
\n
      selectCell(4, 4);\n
      keyDown(\'arrow_right\');\n
\n
      expect(getSelected()).toEqual([0, 0, 0, 0]);\n
    });\n
\n
    it("should move to the first cell of the first row, after trying to get to the next cell in column, being already at the last cell in table", function () {\n
      handsontable({\n
        startRows: 5,\n
        startCols: 5,\n
        autoWrapCol: true\n
      });\n
\n
      selectCell(4, 4);\n
      keyDown(\'arrow_down\');\n
\n
      expect(getSelected()).toEqual([0, 0, 0, 0]);\n
    });\n
\n
    it("should move to the last cell of the last row, after trying to get to the previous cell in row, being already at the first cell in table", function () {\n
      handsontable({\n
        startRows: 5,\n
        startCols: 5,\n
        autoWrapRow: true\n
      });\n
\n
      selectCell(0, 0);\n
      keyDown(\'arrow_left\');\n
\n
      expect(getSelected()).toEqual([4, 4, 4, 4]);\n
    });\n
\n
    it("should move to the last cell of the last row, after trying to get to the previous cell in column, being already at the first cell in table", function () {\n
      handsontable({\n
        startRows: 5,\n
        startCols: 5,\n
        autoWrapCol: true\n
      });\n
\n
      selectCell(0, 0);\n
      keyDown(\'arrow_up\');\n
\n
      expect(getSelected()).toEqual([4, 4, 4, 4]);\n
    });\n
\n
    it("should traverse whole table by constantly selecting next cell in row", function () {\n
      handsontable({\n
        startRows: 5,\n
        startCols: 5,\n
        autoWrapRow: true\n
      });\n
\n
      selectCell(0, 0);\n
\n
      for (var row = 0, rlen = countRows(); row < rlen; row++) {\n
        for (var col = 0, clen = countCols(); col < clen; col++) {\n
          expect(getSelected()).toEqual([row, col, row, col]);\n
          keyDown(\'arrow_right\');\n
        }\n
      }\n
\n
      expect(getSelected()).toEqual([0, 0, 0, 0]);\n
    });\n
\n
    it("should traverse whole table by constantly selecting previous cell in row", function () {\n
      handsontable({\n
        startRows: 5,\n
        startCols: 5,\n
        autoWrapRow: true\n
      });\n
\n
      selectCell(4, 4);\n
\n
      for (var row = countRows() - 1; row >= 0; row--) {\n
        for (var col = countCols() - 1; col >= 0; col--) {\n
          expect(getSelected()).toEqual([row, col, row, col]);\n
          keyDown(\'arrow_left\');\n
        }\n
      }\n
\n
      expect(getSelected()).toEqual([4, 4, 4, 4]);\n
    });\n
\n
    it("should traverse whole table by constantly selecting next cell in column", function () {\n
      handsontable({\n
        startRows: 5,\n
        startCols: 5,\n
        autoWrapCol: true\n
      });\n
\n
      selectCell(0, 0);\n
\n
      for (var col = 0, clen = countCols(); col < clen; col++) {\n
        for (var row = 0, rlen = countRows(); row < rlen; row++) {\n
          expect(getSelected()).toEqual([row, col, row, col]);\n
          keyDown(\'arrow_down\');\n
        }\n
      }\n
\n
      expect(getSelected()).toEqual([0, 0, 0, 0]);\n
    });\n
\n
    it("should traverse whole table by constantly selecting previous cell in column", function () {\n
      handsontable({\n
        startRows: 5,\n
        startCols: 5,\n
        autoWrapCol: true\n
      });\n
\n
      selectCell(4, 4);\n
\n
      for (var col = countCols() - 1; col >= 0; col--) {\n
        for (var row = countRows() - 1; row >= 0; row--) {\n
          expect(getSelected()).toEqual([row, col, row, col]);\n
          keyDown(\'arrow_up\');\n
        }\n
      }\n
\n
      expect(getSelected()).toEqual([4, 4, 4, 4]);\n
    });\n
\n
\n
  });\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>7457</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>Core_navigationSpec.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
