<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41272522.59</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>mobileTextEditorSpec.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

\n
  describe("MobileTextEditor", function () {\n
    var id = \'testContainer\';\n
\n
    beforeEach(function () {\n
      this.$container = $(\'<div id="\' + id + \'"></div>\').appendTo(\'body\');\n
    });\n
\n
    afterEach(function () {\n
      if (this.$container) {\n
        destroy();\n
        this.$container.remove();\n
      }\n
    });\n
\n
    describe("at init: ", function () {\n
\n
      it("should recognize a mobile browser by a useragent string", function () {\n
        var mobileUserAgentStrings = [\n
          \'Mozilla/5.0 (iPhone; CPU iPhone OS 8_1 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12B411 Safari/600.1.4\',\n
          \'Mozilla/5.0 (iPhone; CPU iPhone OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Version/7.0 Mobile/11D257 Safari/9537.53\',\n
          \'Mozilla/5.0 (iPad; CPU OS 8_1 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12B410 Safari/600.1.4\',\n
          \'Mozilla/5.0 (iPhone; CPU iPhone OS 8_1_1 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12B435 Safari/600.1.4\',\n
          \'Mozilla/5.0 (Linux; U; Android 4.0.3; ko-kr; LG-L160L Build/IML74K) AppleWebkit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30\',\n
          \'Mozilla/5.0 (Linux; U; Android 4.0.3; de-ch; HTC Sensation Build/IML74K) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30\',\n
          \'Mozilla/5.0 (Linux; U; Android 2.3.5; en-us; HTC Vision Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1\',\n
          \'Mozilla/5.0 (Linux; U; Android 2.3.4; fr-fr; HTC Desire Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1\',\n
          \'Mozilla/5.0 (Linux; U; Android 2.3.3; zh-tw; HTC_Pyramid Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari\',\n
          \'Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0)\',\n
          \'HTC_Touch_3G Mozilla/4.0 (compatible; MSIE 6.0; Windows CE; IEMobile 7.11)\',\n
          \'Mozilla/4.0 (compatible; MSIE 7.0; Windows Phone OS 7.0; Trident/3.1; IEMobile/7.0; Nokia;N70)\'\n
        ];\n
\n
        var desktopUserAgentStrings = [\n
          \'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36\',\n
          \'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0\',\n
          \'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10) AppleWebKit/600.1.25 (KHTML, like Gecko) Version/8.0 Safari/600.1.25\',\n
          \'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36\',\n
          \'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/600.1.25 (KHTML, like Gecko) Version/8.0 Safari/600.1.25\',\n
          \'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36\',\n
          \'Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko\',\n
          \'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/600.1.17 (KHTML, like Gecko) Version/7.1 Safari/537.85.10\',\n
          \'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:33.0) Gecko/20100101 Firefox/33.0\',\n
          \'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36\'\n
        ];\n
\n
        for(var i = 0, mobileCount = mobileUserAgentStrings.length; i < mobileCount; i++) {\n
          expect(Handsontable.helper.isMobileBrowser(mobileUserAgentStrings[i])).toEqual(true);\n
        }\n
\n
        for(var i = 0, desktopCount = desktopUserAgentStrings.length; i < desktopCount; i++) {\n
          expect(Handsontable.helper.isMobileBrowser(desktopUserAgentStrings[i])).toEqual(false);\n
        }\n
\n
      });\n
\n
      it("tap (touchstart) should be translated to mousedown", function () {\n
        var onAfterOnCellMouseDown = jasmine.createSpy(\'onAfterOnCellMouseDown\');\n
\n
        var hot = handsontable({\n
          data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n
          width: 400,\n
          height: 400,\n
          afterOnCellMouseDown: onAfterOnCellMouseDown\n
        });\n
\n
        var cell = hot.getCell(1, 1);\n
\n
        expect(getSelected()).toBeUndefined();\n
\n
        triggerTouchEvent(\'touchstart\', cell);\n
\n
        waitsFor(function () {\n
          return onAfterOnCellMouseDown.calls.length > 0;\n
        }, \'Mousedown on Cell event\', 1000);\n
\n
        runs(function () {\n
          expect(getSelected()).toBeDefined();\n
        });\n
      });\n
\n
      it("should close the editor on tap outside the editor", function () {\n
\n
        var onAfterOnCellMouseDown = jasmine.createSpy(\'onAfterOnCellMouseDown\');\n
\n
        var hot = handsontable({\n
          data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n
          width: 400,\n
          height: 400,\n
          afterOnCellMouseDown: onAfterOnCellMouseDown\n
        });\n
\n
        var cell = hot.getCell(1, 1);\n
\n
        mouseDoubleClick(cell); // should test it properly, if touch->mousedown translation works\n
\n
        waitsFor(function () {\n
          return onAfterOnCellMouseDown.calls.length > 1;\n
        }, \'Mousedown on Cell event\', 1000);\n
\n
        runs(function () {\n
          expect(document.querySelector(".htMobileEditorContainer")).toBeTruthy();\n
          expect(document.querySelector(".htMobileEditorContainer").offsetParent).toBeTruthy();\n
\n
          triggerTouchEvent(\'touchstart\', getCell(0, 4));\n
\n
          waitsFor(function () {\n
            return onAfterOnCellMouseDown.calls.length > 2;\n
          }, \'Mousedown on Cell event\', 1000);\n
\n
          runs(function () {\n
            expect(document.querySelector(".htMobileEditorContainer").offsetParent).toBeFalsy();\n
          });\n
        });\n
      });\n
\n
      it("should set the cell pointer\'s position to point to the edited cell", function () {\n
        var onAfterOnCellMouseDown = jasmine.createSpy(\'onAfterOnCellMouseDown\');\n
        var hot = handsontable({\n
          data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n
          width: 400,\n
          height: 400,\n
          afterOnCellMouseDown: onAfterOnCellMouseDown\n
        });\n
\n
        var cell = hot.getCell(2, 3);\n
\n
        mouseDoubleClick(cell);\n
\n
        waitsFor(function () {\n
          return onAfterOnCellMouseDown.calls.length > 1; // doubleclicked on a cell -> editor should open\n
        }, \'Mousedown on Cell event\', 1000);\n
\n
        runs(function () {\n
          var cellPosition = Handsontable.Dom.offset(cell)\n
            , cellWidth = Handsontable.Dom.outerWidth(cell)\n
            , cellPointer = getActiveEditor().cellPointer\n
            , cellPointerPosition = Handsontable.Dom.offset(getActiveEditor().cellPointer)\n
            , cellPointerWidth = Handsontable.Dom.outerWidth(getActiveEditor().cellPointer);\n
\n
          expect(Math.ceil(cellPosition.left + cellWidth / 2)).toEqual(Math.ceil(cellPointerPosition.left + cellPointerWidth / 2));\n
        });\n
\n
      });\n
\n
      it("should center the editor after opening if the edited cell horizontal position is within editor boundaries", function () {\n
        var onAfterOnCellMouseDown = jasmine.createSpy(\'onAfterOnCellMouseDown\');\n
        var hot = handsontable({\n
          data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n
          width: 400,\n
          height: 400,\n
          afterOnCellMouseDown: onAfterOnCellMouseDown\n
        });\n
\n
        var cell = hot.getCell(2, 4);\n
\n
        mouseDoubleClick(cell);\n
\n
        waitsFor(function () {\n
          return onAfterOnCellMouseDown.calls.length > 1; // doubleclicked on a cell -> editor should open\n
        }, \'Mousedown on Cell event\', 1000);\n
\n
        runs(function () {\n
          var editor = getActiveEditor()\n
            , editorWidth = Handsontable.Dom.outerWidth(editor.editorContainer)\n
            , editorPosition = Handsontable.Dom.offset(editor.editorContainer);\n
\n
          expect(Math.ceil(editorPosition.left + editorWidth / 2)).toEqual(Math.ceil(window.innerWidth / 2));\n
        });\n
      });\n
\n
      it("should snap the editor to the right side of the screen if the edited cell is on the right side of the editor", function () {\n
        var onAfterOnCellMouseDown = jasmine.createSpy(\'onAfterOnCellMouseDown\');\n
        var hot = handsontable({\n
          data: Handsontable.helper.createSpreadsheetObjectData(10, 24),\n
          width: window.innerWidth,\n
          height: 400,\n
          afterOnCellMouseDown: onAfterOnCellMouseDown\n
        });\n
\n
        var cell = hot.getCell(2, 23);\n
\n
        mouseDoubleClick(cell);\n
\n
        waitsFor(function () {\n
          return onAfterOnCellMouseDown.calls.length > 1; // doubleclicked on a cell -> editor should open\n
        }, \'Mousedown on Cell event\', 1000);\n
\n
        runs(function () {\n
          var editor = getActiveEditor()\n
            , editorWidth = Handsontable.Dom.outerWidth(editor.editorContainer)\n
            , editorPosition = Handsontable.Dom.offset(editor.editorContainer);\n
\n
          expect(Math.ceil(editorPosition.left + editorWidth)).toEqual(window.innerWidth);\n
        });\n
      });\n
\n
      it("should snap the editor to the left side of the screen if the edited cell is on the left side of the editor", function () {\n
        var onAfterOnCellMouseDown = jasmine.createSpy(\'onAfterOnCellMouseDown\');\n
        var hot = handsontable({\n
          data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n
          width: 400,\n
          height: 400,\n
          afterOnCellMouseDown: onAfterOnCellMouseDown\n
        });\n
\n
        var cell = hot.getCell(2, 0);\n
\n
        mouseDoubleClick(cell);\n
\n
        waitsFor(function () {\n
          return onAfterOnCellMouseDown.calls.length > 1; // doubleclicked on a cell -> editor should open\n
        }, \'Mousedown on Cell event\', 1000);\n
\n
        runs(function () {\n
          var editor = getActiveEditor()\n
            , editorPosition = Handsontable.Dom.offset(editor.editorContainer);\n
\n
          expect(editorPosition.left).toEqual(0);\n
        });\n
      });\n
\n
      it("should be positioned right below the edited cell", function () {\n
        var onAfterOnCellMouseDown = jasmine.createSpy(\'onAfterOnCellMouseDown\');\n
        var hot = handsontable({\n
          data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n
          width: 400,\n
          height: 400,\n
          afterOnCellMouseDown: onAfterOnCellMouseDown\n
        });\n
\n
        var cell = hot.getCell(2, 3);\n
\n
        mouseDoubleClick(cell);\n
\n
        waitsFor(function () {\n
          return onAfterOnCellMouseDown.calls.length > 1; // doubleclicked on a cell -> editor should open\n
        }, \'Mousedown on Cell event\', 1000);\n
\n
        runs(function () {\n
          var editor = getActiveEditor()\n
            , cellPosition = Handsontable.Dom.offset(cell)\n
            , cellHeight = Handsontable.Dom.outerHeight(cell)\n
            , editorPosition = Handsontable.Dom.offset(editor.editorContainer)\n
            , cellPointerHeight = Handsontable.Dom.outerHeight(editor.cellPointer);\n
\n
          expect(editorPosition.top - cellPointerHeight).toEqual(cellPosition.top + cellHeight);\n
        });\n
      });\n
\n
      it("should apply the changes after tapping outside the editor", function () {\n
        var onAfterOnCellMouseDown = jasmine.createSpy(\'onAfterOnCellMouseDown\');\n
        var hot = handsontable({\n
          data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n
          width: 400,\n
          height: 400,\n
          afterOnCellMouseDown: onAfterOnCellMouseDown\n
        });\n
\n
        var cell = hot.getCell(2, 3);\n
        mouseDoubleClick(cell);\n
\n
        waitsFor(function () {\n
          return onAfterOnCellMouseDown.calls.length > 1; // doubleclicked on a cell -> editor should open\n
        }, \'Mousedown on Cell event\', 1000);\n
\n
        runs(function () {\n
          var editor = getActiveEditor();\n
\n
          editor.setValue(\'done!\');\n
\n
          expect(cell.innerText).toEqual(\'D3\');\n
\n
          triggerTouchEvent(\'touchstart\', getCell(0, 0));\n
\n
          waitsFor(function () {\n
            return onAfterOnCellMouseDown.calls.length > 2;\n
          }, \'Mousedown on Cell event\', 1000);\n
\n
          runs(function () {\n
            expect(cell.innerText).toEqual(\'done!\');\n
          });\n
        });\n
      });\n
\n
\n
      describe(" Move Controls:", function () {\n
        it("should change the selected cell in the appropriate direction after hitting the controller button", function () {\n
          var onAfterOnCellMouseDown = jasmine.createSpy(\'onAfterOnCellMouseDown\');\n
          var hot = handsontable({\n
            data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n
            width: 400,\n
            height: 400,\n
            afterOnCellMouseDown: onAfterOnCellMouseDown\n
          });\n
\n
          var cell = hot.getCell(2, 3);\n
\n
          mouseDoubleClick(cell);\n
\n
          waitsFor(function () {\n
            return onAfterOnCellMouseDown.calls.length > 1; // doubleclicked on a cell -> editor should open\n
          }, \'Mousedown on Cell event\', 1000);\n
\n
          runs(function () {\n
            var editor = getActiveEditor()\n
              , selected = getSelected();\n
\n
            expect(selected[1]).toEqual(3);\n
            triggerTouchEvent(\'touchend\', editor.controls.leftButton);\n
            waits(10);\n
            runs(function () {\n
              selected = getSelected();\n
              expect(selected[1]).toEqual(2);\n
            });\n
\n
          });\n
\n
          runs(function () {\n
            var editor = getActiveEditor()\n
              , selected = getSelected();\n
\n
            expect(selected[0]).toEqual(2);\n
            expect(selected[1]).toEqual(2);\n
            triggerTouchEvent(\'touchend\', editor.controls.upButton);\n
            waits(10);\n
            runs(function () {\n
              selected = getSelected();\n
              expect(selected[0]).toEqual(1);\n
              expect(selected[1]).toEqual(2);\n
            });\n
          });\n
\n
          runs(function () {\n
            var editor = getActiveEditor()\n
              , selected = getSelected();\n
\n
            expect(selected[0]).toEqual(1);\n
            expect(selected[1]).toEqual(2);\n
            triggerTouchEvent(\'touchend\', editor.controls.rightButton);\n
            waits(10);\n
            runs(function () {\n
              selected = getSelected();\n
              expect(selected[0]).toEqual(1);\n
              expect(selected[1]).toEqual(3);\n
            });\n
          });\n
\n
          runs(function () {\n
            var editor = getActiveEditor()\n
              , selected = getSelected();\n
\n
            expect(selected[0]).toEqual(1);\n
            expect(selected[1]).toEqual(3);\n
            triggerTouchEvent(\'touchend\', editor.controls.downButton);\n
            waits(10);\n
            runs(function () {\n
              selected = getSelected();\n
              expect(selected[0]).toEqual(2);\n
              expect(selected[1]).toEqual(3);\n
            });\n
          });\n
        });\n
\n
        it("should change the editor\'s input value to the value of the newly selected cell", function () {\n
          var onAfterOnCellMouseDown = jasmine.createSpy(\'onAfterOnCellMouseDown\');\n
          var hot = handsontable({\n
            data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n
            width: 400,\n
            height: 400,\n
            afterOnCellMouseDown: onAfterOnCellMouseDown\n
          });\n
\n
          var cell = hot.getCell(2, 3);\n
\n
          mouseDoubleClick(cell);\n
\n
          waitsFor(function () {\n
            return onAfterOnCellMouseDown.calls.length > 1; // doubleclicked on a cell -> editor should open\n
          }, \'Mousedown on Cell event\', 1000);\n
\n
          runs(function () {\n
            var editor = getActiveEditor();\n
\n
            expect(editor.getValue()).toEqual(cell.innerText);\n
\n
            triggerTouchEvent(\'touchend\', editor.controls.leftButton);\n
            waits(10);\n
            runs(function () {\n
              var newSelection = getSelected();\n
              expect(editor.getValue()).toEqual(getCell(newSelection[0], newSelection[1]).innerText);\n
            });\n
\n
            runs(function () {\n
              triggerTouchEvent(\'touchend\', editor.controls.upButton);\n
              waits(10);\n
              runs(function () {\n
                var newSelection = getSelected();\n
                expect(editor.getValue()).toEqual(getCell(newSelection[0], newSelection[1]).innerText);\n
              });\n
            });\n
\n
            runs(function () {\n
              triggerTouchEvent(\'touchend\', editor.controls.rightButton);\n
              waits(10);\n
              runs(function () {\n
                var newSelection = getSelected();\n
                expect(editor.getValue()).toEqual(getCell(newSelection[0], newSelection[1]).innerText);\n
              });\n
            });\n
\n
            runs(function () {\n
              triggerTouchEvent(\'touchend\', editor.controls.downButton);\n
              waits(10);\n
              runs(function () {\n
                var newSelection = getSelected();\n
                expect(editor.getValue()).toEqual(getCell(newSelection[0], newSelection[1]).innerText);\n
              });\n
            });\n
\n
          });\n
\n
        });\n
\n
        it("should apply the changes after moving selection elsewhere", function () {\n
          var onAfterOnCellMouseDown = jasmine.createSpy(\'onAfterOnCellMouseDown\');\n
          var hot = handsontable({\n
            data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n
            width: 400,\n
            height: 400,\n
            afterOnCellMouseDown: onAfterOnCellMouseDown\n
          });\n
\n
          var cell = hot.getCell(2, 3);\n
\n
          mouseDoubleClick(cell);\n
\n
          waitsFor(function () {\n
            return onAfterOnCellMouseDown.calls.length > 1; // doubleclicked on a cell -> editor should open\n
          }, \'Mousedown on Cell event\', 1000);\n
\n
          runs(function () {\n
            var editor = getActiveEditor();\n
\n
            expect(cell.innerText).toEqual(\'D3\');\n
            editor.TEXTAREA.value = \'done!\';\n
            triggerTouchEvent(\'touchend\', editor.controls.leftButton);\n
            waits(10);\n
            runs(function () {\n
              expect(cell.innerText).toEqual(\'done!\');\n
            });\n
\n
            runs(function () {\n
              var newSelection = getSelected();\n
              expect(getCell(newSelection[0], newSelection[1]).innerText).toEqual(\'C3\');\n
              editor.TEXTAREA.value = \'done!\';\n
              triggerTouchEvent(\'touchend\', editor.controls.upButton);\n
              waits(10);\n
              runs(function () {\n
                expect(getCell(newSelection[0], newSelection[1]).innerText).toEqual(\'done!\');\n
              });\n
            });\n
\n
            runs(function () {\n
              var newSelection = getSelected();\n
              expect(getCell(newSelection[0], newSelection[1]).innerText).toEqual(\'C2\');\n
              editor.TEXTAREA.value = \'done!\';\n
              triggerTouchEvent(\'touchend\', editor.controls.rightButton);\n
              waits(10);\n
              runs(function () {\n
                expect(getCell(newSelection[0], newSelection[1]).innerText).toEqual(\'done!\');\n
              });\n
            });\n
\n
            runs(function () {\n
              var newSelection = getSelected();\n
              expect(getCell(newSelection[0], newSelection[1]).innerText).toEqual(\'D2\');\n
              editor.TEXTAREA.value = \'done!\';\n
              triggerTouchEvent(\'touchend\', editor.controls.downButton);\n
              waits(10);\n
              runs(function () {\n
                expect(getCell(newSelection[0], newSelection[1]).innerText).toEqual(\'done!\');\n
              });\n
            });\n
\n
            runs(function () {\n
              var newSelection = getSelected();\n
              expect(getCell(newSelection[0], newSelection[1]).innerText).toEqual(\'done!\');\n
              editor.TEXTAREA.value = \'done.\';\n
              triggerTouchEvent(\'touchend\', editor.controls.downButton);\n
              waits(10);\n
              runs(function () {\n
                expect(getCell(newSelection[0], newSelection[1]).innerText).toEqual(\'done.\');\n
              });\n
            });\n
\n
          });\n
        });\n
      });\n
\n
      describe("Editor moving:", function () {\n
        it("should move the editor after touch-and-dragging the position handle", function () {\n
\n
          var onAfterOnCellMouseDown = jasmine.createSpy(\'onAfterOnCellMouseDown\');\n
          var hot = handsontable({\n
            data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n
            width: 400,\n
            height: 400,\n
            afterOnCellMouseDown: onAfterOnCellMouseDown\n
          });\n
          var targetCoords;\n
          var editor;\n
\n
          var cell = hot.getCell(2, 3);\n
          mouseDoubleClick(cell); // should work fine as a doubletouch if previous tests passed\n
\n
          waitsFor(function () {\n
            return onAfterOnCellMouseDown.calls.length > 1; // doubleclicked on a cell -> editor should open\n
          }, \'Mousedown on Cell event\', 1000);\n
\n
          runs(function () {\n
            editor = getActiveEditor();\n
            triggerTouchEvent(\'touchstart\', editor.moveHandle);\n
          });\n
          waits(10);\n
\n
          runs(function () {\n
            targetCoords = getCell(3, 1).getBoundingClientRect();\n
            var pageX = parseInt(targetCoords.left + 3, 10);\n
            var pageY = parseInt(targetCoords.top + 3, 10);\n
\n
            triggerTouchEvent(\'touchmove\', editor.moveHandle, pageX, pageY);\n
          });\n
\n
          waits(10);\n
\n
          runs(function () {\n
            expect(parseInt(editor.editorContainer.style.left, 10)).toBeLessThan(targetCoords.left);\n
            expect(parseInt(editor.editorContainer.style.top, 10)).toBeLessThan(targetCoords.top);\n
          });\n
\n
        });\n
\n
        it("should hide the editor\'s cell pointer after manually moving the editor", function () {\n
          var onAfterOnCellMouseDown = jasmine.createSpy(\'onAfterOnCellMouseDown\');\n
          var hot = handsontable({\n
            data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n
            width: 400,\n
            height: 400,\n
            afterOnCellMouseDown: onAfterOnCellMouseDown\n
          });\n
          var targetCoords;\n
          var editor;\n
\n
          var cell = hot.getCell(2, 3);\n
          mouseDoubleClick(cell); // should work fine as a doubletouch if previous tests passed\n
\n
          waitsFor(function () {\n
            return onAfterOnCellMouseDown.calls.length > 1; // doubleclicked on a cell -> editor should open\n
          }, \'Mousedown on Cell event\', 1000);\n
\n
          runs(function () {\n
            editor = getActiveEditor();\n
\n
            expect(Handsontable.Dom.hasClass(editor.cellPointer, \'hidden\')).toEqual(false);\n
\n
            triggerTouchEvent(\'touchstart\', editor.moveHandle);\n
          });\n
          waits(10);\n
\n
          runs(function () {\n
            targetCoords = getCell(3, 1).getBoundingClientRect();\n
            var pageX = parseInt(targetCoords.left + 3, 10);\n
            var pageY = parseInt(targetCoords.top + 3, 10);\n
\n
            triggerTouchEvent(\'touchmove\', editor.moveHandle, pageX, pageY);\n
          });\n
\n
          waits(10);\n
\n
          runs(function () {\n
            expect(Handsontable.Dom.hasClass(editor.cellPointer, \'hidden\')).toEqual(true);\n
          });\n
        });\n
      });\n
    });\n
  });\n
\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>23088</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>mobileTextEditorSpec.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
