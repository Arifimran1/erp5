<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41272507.46</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>PerformanceSpec.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

describe(\'Performance\', function () {\n
  var id = \'testContainer\';\n
\n
  //this is a test suite to test if there are no redundant operations\n
\n
  beforeEach(function () {\n
    this.$container = $(\'<div id="\' + id + \'"></div>\').appendTo(\'body\');\n
  });\n
\n
  afterEach(function () {\n
    if (this.$container) {\n
      destroy();\n
      this.$container.remove();\n
    }\n
  });\n
\n
  it(\'should call renderer once for one cell (fixed column width)\', function () {\n
    var count = 0;\n
    handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(1, 1),\n
      colWidths: 100,\n
      rowHeights: 23,\n
      renderer: function () {\n
        Handsontable.renderers.TextRenderer.apply(this, arguments);\n
        count++;\n
      }\n
    });\n
\n
    expect(count).toEqual(1); // only for master table\n
  });\n
\n
  it(\'should call renderer twice for one cell (auto column width)\', function () {\n
    var count = 0;\n
    var hot = handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(1, 1),\n
      rowHeights: 23,\n
      renderer: function () {\n
        Handsontable.renderers.TextRenderer.apply(this, arguments);\n
        count++;\n
      }\n
    });\n
\n
    expect(count).toEqual(2); // 1 for autoColumnSize, 1 for actual cell render\n
  });\n
\n
  it(\'should call renderer twice for one cell (auto row height)\', function () {\n
    var count = 0;\n
    var hot = handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(1, 1),\n
      colWidths: 50,\n
      renderer: function () {\n
        Handsontable.renderers.TextRenderer.apply(this, arguments);\n
        count++;\n
      }\n
    });\n
\n
    expect(count).toEqual(1); // 1 for actual cell render (colWidths prevent autoColumnSize to enable)\n
  });\n
\n
  it(\'should call renderer triple times for one cell (auto row height, auto column width)\', function () {\n
    var count = 0;\n
    var hot = handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(1, 1),\n
      autoRowSize: true,\n
      autoColumnSize: true,\n
      renderer: function () {\n
        Handsontable.renderers.TextRenderer.apply(this, arguments);\n
        count++;\n
      }\n
    });\n
\n
    expect(count).toEqual(3); //1 for autoColumnSize, 1 for autoRowSize, 1 for actual cell render\n
  });\n
\n
  it(\'should call getCellMeta minimum number of times for one cell (auto column width, without overlays)\', function () {\n
    var count = 0;\n
\n
    handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(1, 1),\n
      rowHeights: 23,\n
      beforeGetCellMeta: function(){\n
        count++;\n
      }\n
    });\n
\n
    expect(count).toEqual(7);\n
  });\n
\n
  it(\'should call getCellMeta minimum number of times for one cell (auto row height, without overlays)\', function () {\n
    var count = 0;\n
\n
    handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(1, 1),\n
      colWidths: 50,\n
      beforeGetCellMeta: function(){\n
        count++;\n
      }\n
    });\n
\n
    expect(count).toEqual(5);\n
  });\n
\n
  it(\'should call getCellMeta minimum number of times for one cell (auto column width, with left overlay)\', function () {\n
    var count = 0;\n
\n
    handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(1, 1),\n
      colHeaders: true,\n
      rowHeights: 23,\n
      beforeGetCellMeta: function(){\n
        count++;\n
      }\n
    });\n
\n
    expect(count).toEqual(8);\n
  });\n
\n
  it(\'should call getCellMeta minimum number of times for one cell (auto row height, with left overlay)\', function () {\n
    var count = 0;\n
\n
    handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(1, 1),\n
      colHeaders: true,\n
      colWidths: 50,\n
      beforeGetCellMeta: function(){\n
        count++;\n
      }\n
    });\n
\n
    expect(count).toEqual(6);\n
  });\n
\n
  it(\'should call getCellMeta minimum number of times for one cell (auto column width, with top overlay)\', function () {\n
    var count = 0;\n
\n
    handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(1, 1),\n
      rowHeaders: true,\n
      rowHeights: 23,\n
      beforeGetCellMeta: function(){\n
        count++;\n
      }\n
    });\n
\n
    expect(count).toEqual(7);\n
  });\n
\n
  it(\'should call getCellMeta minimum number of times for one cell (auto row height, with top overlay)\', function () {\n
    var count = 0;\n
\n
    handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(1, 1),\n
      rowHeaders: true,\n
      colWidths: 50,\n
      beforeGetCellMeta: function(){\n
        count++;\n
      }\n
    });\n
\n
    expect(count).toEqual(5);\n
  });\n
\n
  it(\'should call getCellMeta minimum number of times for one cell (auto column width, with all overlays)\', function () {\n
    var count = 0;\n
\n
    handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(1, 1),\n
      colHeaders: true,\n
      rowHeaders: true,\n
      rowHeights: 23,\n
      beforeGetCellMeta: function(){\n
        count++;\n
      }\n
    });\n
\n
    expect(count).toEqual(8);\n
  });\n
\n
  it(\'should call getCellMeta minimum number of times for one cell (auto row height, with all overlays)\', function () {\n
    var count = 0;\n
\n
    handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(1, 1),\n
      colHeaders: true,\n
      rowHeaders: true,\n
      colWidths: 50,\n
      beforeGetCellMeta: function(){\n
        count++;\n
      }\n
    });\n
\n
    expect(count).toEqual(6);\n
  });\n
\n
  it(\'should call renderer twice for each cell (auto column width)\', function () {\n
    var count = 0;\n
    handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(4, 4),\n
      rowHeights: 23,\n
      autoColumnSize: true,\n
      renderer: function () {\n
        Handsontable.renderers.TextRenderer.apply(this, arguments);\n
        count++;\n
      }\n
    });\n
\n
    expect(count).toEqual(28);\n
  });\n
\n
  it(\'should call renderer twice for each cell (auto row height)\', function () {\n
    var count = 0;\n
    handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(4, 4),\n
      colWidths: 50,\n
      autoRowSize: true,\n
      renderer: function () {\n
        Handsontable.renderers.TextRenderer.apply(this, arguments);\n
        count++;\n
      }\n
    });\n
\n
    expect(count).toEqual(28); // 16 in main table and 4 rows for autoRowSize\n
  });\n
\n
  it(\'should call renderer twice for each cell (auto row height, auto column width)\', function () {\n
    var count = 0;\n
    handsontable({\n
      data: Handsontable.helper.createSpreadsheetData(4, 4),\n
      autoRowSize: true,\n
      autoColumnSize: true,\n
      renderer: function () {\n
        Handsontable.renderers.TextRenderer.apply(this, arguments);\n
        count++;\n
      }\n
    });\n
\n
    expect(count).toEqual(40); // 16x2 in main table, 4 rows for autoRowSize and 4 cols for autoColumnSize\n
  });\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>6506</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>PerformanceSpec.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
