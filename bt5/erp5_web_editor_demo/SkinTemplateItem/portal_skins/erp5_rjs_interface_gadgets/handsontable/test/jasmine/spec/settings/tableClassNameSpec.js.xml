<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41272501.0</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>tableClassNameSpec.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

describe(\'settings\', function () {\n
  describe(\'tableClassName\', function () {\n
    var id = \'testContainer\';\n
\n
    beforeEach(function () {\n
      this.$container = $(\'<div id="\' + id + \'"></div>\').appendTo(\'body\');\n
    });\n
\n
    afterEach(function () {\n
      if (this.$container) {\n
        destroy();\n
        this.$container.remove();\n
      }\n
    });\n
\n
    it(\'should add class name every table element inside handsontable wrapper element (as string, without overlays)\', function () {\n
      var hot = handsontable({\n
        colHeaders: false,\n
        rowHeaders: false,\n
        tableClassName: \'foo\'\n
      });\n
\n
      // all overlays is created anyway but without left-top corner\n
      expect(hot.rootElement.querySelectorAll(\'table.foo\').length).toBe(3);\n
    });\n
\n
    it(\'should add class name every table element inside handsontable wrapper element (as string, with overlays)\', function () {\n
      var hot = handsontable({\n
        colHeaders: true,\n
        rowHeaders: true,\n
        tableClassName: \'foo\'\n
      });\n
\n
      expect(hot.rootElement.querySelectorAll(\'table.foo\').length).toBe(4);\n
    });\n
\n
    it(\'should add class name every table element inside handsontable wrapper element (as string with spaces, without overlays)\', function () {\n
      var hot = handsontable({\n
        colHeaders: false,\n
        rowHeaders: false,\n
        tableClassName: \'foo bar\'\n
      });\n
\n
      // all overlays is created anyway but without left-top corner\n
      expect(hot.rootElement.querySelectorAll(\'table.foo\').length).toBe(3);\n
      expect(hot.rootElement.querySelectorAll(\'table.bar\').length).toBe(3);\n
    });\n
\n
    it(\'should add class name every table element inside handsontable wrapper element (as string with spaces, with overlays)\', function () {\n
      var hot = handsontable({\n
        colHeaders: true,\n
        rowHeaders: true,\n
        tableClassName: \'foo bar\'\n
      });\n
\n
      expect(hot.rootElement.querySelectorAll(\'table.foo\').length).toBe(4);\n
      expect(hot.rootElement.querySelectorAll(\'table.bar\').length).toBe(4);\n
    });\n
\n
    it(\'should add class name every table element inside handsontable wrapper element (as array, without overlays)\', function () {\n
      var hot = handsontable({\n
        colHeaders: false,\n
        rowHeaders: false,\n
        tableClassName: [\'foo\', \'bar\', \'baz\']\n
      });\n
\n
      expect(hot.rootElement.querySelectorAll(\'table.foo\').length).toBe(3);\n
      expect(hot.rootElement.querySelectorAll(\'table.bar\').length).toBe(3);\n
      expect(hot.rootElement.querySelectorAll(\'table.baz\').length).toBe(3);\n
    });\n
\n
    it(\'should add class name every table element inside handsontable wrapper element (as array, with overlays)\', function () {\n
      var hot = handsontable({\n
        colHeaders: true,\n
        rowHeaders: true,\n
        tableClassName: [\'foo\', \'bar\', \'baz\']\n
      });\n
\n
      expect(hot.rootElement.querySelectorAll(\'table.foo\').length).toBe(4);\n
      expect(hot.rootElement.querySelectorAll(\'table.bar\').length).toBe(4);\n
      expect(hot.rootElement.querySelectorAll(\'table.baz\').length).toBe(4);\n
    });\n
  });\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>3055</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>tableClassNameSpec.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
