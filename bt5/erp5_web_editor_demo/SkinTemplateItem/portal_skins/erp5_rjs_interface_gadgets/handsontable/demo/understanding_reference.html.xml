<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41272451.2</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>understanding_reference.html</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>text/html</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

<!doctype html>\n
<html>\n
<head>\n
  <meta charset=\'utf-8\'>\n
  <title>Understanding binding as reference - Handsontable</title>\n
\n
  <!--\n
  Loading Handsontable (full distribution that includes all dependencies)\n
  -->\n
  <link data-jsfiddle="common" rel="stylesheet" media="screen" href="../dist/handsontable.css">\n
  <link data-jsfiddle="common" rel="stylesheet" media="screen" href="../dist/pikaday/pikaday.css">\n
  <script data-jsfiddle="common" src="../dist/pikaday/pikaday.js"></script>\n
  <script data-jsfiddle="common" src="../dist/moment/moment.js"></script>\n
  <script data-jsfiddle="common" src="../dist/zeroclipboard/ZeroClipboard.js"></script>\n
  <script data-jsfiddle="common" src="../dist/handsontable.js"></script>\n
\n
  <!--\n
  Loading demo dependencies. They are used here only to enhance the examples on this page\n
  -->\n
  <link data-jsfiddle="common" rel="stylesheet" media="screen" href="css/samples.css?20140331">\n
  <script src="js/samples.js"></script>\n
  <script src="js/highlight/highlight.pack.js"></script>\n
  <link rel="stylesheet" media="screen" href="js/highlight/styles/github.css">\n
  <link rel="stylesheet" href="css/font-awesome/css/font-awesome.min.css">\n
\n
  <!--\n
  Facebook open graph. Don\'t copy this to your project :)\n
  -->\n
  <meta property="og:title" content="Understanding data reference binding">\n
  <meta property="og:description"\n
        content="Handsontable binds to your data source (array or object) by reference. Therefore, all the data entered in the\n
        grid will alter the original data source.">\n
  <meta property="og:url" content="http://handsontable.com/demo/understanding_reference.html">\n
  <meta property="og:image" content="http://handsontable.com/demo/image/og-image.png">\n
  <meta property="og:image:type" content="image/png">\n
  <meta property="og:image:width" content="409">\n
  <meta property="og:image:height" content="164">\n
  <link rel="canonical" href="http://handsontable.com/demo/understanding_reference.html">\n
\n
  <!--\n
  Google Analytics for GitHub Page. Don\'t copy this to your project :)\n
  -->\n
  <script src="js/ga.js"></script>\n
</head>\n
\n
<body>\n
\n
\n
<div class="wrapper">\n
  <div class="wrapper-row">\n
    <div id="global-menu-clone">\n
      <h1><a href="../index.html">Handsontable</a></h1>\n
\n
    </div>\n
\n
    <div id="container">\n
      <div class="columnLayout">\n
\n
        <div class="rowLayout">\n
          <div class="descLayout">\n
            <div class="pad" data-jsfiddle="example1">\n
              <h2>Understanding binding as reference</h2>\n
\n
              <p>Handsontable binds to your data source (array or object) by reference. Therefore, all the data entered in\n
                the\n
                grid will alter the original data source.</p>\n
\n
              <p>In complex applications, you may have a purpose to change data source programatically (outside of\n
                Handsontable). A value change that was done programatically will not be presented on the screen unless you\n
                refresh the grid on screen using the <b>render</b> method.</p>\n
\n
              <div id="example1"></div>\n
\n
              <p>\n
                <button name="dump" data-dump="#example1" data-instance="hot1" title="Prints current data source to Firebug/Chrome Dev Tools">\n
                  Dump data to console\n
                </button>\n
              </p>\n
            </div>\n
          </div>\n
\n
          <div class="codeLayout">\n
            <div class="pad">\n
              <div class="jsFiddle">\n
                <button class="jsFiddleLink" data-runfiddle="example1">Edit in jsFiddle</button>\n
              </div>\n
              <script data-jsfiddle="example1">\n
                var\n
                  data1 = [\n
                    [\'\', \'Kia\', \'Nissan\', \'Toyota\', \'Honda\'],\n
                    [\'2008\', 10, 11, 12, 13],\n
                    [\'2009\', 20, 11, 14, 13],\n
                    [\'2010\', 30, 15, 12, 13]\n
                  ],\n
                  container1 = document.getElementById(\'example1\'),\n
                  settings1 = {\n
                    data: data1\n
                  },\n
                  hot1;\n
\n
                hot1 = new Handsontable(container1, settings1);\n
                data1[0][1] = \'Ford\'; // change "Kia" to "Ford" programatically\n
                hot1.render();\n
              </script>\n
            </div>\n
          </div>\n
        </div>\n
\n
        <div class="rowLayout">\n
          <div class="descLayout">\n
            <div class="pad">\n
              <h2>But I want to change my data without rendering changes!</h2>\n
            </div>\n
          </div>\n
        </div>\n
\n
        <div class="rowLayout">\n
          <div class="descLayout">\n
            <div class="pad" data-jsfiddle="example2">\n
              <p>In case you want to keep separate working copy of data for Handsontable, it is suggested to clone the data\n
                source before you load it to Handsontable.</p>\n
\n
              <p>This can easily be done with <b>JSON.parse(JSON.stringify(data))</b> or some other deep-cloning function.</p>\n
\n
              <div id="example2"></div>\n
\n
              <p>\n
                <button name="dump" data-dump="#example2" data-instance="hot2" title="Prints current data source to Firebug/Chrome Dev Tools">\n
                  Dump data to console\n
                </button>\n
              </p>\n
            </div>\n
          </div>\n
\n
          <div class="codeLayout">\n
            <div class="pad">\n
              <div class="jsFiddle">\n
                <button class="jsFiddleLink" data-runfiddle="example2">Edit in jsFiddle</button>\n
              </div>\n
              <script data-jsfiddle="example2">\n
                var\n
                  data2 = [\n
                    [\'\', \'Kia\', \'Nissan\', \'Toyota\', \'Honda\'],\n
                    [\'2008\', 10, 11, 12, 13],\n
                    [\'2009\', 20, 11, 14, 13],\n
                    [\'2010\', 30, 15, 12, 13]\n
                  ],\n
                  container2 = document.getElementById(\'example2\'),\n
                  hot2;\n
\n
                hot2 = new Handsontable(container2, {\n
                  data: JSON.parse(JSON.stringify(data2))\n
                });\n
              </script>\n
            </div>\n
          </div>\n
        </div>\n
\n
        <div class="rowLayout">\n
          <div class="descLayout">\n
            <div class="pad" data-jsfiddle="example3">\n
              <p>In a similar way, you may find it useful to clone data before saving it.</p>\n
\n
              <p>That would be useful to make programmatic changes that would be saved to server but kept not invisible to\n
                the\n
                user.</p>\n
\n
              <div id="example3"></div>\n
\n
              <p>\n
                <button name="dump" data-dump="#example3" data-instance="hot3" title="Prints current data source to Firebug/Chrome Dev Tools">\n
                  Dump data to console\n
                </button>\n
              </p>\n
            </div>\n
          </div>\n
\n
          <div class="codeLayout">\n
            <div class="pad">\n
              <div class="jsFiddle">\n
                <button class="jsFiddleLink" data-runfiddle="example3">Edit in jsFiddle</button>\n
              </div>\n
              <script data-jsfiddle="example3">\n
                var\n
                  data3 = [\n
                    [\'\', \'Kia\', \'Nissan\', \'Toyota\', \'Honda\'],\n
                    [\'2008\', 10, 11, 12, 13],\n
                    [\'2009\', 20, 11, 14, 13],\n
                    [\'2010\', 30, 15, 12, 13]\n
                  ],\n
                  container3 = document.getElementById(\'example3\'),\n
                  hot3;\n
\n
                  hot3 = new Handsontable(container3, {\n
                    data: data3,\n
                    afterChange: function () {\n
                      var tmpData = JSON.parse(JSON.stringify(data3));\n
                      // now tmpData has a copy of data3 that can be manipulated\n
                      // without breaking the Handsontable data source object\n
                    }\n
                  });\n
              </script>\n
            </div>\n
          </div>\n
        </div>\n
\n
        <div class="footer-text">\n
        </div>\n
      </div>\n
\n
    </div>\n
\n
  </div>\n
</div>\n
\n
<div id="outside-links-wrapper"></div>\n
\n
</body>\n
</html>\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>8094</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>understanding_reference.html</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
