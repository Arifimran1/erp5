<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41272283.31</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>prepopulate.html</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>text/html</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

<!doctype html>\n
<html>\n
<head>\n
  <meta charset=\'utf-8\'>\n
  <title>Pre-populate new rows from template - Handsontable</title>\n
\n
  <!--\n
  Loading Handsontable (full distribution that includes all dependencies)\n
  -->\n
  <link data-jsfiddle="common" rel="stylesheet" media="screen" href="../dist/handsontable.css">\n
  <link data-jsfiddle="common" rel="stylesheet" media="screen" href="../dist/pikaday/pikaday.css">\n
  <script data-jsfiddle="common" src="../dist/pikaday/pikaday.js"></script>\n
  <script data-jsfiddle="common" src="../dist/moment/moment.js"></script>\n
  <script data-jsfiddle="common" src="../dist/zeroclipboard/ZeroClipboard.js"></script>\n
  <script data-jsfiddle="common" src="../dist/handsontable.js"></script>\n
\n
  <!--\n
  Loading demo dependencies. They are used here only to enhance the examples on this page\n
  -->\n
  <link data-jsfiddle="common" rel="stylesheet" media="screen" href="css/samples.css?20140331">\n
  <script src="js/samples.js"></script>\n
  <script src="js/highlight/highlight.pack.js"></script>\n
  <link rel="stylesheet" media="screen" href="js/highlight/styles/github.css">\n
  <link rel="stylesheet" href="css/font-awesome/css/font-awesome.min.css">\n
\n
  <!--\n
  Facebook open graph. Don\'t copy this to your project :)\n
  -->\n
  <meta property="og:title" content="Pre-populate new rows from template - Handsontable">\n
  <meta property="og:description"\n
        content="Below example shows how Legend match function can be used to present the template values for empty rows">\n
  <meta property="og:url" content="http://handsontable.com/demo/prepopulate.html">\n
  <meta property="og:image" content="http://handsontable.com/demo/image/og-image.png">\n
  <meta property="og:image:type" content="image/png">\n
  <meta property="og:image:width" content="409">\n
  <meta property="og:image:height" content="164">\n
  <link rel="canonical" href="http://handsontable.com/demo/prepopulate.html">\n
\n
  <!--\n
  Google Analytics for GitHub Page. Don\'t copy this to your project :)\n
  -->\n
  <script src="js/ga.js"></script>\n
</head>\n
\n
<body>\n
\n
\n
<div class="wrapper">\n
  <div class="wrapper-row">\n
    <div id="global-menu-clone">\n
      <h1><a href="../index.html">Handsontable</a></h1>\n
\n
    </div>\n
\n
    <div id="container">\n
      <div class="columnLayout">\n
\n
        <div class="rowLayout">\n
      <div class="descLayout">\n
        <div class="pad" data-jsfiddle="example1">\n
          <h2>Pre-populate new rows from template</h2>\n
\n
          <p>Below example shows how cell renderers can be used to present the template values for empty rows.</p>\n
\n
          <p>When any cell in the empty row is edited, the\n
            <b>onChange</b> callback fills the row with the template values.</p>\n
\n
          <div id="example1"></div>\n
\n
          <style>\n
            .placeholder {\n
              color: #777;\n
              font-style: italic;\n
            }\n
          </style>\n
\n
          <p>\n
            <button name="dump" data-dump="#example1" data-instance="hot1" title="Prints current data source to Firebug/Chrome Dev Tools">\n
              Dump data to console\n
            </button>\n
          </p>\n
        </div>\n
      </div>\n
\n
      <div class="codeLayout">\n
        <div class="pad">\n
          <div class="jsFiddle">\n
            <button class="jsFiddleLink" data-runfiddle="example1">Edit in jsFiddle</button>\n
          </div>\n
\n
          <script data-jsfiddle="example1">\n
            var\n
              tpl = [\'one\', \'two\', \'three\'],\n
              data = [\n
                [\'\', \'Kia\', \'Nissan\', \'Toyota\', \'Honda\'],\n
                [\'2008\', 10, 11, 12, 13],\n
                [\'2009\', 20, 11, 14, 13],\n
                [\'2009\', 30, 15, 12, 13]\n
              ],\n
              container = document.getElementById(\'example1\'),\n
              hot1;\n
\n
            function isEmptyRow(instance, row) {\n
              var rowData = instance.getData()[row];\n
\n
              for (var i = 0, ilen = rowData.length; i < ilen; i++) {\n
                if (rowData[i] !== null) {\n
                  return false;\n
                }\n
              }\n
\n
              return true;\n
            }\n
\n
            function defaultValueRenderer(instance, td, row, col, prop, value, cellProperties) {\n
              var args = arguments;\n
\n
              if (args[5] === null && isEmptyRow(instance, row)) {\n
                args[5] = tpl[col];\n
                td.style.color = \'#999\';\n
              }\n
              else {\n
                td.style.color = \'\';\n
              }\n
              Handsontable.renderers.TextRenderer.apply(this, args);\n
            }\n
\n
            hot1 = new Handsontable(container, {\n
              startRows: 8,\n
              startCols: 5,\n
              minSpareRows: 1,\n
              contextMenu: true,\n
              cells: function (row, col, prop) {\n
                var cellProperties = {};\n
\n
                cellProperties.renderer = defaultValueRenderer;\n
\n
                return cellProperties;\n
              },\n
              beforeChange: function (changes) {\n
                var instance = hot1,\n
                  ilen = changes.length,\n
                  clen = instance.colCount,\n
                  rowColumnSeen = {},\n
                  rowsToFill = {},\n
                  i,\n
                  c;\n
\n
                for (i = 0; i < ilen; i++) {\n
                  // if oldVal is empty\n
                  if (changes[i][2] === null && changes[i][3] !== null) {\n
                    if (isEmptyRow(instance, changes[i][0])) {\n
                      // add this row/col combination to cache so it will not be overwritten by template\n
                      rowColumnSeen[changes[i][0] + \'/\' + changes[i][1]] = true;\n
                      rowsToFill[changes[i][0]] = true;\n
                    }\n
                  }\n
                }\n
                for (var r in rowsToFill) {\n
                  if (rowsToFill.hasOwnProperty(r)) {\n
                    for (c = 0; c < clen; c++) {\n
                      // if it is not provided by user in this change set, take value from template\n
                      if (!rowColumnSeen[r + \'/\' + c]) {\n
                        changes.push([r, c, null, tpl[c]]);\n
                      }\n
                    }\n
                  }\n
                }\n
              }\n
            });\n
\n
            hot1.loadData(data);\n
          </script>\n
        </div>\n
      </div>\n
    </div>\n
\n
        <div class="footer-text">\n
        </div>\n
      </div>\n
\n
    </div>\n
\n
  </div>\n
</div>\n
\n
<div id="outside-links-wrapper"></div>\n
\n
</body>\n
</html>\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>6399</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>prepopulate.html</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
