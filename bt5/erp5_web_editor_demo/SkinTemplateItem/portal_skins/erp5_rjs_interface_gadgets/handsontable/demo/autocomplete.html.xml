<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41272449.51</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>autocomplete.html</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>text/html</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

<!doctype html>\n
<html>\n
<head>\n
  <meta charset=\'utf-8\'>\n
  <title>Autocomplete cell type - Handsontable</title>\n
\n
  <!--\n
  Loading Handsontable (full distribution that includes all dependencies)\n
  -->\n
  <script data-jsfiddle="common" src="../demo/js/jquery.min.js"></script>\n
\n
  <link data-jsfiddle="common" rel="stylesheet" media="screen" href="../dist/handsontable.css">\n
  <link data-jsfiddle="common" rel="stylesheet" media="screen" href="../dist/pikaday/pikaday.css">\n
  <script data-jsfiddle="common" src="../dist/pikaday/pikaday.js"></script>\n
  <script data-jsfiddle="common" src="../dist/moment/moment.js"></script>\n
  <script data-jsfiddle="common" src="../dist/zeroclipboard/ZeroClipboard.js"></script>\n
  <script data-jsfiddle="common" src="../dist/handsontable.js"></script>\n
\n
  <!--\n
  Loading demo dependencies. They are used here only to enhance the examples on this page\n
  -->\n
  <link data-jsfiddle="common" rel="stylesheet" media="screen" href="css/samples.css?20140331">\n
  <script src="js/samples.js"></script>\n
  <script src="js/highlight/highlight.pack.js"></script>\n
  <link rel="stylesheet" media="screen" href="js/highlight/styles/github.css">\n
  <link rel="stylesheet" href="css/font-awesome/css/font-awesome.min.css">\n
\n
  <!--\n
  Facebook open graph. Don\'t copy this to your project :)\n
  -->\n
  <meta property="og:title" content="Autocomplete cell type">\n
  <meta property="og:description"\n
        content="This example shows the usage of the Autocomplete feature.">\n
  <meta property="og:url" content="http://handsontable.com/demo/autocomplete.html">\n
  <meta property="og:image" content="http://handsontable.com/demo/image/og-image.png">\n
  <meta property="og:image:type" content="image/png">\n
  <meta property="og:image:width" content="409">\n
  <meta property="og:image:height" content="164">\n
  <link rel="canonical" href="http://handsontable.com/demo/autocomplete.html">\n
\n
  <!--\n
  Google Analytics for GitHub Page. Don\'t copy this to your project :)\n
  -->\n
  <script src="js/ga.js"></script>\n
\n
  <script data-jsfiddle="common">\n
    function getCarData() {\n
      return [\n
        ["Nissan", 2009, "black", "black"],\n
        ["Nissan", 2006, "blue", "blue"],\n
        ["Chrysler", 2004, "yellow", "black"],\n
        ["Volvo", 2012, "white", "gray"]\n
      ];\n
    }\n
  </script>\n
</head>\n
\n
<body>\n
\n
\n
<div class="wrapper">\n
<div class="wrapper-row">\n
<div id="global-menu-clone">\n
  <h1><a href="../index.html">Handsontable</a></h1>\n
\n
</div>\n
\n
<div id="container">\n
<div class="columnLayout">\n
\n
<div class="rowLayout">\n
  <div class="descLayout">\n
    <div class="pad">\n
\n
      <h2>Autocomplete cell type</h2>\n
\n
      <p>This page shows how to configure Handsontable with Autocomplete cell type, which expands the\n
      <a href="handsontable.html">Handsontable cell type.</a> with features typical for a combo box that\n
      updates its options based on user input.</p>\n
\n
      <p>There are three demos on this page:</p>\n
\n
      <ul>\n
        <li><a href="#lazy">Autocomplete lazy mode</a></li>\n
        <li><a href="#strict">Autocomplete strict mode</a></li>\n
        <li><a href="#strict-ajax">Autocomplete strict mode (Ajax)</a></li>\n
      </ul>\n
    </div>\n
  </div>\n
</div>\n
\n
<div class="rowLayout">\n
  <div class="descLayout">\n
    <div class="pad" data-jsfiddle="example1">\n
      <a name="lazy"></a>\n
\n
      <h2>Autocomplete lazy mode</h2>\n
\n
      <p>This example shows the usage of the Autocomplete feature in the default <strong>lazy&nbsp;mode</strong>. In this mode,\n
      user can choose one of the suggested options while typing or enter a custom value that is not included in the suggestions.</p>\n
\n
      <p>In this mode, the mouse and keyboard bindings are identical as in <a href="handsontable.html">Handsontable cell type.</a></p>\n
\n
      <p>The options are rendered from the <code>source</code> property which can be an array, or a function that returns an array.</p>\n
\n
      <div id="example1"></div>\n
\n
      <p>\n
        <button name="dump" data-dump="#example1" data-instance="hot1" title="Prints current data source to Firebug/Chrome Dev Tools">Dump\n
          data to console\n
        </button>\n
      </p>\n
    </div>\n
  </div>\n
\n
  <div class="codeLayout">\n
    <div class="pad">\n
      <div class="jsFiddle">\n
        <button class="jsFiddleLink" data-runfiddle="example1">Edit in jsFiddle</button>\n
      </div>\n
\n
      <script data-jsfiddle="example1">\n
        var example1 = document.getElementById(\'example1\'),\n
          hot1;\n
\n
        hot1 = new Handsontable(example1, {\n
          data: getCarData(),\n
          startRows: 7,\n
          startCols: 4,\n
          colHeaders: [\'Car\', \'Year\', \'Chassis color\', \'Bumper color\'],\n
          columns: [\n
            {\n
              type: \'autocomplete\',\n
              source: [\'BMW\', \'Chrysler\', \'Nissan\', \'Suzuki\', \'Toyota\', \'Volvo\'],\n
              strict: false\n
            },\n
            {type: \'numeric\'},\n
            {\n
              type: \'autocomplete\',\n
              source: [\'yellow\', \'red\', \'orange\', \'green\', \'blue\', \'gray\', \'black\', \'white\', \'purple\', \'lime\', \'olive\', \'cyan\'],\n
              strict: false\n
            },\n
            {\n
              type: \'autocomplete\',\n
              source: [\'yellow\', \'red\', \'orange\', \'green\', \'blue\', \'gray\', \'black\', \'white\', \'purple\', \'lime\', \'olive\', \'cyan\'],\n
              strict: false\n
            }\n
          ]\n
        });\n
      </script>\n
    </div>\n
  </div>\n
</div>\n
\n
<div class="rowLayout">\n
  <div class="descLayout">\n
    <div class="pad" data-jsfiddle="example2">\n
      <a name="strict"></a>\n
\n
      <h2>Autocomplete strict mode</h2>\n
\n
      <p>This is the same example as above with a difference that autocomplete now runs in <strong>strict\n
        mode</strong>.</p>\n
\n
      <p>In this mode, the autocomplete cells will only accept values that are defined in the source\n
        array.</p>\n
\n
      <p>In this mode, the mouse and keyboard bindings are identical as in <a href="handsontable.html">Handsontable cell type</a> with the below differences:</p>\n
\n
      <ul>\n
        <li>If there is at least one option visible, there always is a selection in HOT-in-HOT.</li>\n
        <li>When the first row is selected, pressing <kbd>Arrow up</kbd> does not deselect HOT-in-HOT. Instead behaves as the ENTER key but moves the selection in the main HOT upwards.</li>\n
      </ul>\n
\n
      <p>In strict mode, the <strong>allowInvalid</strong> option determines the behaviour in case of manual user input:</p>\n
\n
      <ul>\n
        <li><code>allowInvalid: true</code> (optional) - allows manual input of value that does not exist in the\n
          <code>source</code>. In this case, the field background highlight becomes red and the selection\n
          advances to the next cell\n
        </li>\n
        <li><code>allowInvalid: false</code> - does not allow manual input of value that does not exist in the\n
          <code>source</code>. In this case, the <kbd>ENTER</kbd> key is ignored and the editor field remains opened.</li>\n
      </ul>\n
\n
      <div id="example2"></div>\n
\n
      <p>\n
        <button name="dump" data-dump="#example2" data-instance="hot2" title="Prints current data source to Firebug/Chrome Dev Tools">Dump\n
          data to console\n
        </button>\n
      </p>\n
    </div>\n
  </div>\n
\n
  <div class="codeLayout">\n
    <div class="pad">\n
      <div class="jsFiddle">\n
        <button class="jsFiddleLink" data-runfiddle="example2">Edit in jsFiddle</button>\n
      </div>\n
\n
      <script data-jsfiddle="example2">\n
        var container2 = document.getElementById(\'example2\'),\n
          hot2;\n
\n
        hot2 = new Handsontable(container2, {\n
          data: getCarData(),\n
          startRows: 7,\n
          startCols: 4,\n
          colHeaders: [\'Car<br>(allowInvalid true)\', \'Year\', \'Chassis color<br>(allowInvalid false)\', \'Bumper color<br>(allowInvalid true)\'],\n
          columns: [\n
            {\n
              type: \'autocomplete\',\n
              source: [\'BMW\', \'Chrysler\', \'Nissan\', \'Suzuki\', \'Toyota\', \'Volvo\'],\n
              strict: true\n
              // allowInvalid: true // true is default\n
            },\n
            {},\n
            {\n
              type: \'autocomplete\',\n
              source: [\'yellow\', \'red\', \'orange\', \'green\', \'blue\', \'gray\', \'black\', \'white\', \'purple\', \'lime\', \'olive\', \'cyan\'],\n
              strict: true,\n
              allowInvalid: false\n
            },\n
            {\n
              type: \'autocomplete\',\n
              source: [\'yellow\', \'red\', \'orange\', \'green\', \'blue\', \'gray\', \'black\', \'white\', \'purple\', \'lime\', \'olive\', \'cyan\'],\n
              strict: true,\n
              allowInvalid: true //true is default\n
            }\n
          ]\n
        });\n
      </script>\n
    </div>\n
  </div>\n
</div>\n
\n
<div class="rowLayout">\n
  <div class="descLayout">\n
    <div class="pad">\n
      <a name="strict-ajax"></a>\n
\n
      <h2>Autocomplete strict mode (Ajax)</h2>\n
\n
      <p>Autocomplete can be also used with Ajax data source. In the below example, suggestions for the "Car" column are\n
        loaded from server.</p>\n
\n
      <p>To load data from remote (asynchronous) source, assign a function to the \'source\' property. Function should\n
        perform the server side request and call the callback function when the result is available.</p>\n
\n
      <div id="example3"></div>\n
\n
      <p>\n
        <button name="dump" data-dump="#example3" data-instance="hot3" title="Prints current data source to Firebug/Chrome Dev Tools">Dump\n
          data to console\n
        </button>\n
      </p>\n
    </div>\n
  </div>\n
\n
  <div class="codeLayout">\n
    <div class="pad">\n
      <div class="jsFiddle">\n
        <!--\n
        Ajax example will not work with JSFiddle at the moment because `php/cars.php` does not implement CORS.\n
        <button class="jsFiddleLink">Edit in jsFiddle</button>\n
      -->\n
      </div>\n
\n
      <script>\n
        var container3 = document.getElementById(\'example3\'),\n
          hot3;\n
\n
        hot3 = new Handsontable(container3, {\n
          data: getCarData(),\n
          startRows: 7,\n
          startCols: 4,\n
          colHeaders: [\'Car\', \'Year\', \'Chassis color\', \'Bumper color\'],\n
          columns: [\n
            {\n
              type: \'autocomplete\',\n
              source: function (query, process) {\n
                $.ajax({\n
                  //url: \'php/cars.php\', // commented out because our website is hosted on static GitHub Pages\n
                  url: \'json/autocomplete.json\',\n
                  dataType: \'json\',\n
                  data: {\n
                    query: query\n
                  },\n
                  success: function (response) {\n
                      console.log("response", response);\n
                      //process(JSON.parse(response.data)); // JSON.parse takes string as a argument\n
                      process(response.data);\n
\n
                  }\n
                });\n
              },\n
              strict: true\n
            },\n
            {}, // Year is a default text column\n
            {}, // Chassis color is a default text column\n
            {} // Bumper color is a default text column\n
          ]\n
        });\n
      </script>\n
    </div>\n
  </div>\n
</div>\n
\n
<div class="footer-text"></div>\n
</div>\n
\n
</div>\n
\n
</div>\n
</div>\n
\n
<div id="outside-links-wrapper"></div>\n
\n
</body>\n
</html>\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>11076</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>autocomplete.html</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
