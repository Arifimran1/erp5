<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41271193.24</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>slick.headermenu.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

(function ($) {\n
  // register namespace\n
  $.extend(true, window, {\n
    "Slick": {\n
      "Plugins": {\n
        "HeaderMenu": HeaderMenu\n
      }\n
    }\n
  });\n
\n
\n
  /***\n
   * A plugin to add drop-down menus to column headers.\n
   *\n
   * USAGE:\n
   *\n
   * Add the plugin .js & .css files and register it with the grid.\n
   *\n
   * To specify a menu in a column header, extend the column definition like so:\n
   *\n
   *   var columns = [\n
   *     {\n
   *       id: \'myColumn\',\n
   *       name: \'My column\',\n
   *\n
   *       // This is the relevant part\n
   *       header: {\n
   *          menu: {\n
   *              items: [\n
   *                {\n
   *                  // menu item options\n
   *                },\n
   *                {\n
   *                  // menu item options\n
   *                }\n
   *              ]\n
   *          }\n
   *       }\n
   *     }\n
   *   ];\n
   *\n
   *\n
   * Available menu options:\n
   *    tooltip:      Menu button tooltip.\n
   *\n
   *\n
   * Available menu item options:\n
   *    title:        Menu item text.\n
   *    disabled:     Whether the item is disabled.\n
   *    tooltip:      Item tooltip.\n
   *    command:      A command identifier to be passed to the onCommand event handlers.\n
   *    iconCssClass: A CSS class to be added to the menu item icon.\n
   *    iconImage:    A url to the icon image.\n
   *\n
   *\n
   * The plugin exposes the following events:\n
   *    onBeforeMenuShow:   Fired before the menu is shown.  You can customize the menu or dismiss it by returning false.\n
   *        Event args:\n
   *            grid:     Reference to the grid.\n
   *            column:   Column definition.\n
   *            menu:     Menu options.  Note that you can change the menu items here.\n
   *\n
   *    onCommand:    Fired on menu item click for buttons with \'command\' specified.\n
   *        Event args:\n
   *            grid:     Reference to the grid.\n
   *            column:   Column definition.\n
   *            command:  Button command identified.\n
   *            button:   Button options.  Note that you can change the button options in your\n
   *                      event handler, and the column header will be automatically updated to\n
   *                      reflect them.  This is useful if you want to implement something like a\n
   *                      toggle button.\n
   *\n
   *\n
   * @param options {Object} Options:\n
   *    buttonCssClass:   an extra CSS class to add to the menu button\n
   *    buttonImage:      a url to the menu button image (default \'../images/down.gif\')\n
   * @class Slick.Plugins.HeaderButtons\n
   * @constructor\n
   */\n
  function HeaderMenu(options) {\n
    var _grid;\n
    var _self = this;\n
    var _handler = new Slick.EventHandler();\n
    var _defaults = {\n
      buttonCssClass: null,\n
      buttonImage: null\n
    };\n
    var $menu;\n
    var $activeHeaderColumn;\n
\n
\n
    function init(grid) {\n
      options = $.extend(true, {}, _defaults, options);\n
      _grid = grid;\n
      _handler\n
        .subscribe(_grid.onHeaderCellRendered, handleHeaderCellRendered)\n
        .subscribe(_grid.onBeforeHeaderCellDestroy, handleBeforeHeaderCellDestroy);\n
\n
      // Force the grid to re-render the header now that the events are hooked up.\n
      _grid.setColumns(_grid.getColumns());\n
\n
      // Hide the menu on outside click.\n
      $(document.body).bind("mousedown", handleBodyMouseDown);\n
    }\n
\n
\n
    function destroy() {\n
      _handler.unsubscribeAll();\n
      $(document.body).unbind("mousedown", handleBodyMouseDown);\n
    }\n
\n
\n
    function handleBodyMouseDown(e) {\n
      if ($menu && $menu[0] != e.target && !$.contains($menu[0], e.target)) {\n
        hideMenu();\n
      }\n
    }\n
\n
\n
    function hideMenu() {\n
      if ($menu) {\n
        $menu.remove();\n
        $menu = null;\n
        $activeHeaderColumn\n
          .removeClass("slick-header-column-active");\n
      }\n
    }\n
\n
    function handleHeaderCellRendered(e, args) {\n
      var column = args.column;\n
      var menu = column.header && column.header.menu;\n
\n
      if (menu) {\n
        var $el = $("<div></div>")\n
          .addClass("slick-header-menubutton")\n
          .data("column", column)\n
          .data("menu", menu);\n
\n
        if (options.buttonCssClass) {\n
          $el.addClass(options.buttonCssClass);\n
        }\n
\n
        if (options.buttonImage) {\n
          $el.css("background-image", "url(" + options.buttonImage + ")");\n
        }\n
\n
        if (menu.tooltip) {\n
          $el.attr("title", menu.tooltip);\n
        }\n
\n
        $el\n
          .bind("click", showMenu)\n
          .appendTo(args.node);\n
      }\n
    }\n
\n
\n
    function handleBeforeHeaderCellDestroy(e, args) {\n
      var column = args.column;\n
\n
      if (column.header && column.header.menu) {\n
        $(args.node).find(".slick-header-menubutton").remove();\n
      }\n
    }\n
\n
\n
    function showMenu(e) {\n
      var $menuButton = $(this);\n
      var menu = $menuButton.data("menu");\n
      var columnDef = $menuButton.data("column");\n
\n
      // Let the user modify the menu or cancel altogether,\n
      // or provide alternative menu implementation.\n
      if (_self.onBeforeMenuShow.notify({\n
          "grid": _grid,\n
          "column": columnDef,\n
          "menu": menu\n
        }, e, _self) == false) {\n
        return;\n
      }\n
\n
\n
      if (!$menu) {\n
        $menu = $("<div class=\'slick-header-menu\'></div>")\n
          .appendTo(_grid.getContainerNode());\n
      }\n
      $menu.empty();\n
\n
\n
      // Construct the menu items.\n
      for (var i = 0; i < menu.items.length; i++) {\n
        var item = menu.items[i];\n
\n
        var $li = $("<div class=\'slick-header-menuitem\'></div>")\n
          .data("command", item.command || \'\')\n
          .data("column", columnDef)\n
          .data("item", item)\n
          .bind("click", handleMenuItemClick)\n
          .appendTo($menu);\n
\n
        if (item.disabled) {\n
          $li.addClass("slick-header-menuitem-disabled");\n
        }\n
\n
        if (item.tooltip) {\n
          $li.attr("title", item.tooltip);\n
        }\n
\n
        var $icon = $("<div class=\'slick-header-menuicon\'></div>")\n
          .appendTo($li);\n
\n
        if (item.iconCssClass) {\n
          $icon.addClass(item.iconCssClass);\n
        }\n
\n
        if (item.iconImage) {\n
          $icon.css("background-image", "url(" + item.iconImage + ")");\n
        }\n
\n
        $("<span class=\'slick-header-menucontent\'></span>")\n
          .text(item.title)\n
          .appendTo($li);\n
      }\n
\n
\n
      // Position the menu.\n
      $menu\n
        .offset({ top: $(this).offset().top + $(this).height(), left: $(this).offset().left });\n
\n
\n
      // Mark the header as active to keep the highlighting.\n
      $activeHeaderColumn = $menuButton.closest(".slick-header-column");\n
      $activeHeaderColumn\n
        .addClass("slick-header-column-active");\n
\n
      // Stop propagation so that it doesn\'t register as a header click event.\n
      e.preventDefault();\n
      e.stopPropagation();\n
    }\n
\n
\n
    function handleMenuItemClick(e) {\n
      var command = $(this).data("command");\n
      var columnDef = $(this).data("column");\n
      var item = $(this).data("item");\n
\n
      if (item.disabled) {\n
        return;\n
      }\n
\n
      hideMenu();\n
\n
      if (command != null && command != \'\') {\n
        _self.onCommand.notify({\n
            "grid": _grid,\n
            "column": columnDef,\n
            "command": command,\n
            "item": item\n
          }, e, _self);\n
      }\n
\n
      // Stop propagation so that it doesn\'t register as a header click event.\n
      e.preventDefault();\n
      e.stopPropagation();\n
    }\n
\n
    $.extend(this, {\n
      "init": init,\n
      "destroy": destroy,\n
\n
      "onBeforeMenuShow": new Slick.Event(),\n
      "onCommand": new Slick.Event()\n
    });\n
  }\n
})(jQuery);\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>7544</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>slick.headermenu.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
