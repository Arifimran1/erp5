<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts41271308.13</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>03-Radar-Chart.md</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/octet-stream</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

---\n
title: Radar Chart\n
anchor: radar-chart\n
---\n
\n
###Introduction\n
A radar chart is a way of showing multiple data points and the variation between them.\n
\n
They are often useful for comparing the points of two or more different data sets.\n
\n
<div class="canvas-holder">\n
\t<canvas width="250" height="125"></canvas>\n
</div>\n
\n
###Example usage\n
\n
```javascript\n
var myRadarChart = new Chart(ctx).Radar(data, options);\n
```\n
\n
###Data structure\n
```javascript\n
var data = {\n
\tlabels: ["Eating", "Drinking", "Sleeping", "Designing", "Coding", "Cycling", "Running"],\n
\tdatasets: [\n
\t\t{\n
\t\t\tlabel: "My First dataset",\n
\t\t\tfillColor: "rgba(220,220,220,0.2)",\n
\t\t\tstrokeColor: "rgba(220,220,220,1)",\n
\t\t\tpointColor: "rgba(220,220,220,1)",\n
\t\t\tpointStrokeColor: "#fff",\n
\t\t\tpointHighlightFill: "#fff",\n
\t\t\tpointHighlightStroke: "rgba(220,220,220,1)",\n
\t\t\tdata: [65, 59, 90, 81, 56, 55, 40]\n
\t\t},\n
\t\t{\n
\t\t\tlabel: "My Second dataset",\n
\t\t\tfillColor: "rgba(151,187,205,0.2)",\n
\t\t\tstrokeColor: "rgba(151,187,205,1)",\n
\t\t\tpointColor: "rgba(151,187,205,1)",\n
\t\t\tpointStrokeColor: "#fff",\n
\t\t\tpointHighlightFill: "#fff",\n
\t\t\tpointHighlightStroke: "rgba(151,187,205,1)",\n
\t\t\tdata: [28, 48, 40, 19, 96, 27, 100]\n
\t\t}\n
\t]\n
};\n
```\n
For a radar chart, to provide context of what each point means, we include an array of strings that show around each point in the chart.\n
For the radar chart data, we have an array of datasets. Each of these is an object, with a fill colour, a stroke colour, a colour for the fill of each point, and a colour for the stroke of each point. We also have an array of data values.\n
\n
The label key on each dataset is optional, and can be used when generating a scale for the chart.\n
\n
### Chart options\n
\n
These are the customisation options specific to Radar charts. These options are merged with the [global chart configuration options](#getting-started-global-chart-configuration), and form the options of the chart.\n
\n
\n
```javascript\n
{\n
\t//Boolean - Whether to show lines for each scale point\n
\tscaleShowLine : true,\n
\n
\t//Boolean - Whether we show the angle lines out of the radar\n
\tangleShowLineOut : true,\n
\n
\t//Boolean - Whether to show labels on the scale\n
\tscaleShowLabels : false,\n
\n
\t// Boolean - Whether the scale should begin at zero\n
\tscaleBeginAtZero : true,\n
\n
\t//String - Colour of the angle line\n
\tangleLineColor : "rgba(0,0,0,.1)",\n
\n
\t//Number - Pixel width of the angle line\n
\tangleLineWidth : 1,\n
\n
\t//String - Point label font declaration\n
\tpointLabelFontFamily : "\'Arial\'",\n
\n
\t//String - Point label font weight\n
\tpointLabelFontStyle : "normal",\n
\n
\t//Number - Point label font size in pixels\n
\tpointLabelFontSize : 10,\n
\n
\t//String - Point label font colour\n
\tpointLabelFontColor : "#666",\n
\n
\t//Boolean - Whether to show a dot for each point\n
\tpointDot : true,\n
\n
\t//Number - Radius of each point dot in pixels\n
\tpointDotRadius : 3,\n
\n
\t//Number - Pixel width of point dot stroke\n
\tpointDotStrokeWidth : 1,\n
\n
\t//Number - amount extra to add to the radius to cater for hit detection outside the drawn point\n
\tpointHitDetectionRadius : 20,\n
\n
\t//Boolean - Whether to show a stroke for datasets\n
\tdatasetStroke : true,\n
\n
\t//Number - Pixel width of dataset stroke\n
\tdatasetStrokeWidth : 2,\n
\n
\t//Boolean - Whether to fill the dataset with a colour\n
\tdatasetFill : true,\n
\t{% raw %}\n
\t//String - A legend template\n
\tlegendTemplate : "<ul class=\\"<%=name.toLowerCase()%>-legend\\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\\"background-color:<%=datasets[i].strokeColor%>\\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"\n
\t{% endraw %}\n
}\n
```\n
\n
\n
You can override these for your `Chart` instance by passing a second argument into the `Radar` method as an object with the keys you want to override.\n
\n
For example, we could have a radar chart without a point for each on piece of data by doing the following:\n
\n
```javascript\n
new Chart(ctx).Radar(data, {\n
\tpointDot: false\n
});\n
// This will create a chart with all of the default options, merged from the global config,\n
//  and the Bar chart defaults but this particular instance will have `pointDot` set to false.\n
```\n
\n
We can also change these defaults values for each Radar type that is created, this object is available at `Chart.defaults.Radar`.\n
\n
\n
### Prototype methods\n
\n
#### .getPointsAtEvent( event )\n
\n
Calling `getPointsAtEvent(event)` on your Chart instance passing an argument of an event, or jQuery event, will return the point elements that are at that the same position of that event.\n
\n
```javascript\n
canvas.onclick = function(evt){\n
\tvar activePoints = myRadarChart.getPointsAtEvent(evt);\n
\t// => activePoints is an array of points on the canvas that are at the same position as the click event.\n
};\n
```\n
\n
This functionality may be useful for implementing DOM based tooltips, or triggering custom behaviour in your application.\n
\n
#### .update( )\n
\n
Calling `update()` on your Chart instance will re-render the chart with any updated values, allowing you to edit the value of multiple existing points, then render those in one animated render loop.\n
\n
```javascript\n
myRadarChart.datasets[0].points[2].value = 50;\n
// Would update the first dataset\'s value of \'Sleeping\' to be 50\n
myRadarChart.update();\n
// Calling update now animates the position of Sleeping from 90 to 50.\n
```\n
\n
#### .addData( valuesArray, label )\n
\n
Calling `addData(valuesArray, label)` on your Chart instance passing an array of values for each dataset, along with a label for those points.\n
\n
```javascript\n
// The values array passed into addData should be one for each dataset in the chart\n
myRadarChart.addData([40, 60], "Dancing");\n
// The new data will now animate at the end of the chart.\n
```\n
\n
#### .removeData( )\n
\n
Calling `removeData()` on your Chart instance will remove the first value for all datasets on the chart.\n
\n
```javascript\n
myRadarChart.removeData();\n
// Other points will now animate to their correct positions.\n
```

]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>5807</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>03-Radar-Chart.md</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
