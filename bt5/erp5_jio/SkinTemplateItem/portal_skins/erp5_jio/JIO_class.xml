<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

import json\n
from DateTime import DateTime\n
from Products.ZSQLCatalog.SQLCatalog import SimpleQuery, ComplexQuery\n
from Products.ERP5Type.Log import log\n
\n
def dictGetKeyFromValue(obj, value, *args):\n
  for k, v in obj.items():\n
    if v == value:\n
      return k\n
  if len(args) == 0:\n
    raise ValueError(\'value not found\')\n
  return args[0]\n
\n
def UTF8DeepJsonEncoder(obj):\n
  # string -> unicode -> str\n
  if isinstance(obj, unicode):\n
    return obj.encode("UTF-8")\n
  # array -> list\n
  if isinstance(obj, list):\n
    for i in xrange(len(obj)):\n
      obj[i] = UTF8DeepJsonEncoder(obj[i])\n
    return obj\n
  # object -> dict\n
  if isinstance(obj, dict):\n
    for k, v in obj.items():\n
      v = UTF8DeepJsonEncoder(v)\n
      del obj[k]\n
      obj[UTF8DeepJsonEncoder(k)] = v\n
    return obj\n
  # number (int) -> int, long\n
  # true -> True\n
  # false -> False\n
  # null -> None\n
  return obj\n
\n
def json_loads(string):\n
  return UTF8DeepJsonEncoder(json.loads(string))\n
\n
def jsonDeepCopy(json_dict):\n
  "Clones the JSON object in deep and returns the clone"\n
  return json_loads(json.dumps(json_dict))\n
\n
class FakeDocument():\n
  def getObject(self): return self\n
  def hasProperty(self, property_id): return False\n
\n
\n
class JioErp5Only():\n
  def getDocumentAttachment(self, metadata_json):\n
    tool.checkMetadata(metadata_json)\n
    try: document = tool.getDocumentFromUrl(metadata_json.get("_id"))\n
    except ValueError: raise LookupError("Missing document")\n
    except KeyError: raise LookupError("Missing document")\n
    raise KeyError("Missing attachment")\n
\n
  def getDocumentMetadata(self, metadata_json):\n
    tool.checkMetadata(metadata_json)\n
    try: document = tool.getDocumentFromUrl(metadata_json.get("_id"))\n
    except ValueError: raise LookupError("Missing document")\n
    except KeyError: raise LookupError("Missing document")\n
    document_dict = tool.getDocumentProperties(document)\n
    tool.stringifyDictDateValue(document_dict)\n
    document_dict["workflow_history"] = [v for v in document.workflow_history]\n
    return document_dict\n
\n
\n
class JioGeneric():\n
  "Processes generic jIO requests"\n
  def __init__(self):\n
    self.simple_conversion_dict = {\n
      "content_type": "format",\n
      "portal_type": "type",\n
      "contributor_list": "contributor",\n
      "subject_list": "subject",\n
      "categories_list": "category",\n
      "creation_date": "created",\n
      "modification_date": "modified"\n
    }\n
    # order deny, allow\n
    # deny from all\n
    self.allowed_property_id_list = ["title", "short_title", "description",\n
                                     "language", "reference", "version",\n
                                     "format", "type",\n
                                     "effective_date", "expiration_date",\n
                                     "contributor", "subject", "category"]\n
    self.type_attachment_key = {\n
      "Web Page": "text_content",\n
      "Image": "data"\n
    }\n
    self.allowed_portal_type_list = ["Web Page", "Image"]\n
    # self.local_attachment_key = "local_attachment_dict"\n
\n
  def getDocumentAttachment(self, metadata_json):\n
    tool.checkMetadata(metadata_json)\n
    try: document = tool.getDocumentFromUrl(metadata_json.get("_id"))\n
    except AttributeError: raise ValueError("Bad document id")\n
    except (ValueError, KeyError): raise LookupError("Missing document")\n
    document_dict = tool.getDocumentProperties(document)\n
    attachment_key = self.type_attachment_key.get(document.getPortalType())\n
    if metadata_json.get("_attachment") == "body" and \\\n
      attachment_key in document_dict:\n
      data = document_dict[attachment_key]\n
      if data is not None:\n
        return data\n
    # elif document_dict.get(self.local_attachment_key) is not None and \\\n
    #      metadata_json.get("_attachment") in \\\n
    #      document_dict.get(self.local_attachment_key):\n
    #   return document_dict[self.local_attachment_key][\n
    #     metadata_json["_attachment"]]["data"]\n
    raise KeyError("Missing attachment")\n
\n
  def getDocumentMetadata(self, metadata_json):\n
    tool.checkMetadata(metadata_json)\n
    try: document = tool.getDocumentFromUrl(metadata_json.get("_id"))\n
    except AttributeError: raise ValueError("Bad document id")\n
    except ValueError: raise LookupError("Missing document")\n
    except KeyError: raise LookupError("Missing document")\n
    document_dict = tool.getDocumentProperties(document)\n
    real_document_dict = {}\n
    # get attachments metas\n
    attachment_key = self.type_attachment_key.get(document.getPortalType())\n
    if attachment_key is not None and \\\n
      document_dict.get(attachment_key) is not None:\n
      real_document_dict["_attachments"] = tool.dictFusion(\n
        real_document_dict.get("_attachments"), {\n
          "body": {\n
            "length": len(document_dict[attachment_key]),\n
            "content_type": document_dict.get("content_type")\n
          }\n
        }\n
      )\n
    # if document_dict.get(self.local_attachment_key) is not None:\n
    #   tmp = {}\n
    #   for k, v in document_dict[self.local_attachment_key].items():\n
    #     tmp[k] = {\n
    #       "length": len(document_dict[self.local_attachment_key][k]["data"]),\n
    #       "content_type": document_dict[self.local_attachment_key][k][\n
    #         "content_type"]\n
    #     }\n
    #   real_document_dict["_attachments"] = tool.dictFusion(\n
    #     real_document_dict.get("_attachments"), tmp);\n
    while True:\n
      try: k, v = document_dict.popitem()\n
      except KeyError: break\n
      if v is None or (\n
          isinstance(v, (tuple, list, str, unicode)) and len(v) == 0):\n
        continue\n
      if k in self.simple_conversion_dict:\n
        k = self.simple_conversion_dict.get(k)\n
      if k in self.allowed_property_id_list:\n
        if isinstance(v, DateTime):\n
          v = v.ISO8601()\n
        if k == attachment_key:\n
          real_document_dict["_attachments"] = {\n
            "body": {\n
              "length": len(v)\n
            }\n
          }\n
        elif k == "category" and isinstance(v, list):\n
          # specific process for relation metadata_key\n
          relation_list = []\n
          for i, s in enumerate(v):\n
            if s.startswith("follow_up/"):\n
              relation_list.append(v.pop(i))\n
          if len(relation_list) > 0:\n
            real_document_dict["relation"] = relation_list\n
        real_document_dict[k] = v\n
    real_document_dict["_id"] = metadata_json["_id"]\n
    real_document_dict["date"] = document.getCreationDate().ISO8601()\n
    real_document_dict["created"] = document.getCreationDate().ISO8601()\n
    real_document_dict["modified"] = document.getModificationDate().ISO8601()\n
    real_document_dict["type"] = document.getPortalType()\n
    #tool.stringifyDictDateValue(real_document_dict)\n
    return real_document_dict\n
\n
  def updateDocumentMetadataEditKw(self, metadata_json,\n
                                   document=FakeDocument()):\n
    edit_kw = {}\n
    while True:\n
      try: meta_key, meta_value = metadata_json.popitem()\n
      except KeyError: break\n
      doc_key = meta_key\n
      for erp5_key, jio_key in self.simple_conversion_dict.iteritems():\n
        if jio_key == meta_key:\n
          doc_key = erp5_key\n
          break\n
      if meta_key in self.allowed_property_id_list:\n
        if meta_value is None and document.hasProperty(doc_key) or \\\n
           meta_value is not None:\n
          edit_kw[doc_key] = meta_value\n
        if meta_key == "category" and metadata_json.get("relation") is not None:\n
          if isinstance(metadata_json["relation"], tuple):\n
            edit_kw[doc_key] = edit_kw[doc_key] + metadata_json["relation"]\n
          else:\n
            edit_kw[doc_key] = edit_kw[doc_key] + (metadata_json["relation"],)\n
    return edit_kw\n
\n
  def putDocumentAttachment(self, metadata_json):\n
    tool.checkMetadata(metadata_json)\n
    document = tool.getDocumentFromUrl(metadata_json["_id"]).getObject()\n
    attachment_key = self.type_attachment_key.get(document.getPortalType())\n
    if metadata_json.get("_attachment") == "body":\n
      edit_kw = {attachment_key: metadata_json.get("_data")}\n
      document.edit(**edit_kw)\n
    else:\n
      raise ValueError("Unauthorized attachment id")\n
      # edit_kw = {self.local_attachment_key:\n
      #            document.getProperty(self.local_attachment_key)}\n
      # if edit_kw.get(self.local_attachment_key) is None:\n
      #   edit_kw[self.local_attachment_key] = {}\n
      # edit_kw[self.local_attachment_key][metadata_json.get("_attachment")] = {\n
      #   "content_type": metadata_json.get("_mimetype"),\n
      #   "data": metadata_json.get("_data")}\n
      # document.edit(**edit_kw)\n
    return {"ok": True, "id": metadata_json["_id"],\n
            "attachment": metadata_json.get("_attachment")}\n
\n
  def putDocumentMetadata(self, metadata_json, overwrite=True):\n
    doc_id = metadata_json.get("_id")\n
    document = None\n
    try: document = tool.getDocumentFromUrl(doc_id)\n
    except AttributeError: pass\n
    except ValueError: pass\n
    except KeyError: pass\n
    if document is not None:\n
      if not overwrite:\n
        raise LookupError("Document already exists")\n
      # document exists\n
      document.getObject().edit(\n
        **self.updateDocumentMetadataEditKw(metadata_json, document=document))\n
    else:\n
      if "_id" in metadata_json:\n
        try:\n
          tool.newDocumentFromUrl(\n
            metadata_json["_id"],\n
            self.updateDocumentMetadataEditKw(metadata_json))\n
        except KeyError: raise KeyError("Bad document id")\n
      elif "type" in metadata_json:\n
        try:\n
          document = tool.newDocumentFromType(\n
            metadata_json["type"],\n
            self.updateDocumentMetadataEditKw(metadata_json))\n
          doc_id = tool.getUrlFromDocument(document)\n
        except ValueError:\n
          raise ValueError("Bad type")\n
      else:\n
        raise TypeError("Type missing")\n
    return {"ok": True, "id": doc_id}\n
\n
  def removeDocument(self, metadata_json):\n
    tool.checkMetadata(metadata_json)\n
    try: document = tool.getDocumentFromUrl(metadata_json["_id"])\n
    except AttributeError: raise ValueError("Bad document id")\n
    except ValueError: raise LookupError("Missing document")\n
    except KeyError: raise LookupError("Missing document")\n
    document_id = document.getId()\n
    document.getParentValue().manage_delObjects(ids=[document_id])\n
    return {"ok": True, "id": metadata_json["_id"]}\n
\n
  def removeAttachment(self, metadata_json):\n
    tool.checkMetadata(metadata_json)\n
    try: document = tool.getDocumentFromUrl(metadata_json["_id"])\n
    except AttributeError: raise ValueError("Bad document id")\n
    except ValueError: raise LookupError("Missing document")\n
    except KeyError: raise LookupError("Missing document")\n
    attachment_key = self.type_attachment_key.get(document.getPortalType())\n
    if metadata_json.get("_attachment") == "body":\n
      if document.getTextContent() == None:\n
        raise LookupError("Missing attachment")\n
      edit_kw = {attachment_key: None}\n
      document.edit(**edit_kw)\n
    else:\n
      raise ValueError("Unauthorized attachment id")\n
    return {"ok": True, "id": metadata_json["_id"],\n
            "attachment": metadata_json.get("_attachment")}\n
\n
  def parseQuery(self, query_dict):\n
    def rec(query_dict):\n
      if query_dict.get("type") == "simple":\n
        # if query_dict.get("key") not in self.allowed_property_id_list:\n
        #   return None\n
        for erp5_key, jio_key in self.simple_conversion_dict.items():\n
          if query_dict["key"] == jio_key:\n
            query_dict["key"] = erp5_key\n
            break\n
        return SimpleQuery(comparison_operator=query_dict[\'operator\'],\n
                           **{query_dict[\'key\']: query_dict[\'value\']})\n
      if query_dict.get("type") == "complex":\n
        tool.listMapReplace(rec, query_dict[\'query_list\'])\n
        try:\n
          while True: query_dict[\'query_list\'].remove(None)\n
        except ValueError: pass\n
        return ComplexQuery(operator=query_dict[\'operator\'],\n
                            *query_dict[\'query_list\'])\n
      return None\n
    return rec(query_dict)\n
\n
  def getAllDocuments(self, option_json):\n
    response = {"rows":[]}\n
    kw = {}\n
    if isinstance(option_json.get(\'query\'), dict):\n
      kw[\'query\'] = self.parseQuery(option_json["query"])\n
      kw[\'query\'] = ComplexQuery(\n
        kw[\'query\'],\n
        ComplexQuery(\n
          operator=\'or\',\n
          *[SimpleQuery(comparison_operator="=", portal_type=x) \\\n
            for x in self.allowed_portal_type_list]\n
        ),\n
        comparison_operator=\'and\'\n
      )\n
    else:\n
      kw[\'query\'] = ComplexQuery(\n
        operator=\'or\',\n
        *[SimpleQuery(comparison_operator="=", portal_type=x) \\\n
          for x in self.allowed_portal_type_list]\n
      )\n
\n
    if isinstance(option_json.get(\'limit\'), list):\n
      kw[\'limit\'] = tuple(option_json[\'limit\'])\n
\n
    c = self.simple_conversion_dict\n
    if isinstance(option_json.get(\'sort_on\'), list):\n
      for i in range(len(option_json[\'sort_on\'])):\n
        s = option_json[\'sort_on\'][i]\n
        option_json[\'sort_on\'][i] = dictGetKeyFromValue(c, s[0], s[0])\n
      kw[\'sort_on\'] = option_json[\'sort_on\']\n
\n
    if not isinstance(option_json.get(\'select_list\'), list):\n
      option_json[\'select_list\'] = []\n
    if option_json[\'select_list\'] != []:\n
      id_list = context.portal_catalog.getSQLCatalog().getColumnIds()\n
      i = len(option_json[\'select_list\']) - 1\n
      while i >= 0:\n
        s = option_json[\'select_list\'][i]\n
        option_json[\'select_list\'][i] = dictGetKeyFromValue(c, s, s)\n
        if option_json[\'select_list\'][i] not in id_list:\n
          option_json[\'select_list\'].pop(i)\n
        i -= 1\n
    kw[\'select_list\'] = option_json[\'select_list\']\n
\n
    for document in context.portal_catalog(**kw):\n
      url = tool.getUrlFromDocument(document)\n
      row = {"id": url, "key": url, "value": {}}\n
      for erp5_meta in option_json[\'select_list\']:\n
        jio_meta = c.get(erp5_meta, erp5_meta)\n
        row[\'value\'][jio_meta] = getattr(document, erp5_meta, None)\n
        if isinstance(row[\'value\'][jio_meta], DateTime):\n
          row[\'value\'][jio_meta] = row[\'value\'][jio_meta].ISO8601()\n
      if option_json.get(\'include_docs\') is True:\n
        row["doc"] = self.getDocumentMetadata({"_id": url})\n
      response["rows"].append(row)\n
    response["total_rows"] = len(response["rows"])\n
    return response\n
\n
  # def getAllDocuments(self, option_json):\n
  #   response = {"rows":[]}\n
  #   editkw = {}\n
  #   if "query" in option_json:\n
  #     editkw[\'query\'] = self.parseQuery(option_json["query"])\n
  #     editkw[\'query\'] = ComplexQuery(\n
  #       editkw[\'query\'],\n
  #       ComplexQuery(\n
  #         operator=\'or\',\n
  #         *[SimpleQuery(comparison_operator="=", portal_type=x) \\\n
  #           for x in self.allowed_portal_type_list]\n
  #       ),\n
  #       comparison_operator=\'and\'\n
  #     )\n
  #     # if isinstance(option_json.get(\'limit\'), list):\n
  #     #   editkw[\'limit\'] = tuple(option_json[\'limit\'])\n
\n
  #     # if isinstance(option_json.get(\'select_list\'), list):\n
  #     #   for sub_list in option_json[\'select_list\']:\n
  #     #     sub_list = tuple(sub_list)\n
  #     #   editkw[\'select_list\'] = option_json[\'select_list\']\n
\n
  #     for document in context.portal_catalog(query=query):\n
  #       url = tool.getUrlFromDocument(document)\n
  #       row = {"id": url, "key": url, "values": {}}\n
  #       if option_json.get(\'include_docs\') is True:\n
  #         row["doc"] = self.getDocumentMetadata({"_id": url})\n
  #       response["rows"].append(row)\n
  #   else:\n
  #     for portal_type in self.allowed_portal_type_list:\n
  #       for document in context.portal_catalog(portal_type=portal_type):\n
  #         url = tool.getUrlFromDocument(document)\n
  #         row = {"id": url, "key": url, "values": {}}\n
  #         if option_json.get(\'include_docs\') is True:\n
  #           row["doc"] = self.getDocumentMetadata({"_id": url})\n
  #         response["rows"].append(row)\n
  #   response["total_rows"] = len(response["rows"])\n
  #   return response\n
\n
  # def getAllDocuments(self, option_json):\n
  #   response = {"rows":[]}\n
  #   for portal_type in self.allowed_portal_type_list:\n
  #     for document in context.portal_catalog(portal_type=portal_type):\n
  #       url = tool.getUrlFromDocument(document)\n
  #       row = {"id": url, "key": url, "values": {}}\n
  #       if option_json.get(\'include_docs\') is True:\n
  #         row["doc"] = self.getDocumentMetadata({"_id": url})\n
  #       response["rows"].append(row)\n
  #   response["total_rows"] = len(response["rows"])\n
  #   return response\n
\n
class JioTool():\n
  # TODO doc strings\n
\n
  def listMapReplace(self, function, li):\n
    """listMapReplace(function, list)\n
\n
        li = [1, 2, 3]\n
        listFilter(lambda x: x + 1, li)\n
        print(li) -> [2, 3, 4]\n
\n
    """\n
    for i in range(len(li)):\n
        li[i] = function(li[i])\n
\n
  def createBadRequestDict(self, message, reason):\n
    return {\n
      "status": 405,\n
      "statusText": "Bad Request",\n
      "error": "bad_request",\n
      "message": message,\n
      "reason": reason\n
    }\n
\n
  def createForbiddenDict(self, message, reason):\n
    return {\n
      "status": 403,\n
      "statusText": "Forbidden",\n
      "error": "forbidden",\n
      "message": message,\n
      "reason": reason\n
    }\n
\n
  def createNotFoundDict(self, message, reason):\n
    return {\n
      "status": 404,\n
      "statusText": "Not Found",\n
      "error": "not_found",\n
      "message": message,\n
      "reason": reason\n
    }\n
\n
  def createConflictDict(self, message, reason):\n
    return {\n
      "status": 409,\n
      "statusText": "Conflict",\n
      "error": "conflict",\n
      "message": message,\n
      "reason": reason\n
    }\n
\n
  def checkMetadata(self, metadata_json):\n
    "Check if the id of the metadata is good"\n
    if metadata_json.get("_id") is None or metadata_json.get("_id") == "":\n
      raise ValueError("Bad document id")\n
\n
  def getUrlFromDocument(self, document):\n
    return "/" + context.getPortalObject().\\\n
      getDefaultModule(document.getPortalType()).getId() + "/" + \\\n
      document.getProperty("id")\n
\n
  def getDocumentFromUrl(self, url):\n
    "Return an ERP5 document from an url. ex: \'/web_page_module/2\'"\n
    url = url.split("/")\n
    if len(url) != 3 or url[0] != "":\n
      raise ValueError("Wrong URL")\n
    url = url[1:]\n
    return context.getPortalObject()[url[0]][url[1]] # throws KeyError\n
\n
  def newDocumentFromUrl(self, url, edit_kw={}):\n
    "Create a new document from an url. ex: \'/web_page_module/<num>\'"\n
    url = url.split("/")\n
    if len(url) < 2 or url[0] != "":\n
      raise ValueError("Wrong URL")\n
    try: edit_kw["id"] = int(url[2])\n
    except ValueError: raise ValueError("Wrong URL")\n
    return context.getPortalObject()[url[1]].newContent(**edit_kw)\n
\n
  def newDocumentFromType(self, portal_type, edit_kw={}):\n
    "Create a new document from a portal_type. ex: \'Web Page\'"\n
    return context.getPortalObject().getDefaultModule(portal_type).\\\n
      newContent(**edit_kw)\n
\n
  def getDocumentProperties(self, document):\n
    document = document.getObject()\n
    document_dict = {}\n
    for property_definition in document.getPropertyMap():\n
      property_id = property_definition["id"]\n
      document_dict[property_id] = document.getProperty(property_id)\n
    return document_dict\n
\n
  def jsonUtf8Loads(self, json_str):\n
    return json_loads(json_str)\n
\n
  def stringifyDictDateValue(self, obj_dict):\n
    for k, v in obj_dict.items():\n
      if isinstance(v, DateTime):\n
        obj_dict[k] = v.ISO8601()\n
\n
  def formatMetadataToPut(self, metadata_json):\n
    for k, v in metadata_json.iteritems():\n
      if isinstance(v, list):\n
        metadata_json[k] = tuple(v)\n
    return metadata_json\n
\n
  def dictFusion(self, *dict_tuple):\n
    result = {}\n
    for dicti in dict_tuple:\n
      if dicti is not None:\n
        for k, v in dicti.items():\n
          result[k] = v\n
    return result\n
\n
  def __init__(self, mode="generic"):\n
    self.mode_dict = {\n
      "generic": JioGeneric,\n
      "erp5_only": JioErp5Only\n
    }\n
    self.setMode(mode)\n
\n
  def setMode(self, mode):\n
    self.jio = self.mode_dict[mode]()\n
\n
  def getDocumentMetadata(self, metadata_json):\n
    return self.jio.getDocumentMetadata(metadata_json)\n
\n
  def getDocumentAttachment(self, metadata_json):\n
    return self.jio.getDocumentAttachment(metadata_json)\n
\n
  def putDocumentMetadata(self, metadata_json, overwrite=True, need_id=False):\n
    metadata = self.formatMetadataToPut(\n
      jsonDeepCopy(metadata_json))\n
    if need_id:\n
      if not isinstance(metadata.get("_id"), str) or metadata.get("_id") == "":\n
        raise ValueError("Document id needed")\n
    return self.jio.putDocumentMetadata(metadata, overwrite=overwrite)\n
\n
  def putDocumentAttachment(self, attachment_json):\n
    return self.jio.putDocumentAttachment(attachment_json)\n
\n
  def removeDocument(self, metadata_json):\n
    return self.jio.removeDocument(metadata_json)\n
\n
  def removeAttachment(self, metadata_json):\n
    return self.jio.removeAttachment(metadata_json)\n
\n
  def getAllDocuments(self, option_json):\n
    return self.jio.getAllDocuments(option_json)\n
\n
  def sendSuccess(self, param):\n
    return json.dumps({"err": None, "response": param})\n
\n
  def sendError(self, param):\n
    return json.dumps({"err": param, "response": None})\n
\n
  # def getDocumentListFromId(self, id):\n
  #   kw = {"portal_type":"Web Page"}\n
  #   kw[self.mode["id_key"]] = id\n
  #   return context.portal_catalog(**kw)\n
\n
  # def getAllDocsFromDocumentList(self, document_list, include_docs=False):\n
  #   rows = []\n
  #   if include_docs is True:\n
  #     for document in document_list:\n
  #       id = document.getProperty(self.mode["id_key"])\n
  #       if id is not None:\n
  #         rows.append({"id": id, "key": id, "value": {}, "doc": self.getMetadataFromDocument(document)})\n
  #   else:\n
  #     for document in document_list:\n
  #       id = document.getProperty(self.mode["id_key"])\n
  #       if id is not None:\n
  #         rows.append({"id": id, "key": id, "value": {}})\n
  #   return {"total_rows": len(rows), "rows": rows}\n
\n
  # def setDocumentId(self, document, id):\n
  #   document.getObject().setProperty(self.mode["id_key"], id)\n
\n
tool = JioTool(**kw)\n
return tool\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>**kw</string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>JIO_class</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
