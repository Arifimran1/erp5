<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <tuple>
          <string>OFS.Image</string>
          <string>File</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60048879.26</string> </value>
        </item>
        <item>
            <key> <string>__ac_local_roles__</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>user-extensions.js</string> </value>
        </item>
        <item>
            <key> <string>_dav_writelocks</string> </key>
            <value>
              <persistent> <string encoding="base64">AAAAAAAAAAI=</string> </persistent>
            </value>
        </item>
        <item>
            <key> <string>_owner</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/x-javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/**\n
 * Selenium extensions for the ERP5 project\n
 */\n
\n
\n
/**\n
 * Checks a the element referenced by `locator` is a float equals to `text`.\n
 * Values are converted to float, to be format-independant (ie. 1 000 = 1000.0)\n
 */\n
Selenium.prototype.assertFloat = function(locator, text) {\n
    var actualValueText = getText(this.page().findElement(locator));\n
    var actualValue = parseFloat(actualValueText.replace(/ /, "").replace(/&nbsp;/, ""));\n
    var expectedValue = parseFloat(text.replace(/ /, "").replace(/&nbsp;/, ""));\n
\n
    if (isNaN(actualValue)) {\n
        Assert.fail("Actual value "+ actualValueText +\n
                        " cannot be parsed as float");\n
    }\n
    Assert.matches(expectedValue.toString(), actualValue.toString());\n
};\n
\n
\n
/**\n
 * Checks the portal status message.\n
 */\n
Selenium.prototype.assertPortalStatusMessage = function(text) {\n
    var psm_locator = "//div[@id=\'transition_message\']";\n
    var actualValue = getText(this.page().findElement(psm_locator));\n
    Assert.matches(text, actualValue);\n
};\n
\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>1018</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="2" aka="AAAAAAAAAAI=">
    <pickle>
      <tuple>
        <tuple>
          <string>Persistence</string>
          <string>PersistentMapping</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_container</string> </key>
            <value>
              <dictionary/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
