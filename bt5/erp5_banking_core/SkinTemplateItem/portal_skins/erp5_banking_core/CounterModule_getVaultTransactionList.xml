<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
        <tuple/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Python_magic</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>__ac_local_roles__</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

# This script returns a list of resources that we can find in a particular stock point.\n
# - vault : the stock we are intested in\n
# - at_date : give the stock for a particular date\n
# - from_date : usefull with at date in order to know the sum of input and output\n
#               between two dates\n
# - excluded_variation_list : Allow to do report with some types of ressources, like\n
#                             [\'cash_status/valid\', \'cash_status/new_not_emitted\']\n
#\n
\n
from Products.ERP5Type.Document import newTempBase\n
\n
if from_date is not None:\n
  if from_date == at_date:\n
    from_date=None\n
\n
#context.log(\'CounterModule_getVaultTransactionList vault:\',vault)\n
def getTranslatedTitleFromCategoryUrl(category):\n
  return context.portal_categories.getCategoryValue(category).getTranslatedTitle()\n
\n
def getTitleFromCategoryUrl(category):\n
  return context.portal_categories.getCategoryValue(category).getTitle()\n
\n
def getVariationTitleList(variation_text):\n
  return [getTitleFromCategoryUrl(x) for x in variation_text.split(\'\\n\')]\n
\n
\n
resource_dict = {}\n
vault_dict = {}\n
vault_inventory_dict = {}\n
\n
portal = context.getPortalObject()\n
\n
\n
\n
vault_url_list = vault\n
if same_type(vault, \'a\'):\n
  vault_url_list = [vault]\n
\n
for vault_url in vault_url_list:\n
  vault_dict[vault_url] = 1\n
  vault_inventory_dict[vault_url] = {}\n
 \n
def cartesianProduct(list_of_list):\n
  """\n
    Be carefull : one mathematical property of cartesian product is that\n
    when you do a cartesian products of a set and an empty set, the result\n
    is an empty set.\n
  """\n
  if len(list_of_list) == 0:\n
    return [[]]\n
  result = []\n
  append = result.append\n
  head = list_of_list[0]\n
  tail = list_of_list[1:]\n
  product = cartesianProduct(tail)\n
  for v in head:\n
    for p in product:\n
      append([v] + p)\n
  return result\n
\n
total_inventory_list = []\n
inventory_kw = {}\n
#context.log(\'CounterModule_getVaultTransactionList, vault_report_type\',vault_report_type)\n
if vault_report_type is None or vault_report_type==\'inventory\':\n
  inventory_kw[\'group_by_variation\'] = 1\n
  inventory_kw[\'group_by_resource\'] = 1\n
# add to get by portal type inventory\n
if kw.has_key("portal_type"):\n
  inventory_kw[\'portal_type\'] = kw[\'portal_type\']\n
if kw.has_key("omit_input"):\n
  inventory_kw[\'omit_input\'] = kw[\'omit_input\']\n
if kw.has_key("omit_output"):\n
  inventory_kw[\'omit_output\'] = kw[\'omit_output\']\n
if kw.has_key("explanation_portal_type"):\n
  inventory_kw[\'explanation_portal_type\'] = kw[\'explanation_portal_type\']\n
if kw.has_key("explanation_uid"):\n
  inventory_kw[\'explanation_uid\'] = kw[\'explanation_uid\']\n
  if len(kw[\'explanation_uid\'])==0:\n
    return total_inventory_list\n
kw_has_cash_status = kw.has_key("cash_status")\n
kw_has_emission_letter = kw.has_key("emission_letter")\n
if kw_has_cash_status or kw_has_emission_letter:\n
  cash_status_list = [None]\n
  emission_letter_list = [None]\n
  if kw_has_cash_status:\n
    cash_status_parameter = kw[\'cash_status\']\n
    if same_type(cash_status_parameter, \'a\'):\n
      cash_status_parameter = [cash_status_parameter]\n
    cash_status_list = ["cash_status/%s%%" % x for x in cash_status_parameter]\n
  if kw_has_emission_letter:\n
    emission_letter_parameter = kw[\'emission_letter\']\n
    if same_type(emission_letter_parameter, \'a\'):\n
      emission_letter_parameter = [emission_letter_parameter]\n
    emission_letter_list = ["emission_letter/%s%%" % x for x in emission_letter_parameter]\n
  full_variation_list_of_list = [cash_status_list, emission_letter_list]\n
  inventory_kw[\'variation_text\'] = []\n
  for variation_list in cartesianProduct(full_variation_list_of_list):\n
    variation_text_list = [\'%\']\n
    for variation in variation_list:\n
      if variation is not None:\n
        variation_text_list.append(variation)\n
    variation_text = \'\'.join(variation_text_list)\n
    inventory_kw[\'variation_text\'].append(variation_text)\n
\n
if at_date is not None:\n
  # XXX this make sure we look at the end of the day\n
  at_date = at_date + 0.99\n
  inventory_kw[\'at_date\'] = at_date\n
\n
\n
if from_date is not None:\n
  inventory_kw[\'from_date\'] = from_date\n
\n
if column_names == 1:\n
  column_list = [(\'resource\', \'Resource\'), (\'variation_text\', \'Year\')]\n
  column_list.extend([(\'explanation_relative_url\',\'Explanation\')])\n
  for vault in vault_dict.keys():\n
    #context.log(\'getTitleFromCategoryUrl(vault)\',getTitleFromCategoryUrl(vault))\n
    column_list.extend([\n
        (vault + \'_quantity\', getTitleFromCategoryUrl(vault) + \' Quantity\'),\n
        (vault + \'_total_price\', getTitleFromCategoryUrl(vault) + \' TotalPrice\')\n
        ])\n
  column_list.append((\'general_total_price\', \'General TotalPrice\'))\n
  return column_list\n
\n
#context.log(\'node_category\',vault)\n
#context.log(\'inventory_kw\',inventory_kw)\n
vault_inventory_list = context.portal_simulation.getCurrentInventoryList( node=vault_url_list\n
                                                                 , ignore_variation=0\n
                                                                 ,**inventory_kw\n
                                                                 )\n
#context.log(\'CounterMOdule_getVaultTransactionList, sql src:\',context.portal_simulation.getCurrentInventoryList( node=vault_url_list\n
#                                                                , ignore_variation=0,src__=1\n
#                                                               ,**inventory_kw\n
#                                                              ))\n
\n
if summarise:\n
  total_quantity = 0\n
  total_price = 0\n
  for vault_inventory in vault_inventory_list:\n
    if only_positive:\n
      total_quantity += abs(vault_inventory.total_quantity)\n
      total_price += abs(vault_inventory.total_price)\n
    else:\n
      total_quantity += vault_inventory.total_quantity\n
      total_price += vault_inventory.total_price\n
  return [newTempBase(context, "summary", total_quantity=total_quantity, total_price=total_price), ]\n
\n
#context.log(\'len(vault_inventory_list:\',len(vault_inventory_list))\n
for vault_inventory in vault_inventory_list:\n
  node_relative_url = vault_inventory.node_relative_url\n
  if vault_inventory.total_quantity in (0.0,0,None):\n
    continue\n
  #context.log(\'vault_inventory total_quantity\',vault_inventory.total_quantity)\n
  #context.log(\'vault_inventory total_price\',vault_inventory.total_price)\n
  variation_text = vault_inventory.variation_text or \'\'\n
  must_continue = 0\n
  if excluded_variation_list is not None:\n
    for excluded_variation in excluded_variation_list:\n
      if variation_text.find(excluded_variation)>=0:\n
        must_continue = 1\n
        break\n
  if must_continue:\n
    continue\n
  resource = (vault_inventory.resource_relative_url, variation_text)\n
  if vault_report_type==\'history\':\n
    #resource = (vault_inventory.resource_relative_url, vault_inventory.variation_text or \'\',vault_inventory.stock_uid)\n
    resource = (vault_inventory.resource_relative_url, variation_text, vault_inventory.path)\n
  if not vault_inventory_dict[node_relative_url].has_key(resource):\n
    total_quantity = vault_inventory.total_quantity\n
    if total_quantity is None:\n
      total_quantity = 0\n
    total_price = vault_inventory.total_price\n
    if total_price is None:\n
      total_price = 0\n
    if only_positive:\n
      total_price = abs(total_price)\n
      total_quantity = abs(total_quantity)\n
#     context.log(\'type\',type(total_price))\n
#     context.log(\'sql total_price\',total_price)\n
    vault_inventory_dict[node_relative_url][resource] = {\'quantity\':total_quantity, \'total_price\':total_price,\n
                                                 \'date\':vault_inventory.date}\n
\n
  resource_dict[resource] = 1\n
\n
\n
\n
#context.log(\'resource_dict\',resource_dict)\n
#context.log(\'vault_inventory_dict\',vault_inventory_dict)\n
\n
i = 0\n
#for resource in context.Baobab_sortResourceTitleList(resource_dict.keys()):\n
for resource in resource_dict.keys():\n
  variation_text = resource[1]\n
  tmp_dict = {\'resource_relative_url\':resource[0], \'variation_text\':variation_text}\n
  for variation in variation_text.split(\'\\n\'):\n
    if variation.startswith(\'cash_status\'):\n
      tmp_dict[\'cash_status\'] = variation\n
      tmp_dict[\'cash_status_title\'] = getTitleFromCategoryUrl(variation)\n
      tmp_dict[\'cash_status_translated_title\'] = getTranslatedTitleFromCategoryUrl(variation)\n
    elif variation.startswith(\'emission_letter\'):\n
      tmp_dict[\'emission_letter\'] = variation\n
      tmp_dict[\'emission_letter_title\'] = getTitleFromCategoryUrl(variation)\n
      tmp_dict[\'emission_letter_translated_title\'] = getTranslatedTitleFromCategoryUrl(variation)\n
    elif variation.startswith(\'variation\'):\n
      tmp_dict[\'variation\'] = variation\n
      tmp_dict[\'variation_title\'] = getTitleFromCategoryUrl(variation)\n
      tmp_dict[\'variation_translated_title\'] = getTranslatedTitleFromCategoryUrl(variation)\n
  tmp_dict[\'variation_text_title\'] = \' \'.join(getVariationTitleList(resource[1]))\n
  #resource = (vault_inventory.resource_uid, tuple(getVariationTitleList(vault_inventory.variation_text or \'\')))\n
  #resource_value = context.portal_catalog.getObject(resource[0])\n
  resource_value = portal.restrictedTraverse(resource[0])\n
  current_resource_portal_type = resource_value.getPortalType()\n
  if current_resource_portal_type not in resource_portal_type:\n
    continue\n
  if len(resource)==3: # case of history\n
    #context.log(\'movement uid before error\',resource[2])\n
    #movement = context.portal_catalog.getObject(resource[2])\n
    movement = portal.restrictedTraverse(resource[2])\n
    #context.log(\'CounterModule_getVaultTransactionList\', \'movement = %s\' %movement)\n
    explanation_value = movement\n
    if getattr(movement,\'getExplanationValue\',None) is not None:\n
      explanation_value = movement.getExplanationValue()\n
    #context.log(\'CounterModule_getVaultTransactionList\', \'explanation_value = %s\' %explanation_value)\n
    tmp_dict[\'explanation_relative_url\'] = explanation_value.getRelativeUrl()\n
    source_reference = explanation_value.getSourceReference() or \'\'\n
    tmp_dict[\'source_reference\'] = source_reference\n
    tmp_dict[\'explanation_translated_relative_url\'] = "%s/%s" % \\\n
          (explanation_value.getTranslatedPortalType(),source_reference)\n
  tmp_dict[\'base_price\'] = resource_value.getBasePrice()\n
  tmp_dict[\'resource_title\'] = resource_value.getTitle()\n
  tmp_dict[\'resource_id\'] = resource_value.getId()\n
  #context.log(\'resource_value\',resource_value.getRelativeUrl())\n
  try:\n
    tmp_dict[\'resource_translated_title\'] = resource_value.getTranslatedTitle()\n
  except KeyError:\n
    tmp_dict[\'resource_translated_title\'] = resource_value.getTitle()\n
  tmp_dict[\'price_currency_title\'] = resource_value.getPriceCurrencyTitle()\n
  tmp_dict[\'price_currency_id\'] = resource_value.getPriceCurrencyId()\n
  tmp_dict[\'price_currency\'] = resource_value.getPriceCurrency()\n
  tmp_dict[\'resource_portal_type\'] = current_resource_portal_type\n
  general_total_price = 0\n
  for vault in vault_dict.keys():\n
    try:\n
      resource_in_vault = vault_inventory_dict[vault][resource]\n
    except KeyError:\n
      # This resource does not exist for this vault\n
      #resource_in_vault = {\'quantity\' : 0,\'total_price\' : 0}\n
      continue\n
    total_quantity = resource_in_vault[\'quantity\']\n
    total_price = resource_in_vault[\'total_price\']\n
    if banknote_quantity_divisor is not None:\n
      if current_resource_portal_type == \'Banknote\':\n
        total_quantity = round(total_quantity / banknote_quantity_divisor,0)\n
        total_price = round(total_price / banknote_quantity_divisor,0)\n
    tmp_dict.update({\'total_quantity\' : total_quantity,\n
        \'quantity\': total_quantity,\n
        \'total_price\' : total_price,})\n
    tmp_dict.update({\'vault\' : vault})\n
    if vault_report_type==\'history\':\n
      tmp_dict.update({\'date\':resource_in_vault[\'date\']})\n
    general_total_price += resource_in_vault[\'total_price\']\n
    tmp_dict[\'general_total_price\'] = general_total_price\n
    total_inventory_list.append(newTempBase(context, "new_%03i" % i, **tmp_dict))\n
    i += 1\n
\n
def sort_base_price(a,b):\n
  return -cmp(a.base_price,b.base_price)\n
\n
total_inventory_list.sort(sort_base_price)\n
\n
return total_inventory_list\n
\n
\n
return repr([x for x in total_inventory_list])\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_code</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_filepath</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_owner</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>vault=None,at_date=None,from_date=None,vault_report_type=None,column_names=0,resource_portal_type=(\'Banknote\',\'Coin\'), only_positive=0, banknote_quantity_divisor=None, summarise=False, excluded_variation_list=None,**kw</string> </value>
        </item>
        <item>
            <key> <string>_proxy_roles</string> </key>
            <value>
              <tuple>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>errors</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>func_code</string> </key>
            <value>
              <object>
                <klass>
                  <global name="FuncCode" module="Shared.DC.Scripts.Signature"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>co_argcount</string> </key>
                        <value> <int>10</int> </value>
                    </item>
                    <item>
                        <key> <string>co_varnames</string> </key>
                        <value>
                          <tuple>
                            <string>vault</string>
                            <string>at_date</string>
                            <string>from_date</string>
                            <string>vault_report_type</string>
                            <string>column_names</string>
                            <string>resource_portal_type</string>
                            <string>only_positive</string>
                            <string>banknote_quantity_divisor</string>
                            <string>summarise</string>
                            <string>excluded_variation_list</string>
                            <string>kw</string>
                            <string>Products.ERP5Type.Document</string>
                            <string>newTempBase</string>
                            <string>None</string>
                            <string>getTranslatedTitleFromCategoryUrl</string>
                            <string>getTitleFromCategoryUrl</string>
                            <string>getVariationTitleList</string>
                            <string>resource_dict</string>
                            <string>vault_dict</string>
                            <string>vault_inventory_dict</string>
                            <string>_getattr_</string>
                            <string>context</string>
                            <string>portal</string>
                            <string>vault_url_list</string>
                            <string>same_type</string>
                            <string>_getiter_</string>
                            <string>vault_url</string>
                            <string>_write_</string>
                            <string>cartesianProduct</string>
                            <string>total_inventory_list</string>
                            <string>inventory_kw</string>
                            <string>_getitem_</string>
                            <string>len</string>
                            <string>kw_has_cash_status</string>
                            <string>kw_has_emission_letter</string>
                            <string>cash_status_list</string>
                            <string>emission_letter_list</string>
                            <string>cash_status_parameter</string>
                            <string>append</string>
                            <string>$append0</string>
                            <string>x</string>
                            <string>emission_letter_parameter</string>
                            <string>full_variation_list_of_list</string>
                            <string>variation_list</string>
                            <string>variation_text_list</string>
                            <string>variation</string>
                            <string>variation_text</string>
                            <string>column_list</string>
                            <string>_apply_</string>
                            <string>vault_inventory_list</string>
                            <string>total_quantity</string>
                            <string>total_price</string>
                            <string>vault_inventory</string>
                            <string>_inplacevar_</string>
                            <string>abs</string>
                            <string>node_relative_url</string>
                            <string>must_continue</string>
                            <string>excluded_variation</string>
                            <string>resource</string>
                            <string>i</string>
                            <string>tmp_dict</string>
                            <string>resource_value</string>
                            <string>current_resource_portal_type</string>
                            <string>movement</string>
                            <string>explanation_value</string>
                            <string>getattr</string>
                            <string>source_reference</string>
                            <string>KeyError</string>
                            <string>general_total_price</string>
                            <string>resource_in_vault</string>
                            <string>round</string>
                            <string>sort_base_price</string>
                            <string>repr</string>
                          </tuple>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>func_defaults</string> </key>
            <value>
              <tuple>
                <none/>
                <none/>
                <none/>
                <none/>
                <int>0</int>
                <tuple>
                  <string>Banknote</string>
                  <string>Coin</string>
                </tuple>
                <int>0</int>
                <none/>
                <int>0</int>
                <none/>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>CounterModule_getVaultTransactionList</string> </value>
        </item>
        <item>
            <key> <string>warnings</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
