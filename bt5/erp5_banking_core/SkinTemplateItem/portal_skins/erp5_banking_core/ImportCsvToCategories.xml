<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <tuple>
          <string>Products.PythonScripts.PythonScript</string>
          <string>PythonScript</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Python_magic</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>__ac_local_roles__</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

def lowerCase(s):\n
  return s.replace(\' \', \'_\').lower()\n
\n
def upperCase(s):\n
  s = \' \'.join([x.capitalize() for x in lowerCase(s).split(\'_\') if len(x) > 0])\n
  s = \'/\'.join([x[0].upper() + x[1:] for x in s.split(\'/\') if len(x) > 0])\n
  item_list = s.split(\' \')\n
  if len(item_list) > 1:\n
    new_list = []\n
    for item in item_list :\n
      if item in (\'A\', \'Chez\', \'De\', \'Des\', \'En\', \'Et\', \'La\', \'Par\', \'Pour\') :\n
        item = item.lower()\n
      new_list.append(item)\n
    item_list = new_list\n
  return \' \'.join(item_list)\n
\n
def l_clean(line) :\n
  if line.endswith(\'\\n\') :\n
    line = line[:-1]\n
  return line\n
\n
def l_split(line) :\n
  e_list = line.split(\',\')\n
  new_e_list = []\n
  for e in e_list :\n
    if len(e) > 0 :\n
      if e[0] == \'"\' and e[-1] == \'"\' :\n
        e = e[1:-1]\n
      new_e_list.append(e)\n
  return new_e_list\n
\n
def create_category(cat, vault_type=None) :\n
  cat_list = lowerCase(cat).split(\'/\')\n
  cat_len = len(cat_list)\n
\n
  if cat_len == 1 :\n
    # base_category\n
    base_cat = [x.getObject() for x in context.portal_categories.searchFolder(id=lowerCase(cat_list[0]))]\n
    if not len(base_cat):\n
      return context.portal_categories.newContent(portal_type = \'Base Category\',\n
                                                  id = lowerCase(cat_list[0]),\n
                                                  title = upperCase(cat_list[0]))\n
    else:\n
      return base_cat[0]\n
\n
  elif cat_len > 1 :\n
    # sub_category\n
    relative_category = context.portal_categories.getCategoryValue(lowerCase(\'/\'.join(cat_list[:-1])))\n
\n
    if relative_category is None :\n
      relative_category = create_category(lowerCase(\'/\'.join(cat_list[:-1])))\n
      if vault_type is not None:\n
        relative_category.setVaultType(vault_type)\n
\n
    cat = relative_category.get(lowerCase(cat_list[-1]))\n
    if cat is not None :\n
      return cat\n
    else :\n
      new_cat = relative_category.newContent(portal_type = \'Category\',\n
                                            id = lowerCase(cat_list[-1]),\n
                                            title = upperCase(cat_list[-1]))\n
      if vault_type is not None:\n
        new_cat.setVaultType(vault_type)\n
      return new_cat\n
\n
def generate_vault_dict() :\n
  c_list = context.portal_categories.vault_type.getCategoryChildValueList()\n
  # function to sort category by title\n
  def sortCategory(a, b):\n
    return cmp(a.getRelativeUrl(), b.getRelativeUrl())\n
  vault_dict = {}\n
  c_list.sort(sortCategory)\n
  for c in c_list:\n
    code = c.getProperty(\'codification\')\n
    if code is not None and not vault_dict.has_key(code):\n
      vault_dict[code]=c.getRelativeUrl()\n
  return vault_dict\n
\n
##########################################\n
request  = context.REQUEST\n
\n
import_type = getattr(request,\'my_import_type\',None) or getattr(request,\'field_my_import_type\',None)\n
line_list = import_file.readlines()\n
\n
line_list = [l_clean(line) for line in line_list]\n
line_list = [l_split(line) for line in line_list]\n
\n
#return \'\\n\'.join([l for l in line_list])\n
\n
\n
if import_type == \'create_category\' :\n
  if context.portal_categories.get(lowerCase(line_list[0][0])) :\n
    context.portal_categories.deleteContent(lowerCase(line_list[0][0]))\n
  for e_list in line_list :\n
    if len(e_list) > 0 :\n
      e = e_list[0]\n
      #try :\n
      print \'trying to create %s ...\' % lowerCase(e),\n
      create_category(e)\n
      print \'done\'\n
#       except AttributeError:\n
#         print \'Failed\'\n
#         return printed\n
\n
\n
elif import_type == \'assign_codification\' :\n
  for e_list in line_list :\n
    if len(e_list) == 2 :\n
      try :\n
        print \'trying to assign to %s ...\' % lowerCase(e_list[0]) ,\n
        context.log(\'lowerCase(e_list[0])\',lowerCase(e_list[0]))\n
        category = context.portal_categories.getCategoryValue(lowerCase(e_list[0]))\n
        category.setCodification(e_list[1])\n
        # Automatically assign code for some subcategories\n
        #context.log(\'e_list[0]\',e_list[0])\n
        if e_list[0].startswith(\'site\'):\n
          acquired_vault_code = {\'banque_interne\':\'BI\',\'operations_diverses\':\'OD\',\'gros_paiement\':\'GP\',\'gros_versement\':\'GV\',\n
                        \'guichet_1\':\'G1\',\'guichet_2\':\'G2\',\'guichet_3\':\'G3\'}\n
          context.log(\'category\',category.getPath())\n
          for sub_cat in category.getCategoryChildValueList(sort_id=\'path\'):\n
            print "    %s" % sub_cat.getRelativeUrl()\n
            if sub_cat.getId() in acquired_vault_code.keys():\n
              parent_code = sub_cat.getParentValue().getCodification()\n
              code = parent_code + acquired_vault_code[sub_cat.getId()]\n
              sub_cat.setCodification(code)\n
        print \'done %s\' % repr(e_list)\n
      except KeyError:\n
        print \'Failed\'\n
        return printed\n
\n
\n
elif import_type == \'assign_vault_type\' :\n
  vault_type_dict = generate_vault_dict()\n
  context.log(\'vault_type_dict\', vault_type_dict)\n
  vault_type_list = vault_type_dict.keys()\n
  for e_list in line_list :\n
    if len(e_list) == 2 and e_list[1] in vault_type_list :\n
      category = context.portal_categories.getCategoryValue(lowerCase(e_list[0]))\n
      category.setCategoryList([vault_type_dict[e_list[1]]])\n
      print \'set %s to %s for e_list %s\' % ([vault_type_dict[e_list[1]]], category, e_list)\n
\n
\n
elif import_type == \'create_subvaults\' :\n
#Encaisse des Billets Restitues par Tiers a Detruire# seulemnt sur sites disposant de tri tiers\n
#Encaisse des Billets Recus pour Ventilation# seulement sur sites principaux\n
  subvault_dict = {}\n
  for e_list in line_list :\n
    #context.log(\'e_list\', e_list)\n
    if len(e_list) in (2,3) :\n
      vault = lowerCase(e_list[0]) # ex : Vault_Type/Site/caveau/Auxiliaire\n
      subvault = upperCase(e_list[1]) # ex : Encaisse des Devises\n
      subvault_code=None\n
      if len(e_list)==3:\n
        subvault_code = e_list[2] # ex : D\n
      counter_string_list = [] # the list of counters, like [\'guichet_1,entrant\',...]\n
      #one_way_counter_list = (\'gros_paiement\',\'gros_versement\')\n
      one_way_counter_list = ()\n
      two_way_counter_list = (\'banque_interne\',\'operations_diverses\',\'gros_paiement\',\'gros_versement\')\n
      counter_list = one_way_counter_list + two_way_counter_list\n
      max_counter = 3 # we may not have always the same number of counters\n
      counter_name = vault.split(\'/\')[-1]\n
      # add as many counters as required\n
      if counter_name in counter_list:\n
        if counter_name in one_way_counter_list:\n
          max_counter=2\n
        for i in range(1,max_counter+1):\n
#           if counter_name in two_way_counter_list:\n
#             counter_string_list.append(\'guichet_%s/entrante\' % i)\n
#             counter_string_list.append(\'guichet_%s/sortante\' % i)\n
#           else:\n
          counter_string_list.append(\'guichet_%s\' % i)\n
      else:\n
        counter_string_list = [\'\']\n
\n
      #context.log(\'counter_string_list\',counter_string_list)\n
      if not subvault_dict.has_key(vault) :\n
        subvault_dict[vault] = []\n
      for counter_string in counter_string_list:\n
        #context.log(\'counter_string\', counter_string)\n
        if counter_string != \'\':\n
          counter_subvault = \'%s/%s\' % (counter_string,subvault)\n
        else:\n
           counter_subvault = subvault\n
        #context.log(\'counter_subvault\', counter_subvault)\n
        subvault_dict[vault].append([counter_subvault, subvault_code])\n
        if subvault == \'Encaisse des Billets et Monnaies\' :\n
          if counter_name in two_way_counter_list:\n
            subvault_dict[vault].append([\'%s/%s\' % (counter_subvault, "entrante"), None])\n
            subvault_dict[vault].append([\'%s/%s\' % (counter_subvault, "sortante"), None])\n
        elif subvault == \'Encaisse des Externes\' :\n
          subvault_dict[vault].append([\'%s/%s\' % (counter_subvault, "transit"), \'TRA\'])\n
        elif subvault == \'Encaisse des Devises\' :\n
          for c in context.currency_module.objectValues() :\n
            if c.getId() != context.Baobab_getPortalReferenceCurrencyID():\n
              if counter_name in two_way_counter_list:\n
                #context.log(\'add encaisse des billets et monnaies E/S\',counter_subvault)\n
                subvault_dict[vault].append([\'%s/%s/%s\' % (counter_subvault, c.getTitle(), "entrante"), None])\n
                subvault_dict[vault].append([\'%s/%s/%s\' % (counter_subvault, c.getTitle(), "sortante"), None])\n
              else:\n
                #context.log(\'add encaisse des billets et monnaies\',counter_subvault)\n
                subvault_dict[vault].append([\'%s/%s\' % (counter_subvault, c.getTitle()), None])\n
        elif subvault in (\'Encaisse des Billets Recus pour Ventilation Venant de\',\'Encaisse des Billets en Transit Allant a\',\n
                        \'Encaisse des Billets Neufs Non Emis en Transit Allant a\') :\n
          for c in context.portal_categories.site.agence.principale.objectIds() :\n
            if counter_name in two_way_counter_list:\n
              #context.log(\'add ventilation E/S\', counter_subvault)\n
              subvault_dict[vault].append([\'%s/%s/%s\' % (counter_subvault, upperCase(c), "entrante"), None])\n
              subvault_dict[vault].append([\'%s/%s/%s\' % (counter_subvault, upperCase(c), "sortante"), None])\n
            else:\n
              #context.log(\'add ventilation\', counter_subvault)\n
              subvault_dict[vault].append([\'%s/%s\' % (counter_subvault, upperCase(c)), None])\n
\n
  # subvault_dict looks like this :\n
  #subvault_dict : {\'vault_type/site/surface/operations_diverses\': [[\'Encaisse des Devises\', \'D\'], [\'Encaisse des Devises/Francs Suisses\', None],\n
  #                          [\'Encaisse des Billets et Monnaies\', \'A\']]}\n
\n
\n
\n
  vault_type_list = subvault_dict.keys()\n
  context.log("vault_type_list", vault_type_list)\n
  context.log("vault_type_dict :",subvault_dict)\n
\n
  # parse the for site category tree and add sub categories if required\n
  #for c in context.portal_categories.site.getCategoryChildValueList() :\n
  #for c in context.portal_categories.site.agence.principale.lome.getCategoryChildValueList() :\n
  #for c in context.portal_categories.site.getCategoryChildValueList() :\n
  #for c in context.portal_categories.site.agence.principale.cotonou.getCategoryChildValueList() :\n
  #for c in context.portal_categories.site.getCategoryChildValueList() :\n
  #for c in context.portal_categories.site.agence.principale.abidjan.getCategoryChildValueList() :\n
  #for c in context.portal_categories.site.agence.principale.bissau.getCategoryChildValueList() :\n
  for c in context.portal_categories.site.getCategoryChildValueList() :\n
    context.log(\'c.getPath()\',c.getPath())\n
    for vault_type in vault_type_list :\n
      context.log("c = %s, vault_type = %s" %(c, vault_type), "c.getvaultType = %s" %(c.getVaultType()))\n
      if context.portal_categories.isMemberOf(c, vault_type, strict=1) :\n
        print c.getRelativeUrl(), \'is\', vault_type\n
        context.log("subvault_data",subvault_dict[vault_type])\n
        for subvault_data in subvault_dict[vault_type] :\n
          subvault_path = subvault_data[0]\n
          subvault_code = subvault_data[1]\n
          if \'Encaisse des Billets Recus pour Ventilation Venant de\' in subvault_path or \'Encaisse des Billets Restitues par Tiers a Detruire\' in subvault_path \\\n
                or \'Encaisse des Billets en Transit Allant a\' in subvault_path or \'Encaisse des Billets Neufs Non Emis en Transit Allant a\' in subvault_path:\n
            if not context.portal_categories.isMemberOf(c, \'site/agence/principale\', strict=0) :\n
              print \'XXXXXXXX is not principale, not creating\', subvault_path\n
              pass\n
            elif subvault_path.find(\'/\') > 0 and lowerCase(subvault_path).split(\'/\')[1] in c.getRelativeUrl() :\n
              print \'XXXXXXXX is itself, not creating\', subvault_path\n
              pass\n
            else :\n
              print \'  creating (case1) \', subvault_path\n
              if \'guichet\' in subvault_path:\n
                subcat_vault_type = \'%s/guichet\' %(\'/\'.join(vault_type.split(\'/\')[1:]),)\n
              elif \'transit\' in subvault_path.lower():\n
                subcat_vault_type = \'%s/transit\' %(\'/\'.join(vault_type.split(\'/\')[1:]),)\n
              else:\n
                subcat_vault_type = \'/\'.join(vault_type.split(\'/\')[1:])\n
              new_category_obj = create_category(cat = \'%s/%s\' % (c.getRelativeUrl(), subvault_path), vault_type = subcat_vault_type)\n
          else :\n
            print \'  creating (case2)\', subvault_path\n
            if \'guichet\' in subvault_path:\n
              subcat_vault_type = \'%s/guichet\' %(\'/\'.join(vault_type.split(\'/\')[1:]),)\n
            elif \'retire\' in subvault_path.lower():\n
              subcat_vault_type = \'%s/retire\' %(\'/\'.join(vault_type.split(\'/\')[1:]),)\n
            elif subvault_path.lower().endswith(\'externes\'):\n
              subcat_vault_type = \'%s/encaisse_des_externes\' %(\'/\'.join(vault_type.split(\'/\')[1:]),)\n
            elif subvault_path.lower().endswith(\'transit\'):\n
              subcat_vault_type = \'%s/encaisse_des_externes/transit\' %(\'/\'.join(vault_type.split(\'/\')[1:]),)\n
            elif \'devises\' in subvault_path.lower():\n
              subcat_vault_type = \'%s/encaisse_des_devises\' %(\'/\'.join(vault_type.split(\'/\')[1:]),)\n
            elif \'differences\' in subvault_path.lower():\n
              subcat_vault_type = \'%s/encaisse_des_differences\' %(\'/\'.join(vault_type.split(\'/\')[1:]),)\n
            elif \'mutiles\' in subvault_path.lower():\n
              subcat_vault_type = \'%s/billets_mutiles\' %(\'/\'.join(vault_type.split(\'/\')[1:]),)\n
            elif \'macules\' in subvault_path.lower():\n
              subcat_vault_type = \'%s/billets_macules\' %(\'/\'.join(vault_type.split(\'/\')[1:]),)\n
            else:\n
              subcat_vault_type = \'/\'.join(vault_type.split(\'/\')[1:])\n
            new_category_obj = create_category(cat = \'%s/%s\' % (c.getRelativeUrl(), subvault_path), vault_type = subcat_vault_type)\n
          # set codification\n
          if subvault_code not in (None, \'\'):\n
            new_category_obj.setCodification(subvault_code)\n
\n
        print\n
        break\n
    else : print c.getRelativeUrl(), \'not here\'\n
\n
\n
\n
\n
\n
\n
\n
print \'ok\'\n
return printed\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_code</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_filepath</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_owner</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>import_file, **kw</string> </value>
        </item>
        <item>
            <key> <string>errors</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>func_code</string> </key>
            <value>
              <object>
                <klass>
                  <global name="FuncCode" module="Shared.DC.Scripts.Signature"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>co_argcount</string> </key>
                        <value> <int>1</int> </value>
                    </item>
                    <item>
                        <key> <string>co_varnames</string> </key>
                        <value>
                          <tuple>
                            <string>import_file</string>
                            <string>kw</string>
                            <string>_print_</string>
                            <string>_print</string>
                            <string>lowerCase</string>
                            <string>upperCase</string>
                            <string>l_clean</string>
                            <string>l_split</string>
                            <string>None</string>
                            <string>create_category</string>
                            <string>generate_vault_dict</string>
                            <string>_getattr_</string>
                            <string>context</string>
                            <string>request</string>
                            <string>getattr</string>
                            <string>import_type</string>
                            <string>line_list</string>
                            <string>append</string>
                            <string>$append0</string>
                            <string>_getiter_</string>
                            <string>line</string>
                            <string>_getitem_</string>
                            <string>e_list</string>
                            <string>len</string>
                            <string>e</string>
                            <string>category</string>
                            <string>acquired_vault_code</string>
                            <string>sub_cat</string>
                            <string>parent_code</string>
                            <string>code</string>
                            <string>repr</string>
                            <string>KeyError</string>
                            <string>vault_type_dict</string>
                            <string>vault_type_list</string>
                            <string>subvault_dict</string>
                            <string>vault</string>
                            <string>subvault</string>
                            <string>subvault_code</string>
                            <string>counter_string_list</string>
                            <string>one_way_counter_list</string>
                            <string>two_way_counter_list</string>
                            <string>counter_list</string>
                            <string>max_counter</string>
                            <string>counter_name</string>
                            <string>range</string>
                            <string>i</string>
                            <string>_write_</string>
                            <string>counter_string</string>
                            <string>counter_subvault</string>
                            <string>c</string>
                            <string>vault_type</string>
                            <string>subvault_data</string>
                            <string>subvault_path</string>
                            <string>subcat_vault_type</string>
                            <string>new_category_obj</string>
                          </tuple>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>func_defaults</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>ImportCsvToCategories</string> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>warnings</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
