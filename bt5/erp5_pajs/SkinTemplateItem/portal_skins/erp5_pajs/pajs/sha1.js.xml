<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts16390902.5</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>sha1.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/*\r\n
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\r\n
 * in FIPS 180-1\r\n
 * Version 2.2 Copyright Paul Johnston 2000 - 2009.\r\n
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\r\n
 * Distributed under the BSD License\r\n
 * See http://pajhome.org.uk/crypt/md5 for details.\r\n
 */\r\n
\r\n
/*\r\n
 * Configurable variables. You may need to tweak these to be compatible with\r\n
 * the server-side, but the defaults work in most cases.\r\n
 */\r\n
var hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */\r\n
var b64pad  = ""; /* base-64 pad character. "=" for strict RFC compliance   */\r\n
\r\n
/*\r\n
 * These are the functions you\'ll usually want to call\r\n
 * They take string arguments and return either hex or base-64 encoded strings\r\n
 */\r\n
function hex_sha1(s)    { return rstr2hex(rstr_sha1(str2rstr_utf8(s))); }\r\n
function b64_sha1(s)    { return rstr2b64(rstr_sha1(str2rstr_utf8(s))); }\r\n
function any_sha1(s, e) { return rstr2any(rstr_sha1(str2rstr_utf8(s)), e); }\r\n
function hex_hmac_sha1(k, d)\r\n
  { return rstr2hex(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }\r\n
function b64_hmac_sha1(k, d)\r\n
  { return rstr2b64(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }\r\n
function any_hmac_sha1(k, d, e)\r\n
  { return rstr2any(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)), e); }\r\n
\r\n
/*\r\n
 * Perform a simple self-test to see if the VM is working\r\n
 */\r\n
function sha1_vm_test()\r\n
{\r\n
  return hex_sha1("abc").toLowerCase() == "a9993e364706816aba3e25717850c26c9cd0d89d";\r\n
}\r\n
\r\n
/*\r\n
 * Calculate the SHA1 of a raw string\r\n
 */\r\n
function rstr_sha1(s)\r\n
{\r\n
  return binb2rstr(binb_sha1(rstr2binb(s), s.length * 8));\r\n
}\r\n
\r\n
/*\r\n
 * Calculate the HMAC-SHA1 of a key and some data (raw strings)\r\n
 */\r\n
function rstr_hmac_sha1(key, data)\r\n
{\r\n
  var bkey = rstr2binb(key);\r\n
  if(bkey.length > 16) bkey = binb_sha1(bkey, key.length * 8);\r\n
\r\n
  var ipad = Array(16), opad = Array(16);\r\n
  for(var i = 0; i < 16; i++)\r\n
  {\r\n
    ipad[i] = bkey[i] ^ 0x36363636;\r\n
    opad[i] = bkey[i] ^ 0x5C5C5C5C;\r\n
  }\r\n
\r\n
  var hash = binb_sha1(ipad.concat(rstr2binb(data)), 512 + data.length * 8);\r\n
  return binb2rstr(binb_sha1(opad.concat(hash), 512 + 160));\r\n
}\r\n
\r\n
/*\r\n
 * Convert a raw string to a hex string\r\n
 */\r\n
function rstr2hex(input)\r\n
{\r\n
  try { hexcase } catch(e) { hexcase=0; }\r\n
  var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";\r\n
  var output = "";\r\n
  var x;\r\n
  for(var i = 0; i < input.length; i++)\r\n
  {\r\n
    x = input.charCodeAt(i);\r\n
    output += hex_tab.charAt((x >>> 4) & 0x0F)\r\n
           +  hex_tab.charAt( x        & 0x0F);\r\n
  }\r\n
  return output;\r\n
}\r\n
\r\n
/*\r\n
 * Convert a raw string to a base-64 string\r\n
 */\r\n
function rstr2b64(input)\r\n
{\r\n
  try { b64pad } catch(e) { b64pad=\'\'; }\r\n
  var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";\r\n
  var output = "";\r\n
  var len = input.length;\r\n
  for(var i = 0; i < len; i += 3)\r\n
  {\r\n
    var triplet = (input.charCodeAt(i) << 16)\r\n
                | (i + 1 < len ? input.charCodeAt(i+1) << 8 : 0)\r\n
                | (i + 2 < len ? input.charCodeAt(i+2)      : 0);\r\n
    for(var j = 0; j < 4; j++)\r\n
    {\r\n
      if(i * 8 + j * 6 > input.length * 8) output += b64pad;\r\n
      else output += tab.charAt((triplet >>> 6*(3-j)) & 0x3F);\r\n
    }\r\n
  }\r\n
  return output;\r\n
}\r\n
\r\n
/*\r\n
 * Convert a raw string to an arbitrary string encoding\r\n
 */\r\n
function rstr2any(input, encoding)\r\n
{\r\n
  var divisor = encoding.length;\r\n
  var remainders = Array();\r\n
  var i, q, x, quotient;\r\n
\r\n
  /* Convert to an array of 16-bit big-endian values, forming the dividend */\r\n
  var dividend = Array(Math.ceil(input.length / 2));\r\n
  for(i = 0; i < dividend.length; i++)\r\n
  {\r\n
    dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);\r\n
  }\r\n
\r\n
  /*\r\n
   * Repeatedly perform a long division. The binary array forms the dividend,\r\n
   * the length of the encoding is the divisor. Once computed, the quotient\r\n
   * forms the dividend for the next step. We stop when the dividend is zero.\r\n
   * All remainders are stored for later use.\r\n
   */\r\n
  while(dividend.length > 0)\r\n
  {\r\n
    quotient = Array();\r\n
    x = 0;\r\n
    for(i = 0; i < dividend.length; i++)\r\n
    {\r\n
      x = (x << 16) + dividend[i];\r\n
      q = Math.floor(x / divisor);\r\n
      x -= q * divisor;\r\n
      if(quotient.length > 0 || q > 0)\r\n
        quotient[quotient.length] = q;\r\n
    }\r\n
    remainders[remainders.length] = x;\r\n
    dividend = quotient;\r\n
  }\r\n
\r\n
  /* Convert the remainders to the output string */\r\n
  var output = "";\r\n
  for(i = remainders.length - 1; i >= 0; i--)\r\n
    output += encoding.charAt(remainders[i]);\r\n
\r\n
  /* Append leading zero equivalents */\r\n
  var full_length = Math.ceil(input.length * 8 /\r\n
                                    (Math.log(encoding.length) / Math.log(2)))\r\n
  for(i = output.length; i < full_length; i++)\r\n
    output = encoding[0] + output;\r\n
\r\n
  return output;\r\n
}\r\n
\r\n
/*\r\n
 * Encode a string as utf-8.\r\n
 * For efficiency, this assumes the input is valid utf-16.\r\n
 */\r\n
function str2rstr_utf8(input)\r\n
{\r\n
  var output = "";\r\n
  var i = -1;\r\n
  var x, y;\r\n
\r\n
  while(++i < input.length)\r\n
  {\r\n
    /* Decode utf-16 surrogate pairs */\r\n
    x = input.charCodeAt(i);\r\n
    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;\r\n
    if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF)\r\n
    {\r\n
      x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);\r\n
      i++;\r\n
    }\r\n
\r\n
    /* Encode output as utf-8 */\r\n
    if(x <= 0x7F)\r\n
      output += String.fromCharCode(x);\r\n
    else if(x <= 0x7FF)\r\n
      output += String.fromCharCode(0xC0 | ((x >>> 6 ) & 0x1F),\r\n
                                    0x80 | ( x         & 0x3F));\r\n
    else if(x <= 0xFFFF)\r\n
      output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),\r\n
                                    0x80 | ((x >>> 6 ) & 0x3F),\r\n
                                    0x80 | ( x         & 0x3F));\r\n
    else if(x <= 0x1FFFFF)\r\n
      output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),\r\n
                                    0x80 | ((x >>> 12) & 0x3F),\r\n
                                    0x80 | ((x >>> 6 ) & 0x3F),\r\n
                                    0x80 | ( x         & 0x3F));\r\n
  }\r\n
  return output;\r\n
}\r\n
\r\n
/*\r\n
 * Encode a string as utf-16\r\n
 */\r\n
function str2rstr_utf16le(input)\r\n
{\r\n
  var output = "";\r\n
  for(var i = 0; i < input.length; i++)\r\n
    output += String.fromCharCode( input.charCodeAt(i)        & 0xFF,\r\n
                                  (input.charCodeAt(i) >>> 8) & 0xFF);\r\n
  return output;\r\n
}\r\n
\r\n
function str2rstr_utf16be(input)\r\n
{\r\n
  var output = "";\r\n
  for(var i = 0; i < input.length; i++)\r\n
    output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,\r\n
                                   input.charCodeAt(i)        & 0xFF);\r\n
  return output;\r\n
}\r\n
\r\n
/*\r\n
 * Convert a raw string to an array of big-endian words\r\n
 * Characters >255 have their high-byte silently ignored.\r\n
 */\r\n
function rstr2binb(input)\r\n
{\r\n
  var output = Array(input.length >> 2);\r\n
  for(var i = 0; i < output.length; i++)\r\n
    output[i] = 0;\r\n
  for(var i = 0; i < input.length * 8; i += 8)\r\n
    output[i>>5] |= (input.charCodeAt(i / 8) & 0xFF) << (24 - i % 32);\r\n
  return output;\r\n
}\r\n
\r\n
/*\r\n
 * Convert an array of big-endian words to a string\r\n
 */\r\n
function binb2rstr(input)\r\n
{\r\n
  var output = "";\r\n
  for(var i = 0; i < input.length * 32; i += 8)\r\n
    output += String.fromCharCode((input[i>>5] >>> (24 - i % 32)) & 0xFF);\r\n
  return output;\r\n
}\r\n
\r\n
/*\r\n
 * Calculate the SHA-1 of an array of big-endian words, and a bit length\r\n
 */\r\n
function binb_sha1(x, len)\r\n
{\r\n
  /* append padding */\r\n
  x[len >> 5] |= 0x80 << (24 - len % 32);\r\n
  x[((len + 64 >> 9) << 4) + 15] = len;\r\n
\r\n
  var w = Array(80);\r\n
  var a =  1732584193;\r\n
  var b = -271733879;\r\n
  var c = -1732584194;\r\n
  var d =  271733878;\r\n
  var e = -1009589776;\r\n
\r\n
  for(var i = 0; i < x.length; i += 16)\r\n
  {\r\n
    var olda = a;\r\n
    var oldb = b;\r\n
    var oldc = c;\r\n
    var oldd = d;\r\n
    var olde = e;\r\n
\r\n
    for(var j = 0; j < 80; j++)\r\n
    {\r\n
      if(j < 16) w[j] = x[i + j];\r\n
      else w[j] = bit_rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);\r\n
      var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)),\r\n
                       safe_add(safe_add(e, w[j]), sha1_kt(j)));\r\n
      e = d;\r\n
      d = c;\r\n
      c = bit_rol(b, 30);\r\n
      b = a;\r\n
      a = t;\r\n
    }\r\n
\r\n
    a = safe_add(a, olda);\r\n
    b = safe_add(b, oldb);\r\n
    c = safe_add(c, oldc);\r\n
    d = safe_add(d, oldd);\r\n
    e = safe_add(e, olde);\r\n
  }\r\n
  return Array(a, b, c, d, e);\r\n
\r\n
}\r\n
\r\n
/*\r\n
 * Perform the appropriate triplet combination function for the current\r\n
 * iteration\r\n
 */\r\n
function sha1_ft(t, b, c, d)\r\n
{\r\n
  if(t < 20) return (b & c) | ((~b) & d);\r\n
  if(t < 40) return b ^ c ^ d;\r\n
  if(t < 60) return (b & c) | (b & d) | (c & d);\r\n
  return b ^ c ^ d;\r\n
}\r\n
\r\n
/*\r\n
 * Determine the appropriate additive constant for the current iteration\r\n
 */\r\n
function sha1_kt(t)\r\n
{\r\n
  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :\r\n
         (t < 60) ? -1894007588 : -899497514;\r\n
}\r\n
\r\n
/*\r\n
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n
 * to work around bugs in some JS interpreters.\r\n
 */\r\n
function safe_add(x, y)\r\n
{\r\n
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\r\n
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n
  return (msw << 16) | (lsw & 0xFFFF);\r\n
}\r\n
\r\n
/*\r\n
 * Bitwise rotate a 32-bit number to the left.\r\n
 */\r\n
function bit_rol(num, cnt)\r\n
{\r\n
  return (num << cnt) | (num >>> (32 - cnt));\r\n
}\r\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>9362</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
