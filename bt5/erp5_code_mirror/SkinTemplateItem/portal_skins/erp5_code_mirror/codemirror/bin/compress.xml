<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="DTMLMethod" module="OFS.DTMLMethod"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>compress</string> </value>
        </item>
        <item>
            <key> <string>_vars</string> </key>
            <value>
              <dictionary/>
            </value>
        </item>
        <item>
            <key> <string>globals</string> </key>
            <value>
              <dictionary/>
            </value>
        </item>
        <item>
            <key> <string>raw</string> </key>
            <value> <string encoding="cdata"><![CDATA[

#!/usr/bin/env node\n
\n
// Compression helper for CodeMirror\n
//\n
// Example:\n
//\n
//   bin/compress codemirror runmode javascript xml\n
//\n
// Will take lib/codemirror.js, addon/runmode/runmode.js,\n
// mode/javascript/javascript.js, and mode/xml/xml.js, run them though\n
// the online minifier at http://marijnhaverbeke.nl/uglifyjs, and spit\n
// out the result.\n
//\n
//   bin/compress codemirror --local /path/to/bin/UglifyJS\n
//\n
// Will use a local minifier instead of the online default one.\n
//\n
// Script files are specified without .js ending. Prefixing them with\n
// their full (local) path is optional. So you may say lib/codemirror\n
// or mode/xml/xml to be more precise. In fact, even the .js suffix\n
// may be speficied, if wanted.\n
\n
"use strict";\n
\n
var fs = require("fs");\n
\n
function help(ok) {\n
  console.log("usage: " + process.argv[1] + " [--local /path/to/uglifyjs] files...");\n
  process.exit(ok ? 0 : 1);\n
}\n
\n
var local = null, args = [], extraArgs = null, files = [], blob = "";\n
\n
for (var i = 2; i < process.argv.length; ++i) {\n
  var arg = process.argv[i];\n
  if (arg == "--local" && i + 1 < process.argv.length) {\n
    var parts = process.argv[++i].split(/\\s+/);\n
    local = parts[0];\n
    extraArgs = parts.slice(1);\n
    if (!extraArgs.length) extraArgs = ["-c", "-m"];\n
  } else if (arg == "--help") {\n
    help(true);\n
  } else if (arg[0] != "-") {\n
    files.push({name: arg, re: new RegExp("(?:\\\\/|^)" + arg + (/\\.js$/.test(arg) ? "$" : "\\\\.js$"))});\n
  } else help(false);\n
}\n
\n
function walk(dir) {\n
  fs.readdirSync(dir).forEach(function(fname) {\n
    if (/^[_\\.]/.test(fname)) return;\n
    var file = dir + fname;\n
    if (fs.statSync(file).isDirectory()) return walk(file + "/");\n
    if (files.some(function(spec, i) {\n
      var match = spec.re.test(file);\n
      if (match) files.splice(i, 1);\n
      return match;\n
    })) {\n
      if (local) args.push(file);\n
      else blob += fs.readFileSync(file, "utf8");\n
    }\n
  });\n
}\n
\n
walk("lib/");\n
walk("addon/");\n
walk("mode/");\n
\n
if (!local && !blob) help(false);\n
\n
if (files.length) {\n
  console.log("Some speficied files were not found: " +\n
              files.map(function(a){return a.name;}).join(", "));\n
  process.exit(1);\n
}\n
  \n
if (local) {\n
  require("child_process").spawn(local, args.concat(extraArgs), {stdio: ["ignore", process.stdout, process.stderr]});\n
} else {\n
  var data = new Buffer("js_code=" + require("querystring").escape(blob), "utf8");\n
  var req = require("http").request({\n
    host: "marijnhaverbeke.nl",\n
    port: 80,\n
    method: "POST",\n
    path: "/uglifyjs",\n
    headers: {"content-type": "application/x-www-form-urlencoded",\n
              "content-length": data.length}\n
  });\n
  req.on("response", function(resp) {\n
    resp.on("data", function (chunk) { process.stdout.write(chunk); });\n
  });\n
  req.end(data);\n
}\n


]]></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
