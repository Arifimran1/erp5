<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts87948228.92</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>parselua.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/x-javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* \n
 Simple parser for LUA \n
 Written for Lua 5.1, based on parsecss and other parsers. \n
 features: highlights keywords, strings, comments (no leveling supported! ("[==[")),tokens, basic indenting\n
\n
 to make this parser highlight your special functions pass table with this functions names to parserConfig argument of creator,\n
\t\n
 parserConfig: ["myfunction1","myfunction2"],\n
 */\n
\n
 \n
function findFirstRegexp(words) {\n
    return new RegExp("^(?:" + words.join("|") + ")", "i");\n
}\n
\n
function matchRegexp(words) {\n
    return new RegExp("^(?:" + words.join("|") + ")$", "i");\n
}\n
\n
\n
 \n
var luaCustomFunctions= matchRegexp([]);\n
 \n
function configureLUA(parserConfig){\n
\tif(parserConfig)\n
\tluaCustomFunctions= matchRegexp(parserConfig);\n
}\n
\n
\n
//long list of standard functions from lua manual\n
var luaStdFunctions = matchRegexp([\n
"_G","_VERSION","assert","collectgarbage","dofile","error","getfenv","getmetatable","ipairs","load","loadfile","loadstring","module","next","pairs","pcall","print","rawequal","rawget","rawset","require","select","setfenv","setmetatable","tonumber","tostring","type","unpack","xpcall",\n
\n
"coroutine.create","coroutine.resume","coroutine.running","coroutine.status","coroutine.wrap","coroutine.yield",\n
\n
"debug.debug","debug.getfenv","debug.gethook","debug.getinfo","debug.getlocal","debug.getmetatable","debug.getregistry","debug.getupvalue","debug.setfenv","debug.sethook","debug.setlocal","debug.setmetatable","debug.setupvalue","debug.traceback",\n
\n
"close","flush","lines","read","seek","setvbuf","write",\n
\n
"io.close","io.flush","io.input","io.lines","io.open","io.output","io.popen","io.read","io.stderr","io.stdin","io.stdout","io.tmpfile","io.type","io.write",\n
\n
"math.abs","math.acos","math.asin","math.atan","math.atan2","math.ceil","math.cos","math.cosh","math.deg","math.exp","math.floor","math.fmod","math.frexp","math.huge","math.ldexp","math.log","math.log10","math.max","math.min","math.modf","math.pi","math.pow","math.rad","math.random","math.randomseed","math.sin","math.sinh","math.sqrt","math.tan","math.tanh",\n
\n
"os.clock","os.date","os.difftime","os.execute","os.exit","os.getenv","os.remove","os.rename","os.setlocale","os.time","os.tmpname",\n
\n
"package.cpath","package.loaded","package.loaders","package.loadlib","package.path","package.preload","package.seeall",\n
\n
"string.byte","string.char","string.dump","string.find","string.format","string.gmatch","string.gsub","string.len","string.lower","string.match","string.rep","string.reverse","string.sub","string.upper",\n
\n
"table.concat","table.insert","table.maxn","table.remove","table.sort"\n
]);\n
\n
\n
\n
 var luaKeywords = matchRegexp(["and","break","elseif","false","nil","not","or","return",\n
\t\t\t\t"true","function", "end", "if", "then", "else", "do", \n
\t\t\t\t"while", "repeat", "until", "for", "in", "local" ]);\n
\n
 var luaIndentKeys = matchRegexp(["function", "if","repeat","for","while", "[\\(]", "{"]);\n
 var luaUnindentKeys = matchRegexp(["end", "until", "[\\)]", "}"]);\n
\n
 var luaUnindentKeys2 = findFirstRegexp(["end", "until", "[\\)]", "}"]);\n
 var luaMiddleKeys = findFirstRegexp(["else","elseif"]);\n
\n
\n
\n
var LUAParser = Editor.Parser = (function() {\n
  var tokenizeLUA = (function() {\n
    function normal(source, setState) {\n
      var ch = source.next();\n
\n
   if (ch == "-" && source.equals("-")) {\n
        source.next();\n
 \t\tsetState(inSLComment);\n
        return null;\n
      } \n
\telse if (ch == "\\"" || ch == "\'") {\n
        setState(inString(ch));\n
        return null;\n
      }\n
    if (ch == "[" && (source.equals("[") || source.equals("="))) {\n
        var level = 0;\n
\t\twhile(source.equals("=")){\n
\t\t\tlevel ++;\n
\t\t\tsource.next();\n
\t\t}\n
\t\tif(! source.equals("[") )\n
\t\t\treturn "lua-error";\t\t\n
\t\tsetState(inMLSomething(level,"lua-string"));\n
        return null;\n
      } \n
\t    \n
      else if (ch == "=") {\n
\tif (source.equals("="))\n
\t\tsource.next();\n
        return "lua-token";\n
      }\n
  \t\n
      else if (ch == ".") {\n
\tif (source.equals("."))\n
\t\tsource.next();\n
\tif (source.equals("."))\n
\t\tsource.next();\n
        return "lua-token";\n
      }\n
     \n
      else if (ch == "+" || ch == "-" || ch == "*" || ch == "/" || ch == "%" || ch == "^" || ch == "#" ) {\n
        return "lua-token";\n
      }\n
      else if (ch == ">" || ch == "<" || ch == "(" || ch == ")" || ch == "{" || ch == "}" || ch == "[" ) {\n
        return "lua-token";\n
      }\n
      else if (ch == "]" || ch == ";" || ch == ":" || ch == ",") {\n
        return "lua-token";\n
      }\n
      else if (source.equals("=") && (ch == "~" || ch == "<" || ch == ">")) {\n
        source.next();\n
        return "lua-token";\n
      }\n
\n
     else if (/\\d/.test(ch)) {\n
        source.nextWhileMatches(/[\\w.%]/);\n
        return "lua-number";\n
      }\n
      else {\n
        source.nextWhileMatches(/[\\w\\\\\\-_.]/);\n
        return "lua-identifier";\n
      }\n
    }\n
 \n
function inSLComment(source, setState) {\n
      var start = true;\n
\tvar count=0;\n
      while (!source.endOfLine()) {\n
\t \tvar ch = source.next();\n
\t\tvar level = 0;\n
\t\tif ((ch =="[") && start){\n
\t\t\twhile(source.equals("=")){\n
\t\t\tsource.next();\n
\t\t\tlevel++;\n
\t\t\t}\n
\t\t\tif (source.equals("[")){\n
       \t\t\t\tsetState(inMLSomething(level,"lua-comment"));\n
        \t\t\treturn null;\n
  \t\t\t\t}\n
\t\t }\n
\t\t start = false;\t\n
\t}\n
\tsetState(normal);      \t\t\n
     return "lua-comment";\n
\t\n
    }\n
\n
    function inMLSomething(level,what) {\n
\t//wat sholud be "lua-string" or "lua-comment", level is the number of "=" in opening mark.\n
\treturn function(source, setState){\n
      var dashes = 0;\n
      while (!source.endOfLine()) {\n
        var ch = source.next();\n
        if (dashes == level+1 && ch == "]" ) {\n
          setState(normal);\n
          break;\n
        }\n
\t\tif (dashes == 0) \n
\t\t\tdashes = (ch == "]") ? 1:0;\n
\t\telse\n
 \t\t\tdashes = (ch == "=") ? dashes + 1 : 0;\n
        }\n
      return what;\n
\t }\n
    }\n
\n
\n
    function inString(quote) {\n
      return function(source, setState) {\n
        var escaped = false;\n
        while (!source.endOfLine()) {\n
          var ch = source.next();\n
          if (ch == quote && !escaped)\n
            break;\n
          escaped = !escaped && ch == "\\\\";\n
        }\n
        if (!escaped)\n
          setState(normal);\n
        return "lua-string";\n
      };\n
    }\n
\n
    return function(source, startState) {\n
      return tokenizer(source, startState || normal);\n
    };\n
  })();\n
\n
  function indentLUA(indentDepth, base) {\n
    return function(nextChars) {\n
\n
      var closing = (luaUnindentKeys2.test(nextChars) || luaMiddleKeys.test(nextChars));\n
\n
 \t\n
\treturn base + ( indentUnit * (indentDepth - (closing?1:0)) );\n
    };\n
  }\n
\n
  \n
function parseLUA(source,basecolumn) {\n
     basecolumn = basecolumn || 0;\n
    \n
\tvar tokens = tokenizeLUA(source);\n
    var indentDepth = 0;\n
\n
    var iter = {\n
      next: function() {\n
        var token = tokens.next(), style = token.style, content = token.content;\n
\n
 \n
\t\n
\tif (style == "lua-identifier" && luaKeywords.test(content)){\n
\t  token.style = "lua-keyword";\n
\t}\t\n
\tif (style == "lua-identifier" && luaStdFunctions.test(content)){\n
\t  token.style = "lua-stdfunc";\n
\t}\n
\tif (style == "lua-identifier" && luaCustomFunctions.test(content)){\n
\t  token.style = "lua-customfunc";\n
\t}\n
\n
\tif (luaIndentKeys.test(content))\n
    \tindentDepth++;\n
\telse if (luaUnindentKeys.test(content))\n
\t\tindentDepth--;\n
        \n
\n
        if (content == "\\n")\n
          token.indentation = indentLUA( indentDepth, basecolumn);\n
\n
        return token;\n
      },\n
\n
      copy: function() {\n
        var  _tokenState = tokens.state, _indentDepth = indentDepth;\n
        return function(source) {\n
          tokens = tokenizeLUA(source, _tokenState);\n
      \n
\t  indentDepth = _indentDepth;\n
          return iter;\n
        };\n
      }\n
    };\n
    return iter;\n
  }\n
\n
  return {make: parseLUA, configure:configureLUA, electricChars: "delf})"};   //en[d] els[e] unti[l] elsei[f]  // this should be taken from Keys keywords\n
})();\n
\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>7721</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
