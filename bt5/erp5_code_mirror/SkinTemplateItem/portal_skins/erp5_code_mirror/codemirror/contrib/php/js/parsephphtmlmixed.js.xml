<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts87948228.92</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>parsephphtmlmixed.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/x-javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/*\n
Copyright (c) 2008-2009 Yahoo! Inc. All rights reserved.\n
The copyrights embodied in the content of this file are licensed by\n
Yahoo! Inc. under the BSD (revised) open source license\n
\n
@author Dan Vlad Dascalescu <dandv@yahoo-inc.com>\n
\n
Based on parsehtmlmixed.js by Marijn Haverbeke.\n
*/\n
\n
var PHPHTMLMixedParser = Editor.Parser = (function() {\n
  var processingInstructions = ["<?php"];\n
\n
  if (!(PHPParser && CSSParser && JSParser && XMLParser))\n
    throw new Error("PHP, CSS, JS, and XML parsers must be loaded for PHP+HTML mixed mode to work.");\n
  XMLParser.configure({useHTMLKludges: true});\n
\n
  function parseMixed(stream) {\n
    var htmlParser = XMLParser.make(stream), localParser = null,\n
        inTag = false, lastAtt = null, phpParserState = null;\n
    var iter = {next: top, copy: copy};\n
\n
    function top() {\n
      var token = htmlParser.next();\n
      if (token.content == "<")\n
        inTag = true;\n
      else if (token.style == "xml-tagname" && inTag === true)\n
        inTag = token.content.toLowerCase();\n
      else if (token.style == "xml-attname")\n
        lastAtt = token.content;\n
      else if (token.type == "xml-processing") {\n
        // see if this opens a PHP block\n
        for (var i = 0; i < processingInstructions.length; i++)\n
          if (processingInstructions[i] == token.content) {\n
            iter.next = local(PHPParser, "?>");\n
            break;\n
          }\n
      }\n
      else if (token.style == "xml-attribute" && token.content == "\\"php\\"" && inTag == "script" && lastAtt == "language")\n
        inTag = "script/php";\n
      // "xml-processing" tokens are ignored, because they should be handled by a specific local parser\n
      else if (token.content == ">") {\n
        if (inTag == "script/php")\n
          iter.next = local(PHPParser, "</script>");\n
        else if (inTag == "script")\n
          iter.next = local(JSParser, "</script");\n
        else if (inTag == "style")\n
          iter.next = local(CSSParser, "</style");\n
        lastAtt = null;\n
        inTag = false;\n
      }\n
      return token;\n
    }\n
    function local(parser, tag) {\n
      var baseIndent = htmlParser.indentation();\n
      if (parser == PHPParser && phpParserState)\n
        localParser = phpParserState(stream);\n
      else\n
        localParser = parser.make(stream, baseIndent + indentUnit);\n
\n
      return function() {\n
        if (stream.lookAhead(tag, false, false, true)) {\n
          if (parser == PHPParser) phpParserState = localParser.copy();\n
          localParser = null;\n
          iter.next = top;\n
          return top();  // pass the ending tag to the enclosing parser\n
        }\n
\n
        var token = localParser.next();\n
        var lt = token.value.lastIndexOf("<"), sz = Math.min(token.value.length - lt, tag.length);\n
        if (lt != -1 && token.value.slice(lt, lt + sz).toLowerCase() == tag.slice(0, sz) &&\n
            stream.lookAhead(tag.slice(sz), false, false, true)) {\n
          stream.push(token.value.slice(lt));\n
          token.value = token.value.slice(0, lt);\n
        }\n
\n
        if (token.indentation) {\n
          var oldIndent = token.indentation;\n
          token.indentation = function(chars) {\n
            if (chars == "</")\n
              return baseIndent;\n
            else\n
              return oldIndent(chars);\n
          }\n
        }\n
\n
        return token;\n
      };\n
    }\n
\n
    function copy() {\n
      var _html = htmlParser.copy(), _local = localParser && localParser.copy(),\n
          _next = iter.next, _inTag = inTag, _lastAtt = lastAtt, _php = phpParserState;\n
      return function(_stream) {\n
        stream = _stream;\n
        htmlParser = _html(_stream);\n
        localParser = _local && _local(_stream);\n
        phpParserState = _php;\n
        iter.next = _next;\n
        inTag = _inTag;\n
        lastAtt = _lastAtt;\n
        return iter;\n
      };\n
    }\n
    return iter;\n
  }\n
\n
  return {\n
    make: parseMixed,\n
    electricChars: "{}/:",\n
    configure: function(conf) {\n
      if (conf.opening != null) processingInstructions = conf.opening;\n
    }\n
  };\n
\n
})();\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>3981</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
