<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts17681763.17</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Output_viewJobScheduleSpreadsheet.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/*global rJS, RSVP, moment, initGadgetMixin */\n
/*jslint nomen: true */\n
(function(window, rJS, RSVP, moment, initGadgetMixin) {\n
    "use strict";\n
    function job_schedule_spreadsheet_widget(all_data) {\n
        var now = new Date(), name, input_data = all_data.input, output_data = all_data.result, spreadsheet_data = [], spreadsheet_header = [ [ "Jobs", "ID", "Project Manager", "Due Date", "Priority", "Entrance Time", "Processing Time", "Station ID", "Step No." ] ], simulation_start_date = new Date(input_data.general.currentDate || now.getTime()), i, j, k, obj, node, component, order, node_id, due_date, entrance_date, duration, schedule, input_job = null, input_order = null;\n
        // XXX why ?\n
        now.setHours(0);\n
        now.setMinutes(0);\n
        now.setSeconds(0);\n
        // XXX: time unit for later\n
        //      or an utility function to map sim time to real time & vice\n
        //      versa.\n
        for (i = 0; i < output_data.elementList.length; i += 1) {\n
            obj = output_data.elementList[i];\n
            if (obj.family === "Job") {\n
                input_job = null;\n
                input_order = null;\n
                // find the input order and order component for this job\n
                // XXX this has no real meaning with capacity project\n
                for (node_id in input_data.nodes) {\n
                    if (input_data.nodes.hasOwnProperty(node_id)) {\n
                        node = input_data.nodes[node_id];\n
                        if (node.wip) {\n
                            for (j = 0; j < node.wip.length; j += 1) {\n
                                order = node.wip[j];\n
                                if (order.id === obj.id) {\n
                                    input_job = input_order = order;\n
                                }\n
                                if (input_job === null && order.componentsList) {\n
                                    for (k = 0; k < order.componentsList.length; k += 1) {\n
                                        component = order.componentsList[k];\n
                                        if (component.id === obj.id) {\n
                                            input_order = order;\n
                                            input_job = component;\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
                // XXX does not make sense in the case of capacity project\n
                due_date = new Date(simulation_start_date.getTime() + input_order.dueDate * 1e3 * 3600);\n
                for (j = 0; j < obj.results.schedule.length; j += 1) {\n
                    schedule = obj.results.schedule[j];\n
                    entrance_date = new Date(simulation_start_date.getTime() + // XXX: time unit\n
                    schedule.entranceTime * 1e3 * 3600);\n
                    duration = 0;\n
                    if (schedule.exitTime) {\n
                        duration = schedule.exitTime - schedule.entranceTime * 24;\n
                    } else {\n
                        // When duration is not returned by ManPy, it is calculated by\n
                        // difference of entranceTime of this step and entranceTime of the\n
                        // next step, or completionTime when this is the last step\n
                        if (j + 1 === obj.results.schedule.length) {\n
                            duration = obj.results.completionTime - schedule.entranceTime;\n
                        } else {\n
                            duration = obj.results.schedule[j + 1].entranceTime - schedule.entranceTime;\n
                        }\n
                    }\n
                    name = "";\n
                    if (obj._class === "Dream.CapacityProject") {\n
                        name = input_order.name + "-" + schedule.stationId;\n
                    } else {\n
                        name = input_order.name + "-" + input_job.name;\n
                    }\n
                    // Duration is calculated by difference of entranceTime of this\n
                    // step and entranceTime of the next step, or completionTime when\n
                    // this is the last step\n
                    if (j + 1 === obj.results.schedule.length) {\n
                        duration = obj.results.completionTime - schedule.entranceTime;\n
                    } else {\n
                        duration = obj.results.schedule[j + 1].entranceTime - schedule.entranceTime;\n
                    }\n
                    spreadsheet_data.push([ // XXX this label is incorrect for design step, during design\n
                    // phase we still have an order and not an order component.\n
                    name, obj.id, input_order.manager, moment(due_date).format("YYYY/MM/DD"), input_order.priority, moment(entrance_date).format("MMM/DD HH:mm"), duration, schedule.stationId, j ]);\n
                }\n
            }\n
        }\n
        if (spreadsheet_data.length > 1) {\n
            // Sort the spreadsheet data to an order convenient for end users\n
            // XXX: search for a default cmp in javascript\n
            spreadsheet_data.sort(function(a, b) {\n
                var result = 0, order_id_a, order_id_b, entrance_a, entrance_b;\n
                order_id_a = a[0].split("-")[0];\n
                order_id_b = b[0].split("-")[0];\n
                if (order_id_a !== order_id_b) {\n
                    if (order_id_a > order_id_b) {\n
                        result = 1;\n
                    } else {\n
                        result = -1;\n
                    }\n
                } else {\n
                    entrance_a = a[4];\n
                    entrance_b = b[4];\n
                    if (entrance_a > entrance_b) {\n
                        result = 1;\n
                    } else if (entrance_a < entrance_b) {\n
                        result = -1;\n
                    } else {\n
                        result = 0;\n
                    }\n
                }\n
                return result;\n
            });\n
        }\n
        return spreadsheet_header.concat(spreadsheet_data);\n
    }\n
    var gadget_klass = rJS(window);\n
    initGadgetMixin(gadget_klass);\n
    gadget_klass.declareAcquiredMethod("aq_getAttachment", "jio_getAttachment").declareMethod("render", function(options) {\n
        var jio_key = options.id, gadget = this;\n
        gadget.props.jio_key = jio_key;\n
        gadget.props.result = options.result;\n
        return new RSVP.Queue().push(function() {\n
            return RSVP.all([ gadget.aq_getAttachment({\n
                _id: jio_key,\n
                _attachment: "simulation.json"\n
            }), gadget.getDeclaredGadget("tableeditor") ]);\n
        }).push(function(result_list) {\n
            return result_list[1].render(JSON.stringify(job_schedule_spreadsheet_widget(JSON.parse(result_list[0])[gadget.props.result])));\n
        });\n
    }).declareMethod("startService", function() {\n
        return this.getDeclaredGadget("tableeditor").push(function(tableeditor) {\n
            return tableeditor.startService();\n
        });\n
    });\n
})(window, rJS, RSVP, moment, initGadgetMixin);

]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>7105</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
