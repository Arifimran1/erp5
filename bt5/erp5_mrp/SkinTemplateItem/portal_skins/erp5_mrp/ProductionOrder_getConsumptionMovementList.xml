<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string>"""Returns list of resources\' inventories used in consumption for production\n
\n
Args:\n
 - omit_order_resources [default: 1]\n
   Do not show resources, which are on order lines.\n
"""\n
if omit_order_resources:\n
  from Products.ZSQLCatalog.SQLCatalog import Query\n
  from Products.ZSQLCatalog.SQLCatalog import NegatedQuery\n
\n
  ignored_resource_uid_list = [q.getResourceUid() for q in context.getMovementList() if q.getResourceUid() is not None]\n
  kwargs[\'query\'] = NegatedQuery(Query(operator=\'IN\',**{\'stock.resource_uid\': ignored_resource_uid_list}))\n
\n
kwargs[\'group_by_date\'] = 1\n
kwargs[\'group_by_node\'] = 1\n
kwargs[\'group_by_variation\'] = 1\n
kwargs[\'group_by_resource\'] = 1\n
kwargs[\'section_uid\'] = context.getDestinationSectionUid()\n
\n
inventory_dict = {}\n
for inventory in context.portal_simulation.getFutureInventoryList(*args,**kwargs):\n
  inventory_dict[inventory.getResourceUid(), \\\n
                 tuple(sorted(inventory.getVariationCategoryList())), \\\n
                 inventory.getDestination()] = inventory\n
\n
result_list = inventory_dict.values()\n
consumption_dict = {}\n
for movement in context.getMovementList():\n
  movement_quantity_unit = movement.getQuantityUnit()\n
  movement_quantity = movement.getQuantity()\n
  movement_destination = movement.getDestination()\n
\n
  for material in movement.getSpecialiseValue().objectValues():\n
    material_resource_uid = material.getResourceUid()\n
    if not material_resource_uid:\n
      continue\n
\n
    inventory_dict_key = material_resource_uid, \\\n
        tuple(sorted(material.getVariationCategoryList())), \\\n
        movement_destination\n
\n
    try:\n
      obj = inventory_dict[inventory_dict_key]\n
    except KeyError:\n
      obj = material\n
      result_list.append(obj)\n
\n
    material_quantity_unit = material.getQuantityUnit()\n
    if movement_quantity_unit == material_quantity_unit:\n
      quantity = material.getQuantity()\n
    else:\n
      quantity = material.getResourceValue().convertQuantity(material.getQuantity(),\n
                                                             material_quantity_unit,\n
                                                             movement_quantity_unit)\n
\n
    consumption_dict[obj.getUid()] = quantity * movement_quantity\n
\n
context.REQUEST.set(\'consumption_dict\', consumption_dict)\n
return result_list\n
</string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>omit_order_resources=1,*args,**kwargs</string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>ProductionOrder_getConsumptionMovementList</string> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
