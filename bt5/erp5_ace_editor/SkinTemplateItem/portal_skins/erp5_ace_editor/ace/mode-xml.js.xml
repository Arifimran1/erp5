<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts77155565.87</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>mode-xml.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* ***** BEGIN LICENSE BLOCK *****\n
 * Distributed under the BSD license:\n
 *\n
 * Copyright (c) 2010, Ajax.org B.V.\n
 * All rights reserved.\n
 * \n
 * Redistribution and use in source and binary forms, with or without\n
 * modification, are permitted provided that the following conditions are met:\n
 *     * Redistributions of source code must retain the above copyright\n
 *       notice, this list of conditions and the following disclaimer.\n
 *     * Redistributions in binary form must reproduce the above copyright\n
 *       notice, this list of conditions and the following disclaimer in the\n
 *       documentation and/or other materials provided with the distribution.\n
 *     * Neither the name of Ajax.org B.V. nor the\n
 *       names of its contributors may be used to endorse or promote products\n
 *       derived from this software without specific prior written permission.\n
 * \n
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND\n
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\n
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n
 *\n
 * ***** END LICENSE BLOCK ***** */\n
\n
define(\'ace/mode/xml\', [\'require\', \'exports\', \'module\' , \'ace/lib/oop\', \'ace/mode/text\', \'ace/tokenizer\', \'ace/mode/xml_highlight_rules\', \'ace/mode/behaviour/xml\', \'ace/mode/folding/xml\'], function(require, exports, module) {\n
\n
\n
var oop = require("../lib/oop");\n
var TextMode = require("./text").Mode;\n
var Tokenizer = require("../tokenizer").Tokenizer;\n
var XmlHighlightRules = require("./xml_highlight_rules").XmlHighlightRules;\n
var XmlBehaviour = require("./behaviour/xml").XmlBehaviour;\n
var XmlFoldMode = require("./folding/xml").FoldMode;\n
\n
var Mode = function() {\n
    this.$tokenizer = new Tokenizer(new XmlHighlightRules().getRules());\n
    this.$behaviour = new XmlBehaviour();\n
    this.foldingRules = new XmlFoldMode();\n
};\n
\n
oop.inherits(Mode, TextMode);\n
\n
(function() {\n
    \n
    this.blockComment = {start: "<!--", end: "-->"};\n
\n
}).call(Mode.prototype);\n
\n
exports.Mode = Mode;\n
});\n
\n
define(\'ace/mode/xml_highlight_rules\', [\'require\', \'exports\', \'module\' , \'ace/lib/oop\', \'ace/mode/xml_util\', \'ace/mode/text_highlight_rules\'], function(require, exports, module) {\n
\n
\n
var oop = require("../lib/oop");\n
var xmlUtil = require("./xml_util");\n
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;\n
\n
var XmlHighlightRules = function() {\n
    this.$rules = {\n
        start : [\n
            {token : "text", regex : "<\\\\!\\\\[CDATA\\\\[", next : "cdata"},\n
            {token : "xml-pe", regex : "<\\\\?.*?\\\\?>"},\n
            {token : "comment", regex : "<\\\\!--", next : "comment"},\n
            {token : "xml-pe", regex : "<\\\\!.*?>"},\n
            {token : "meta.tag", regex : "<\\\\/?", next : "tag"},\n
            {token : "text", regex : "\\\\s+"},\n
            {\n
                token : "constant.character.entity", \n
                regex : "(?:&#[0-9]+;)|(?:&#x[0-9a-fA-F]+;)|(?:&[a-zA-Z0-9_:\\\\.-]+;)" \n
            }\n
        ],\n
        \n
        cdata : [\n
            {token : "text", regex : "\\\\]\\\\]>", next : "start"},\n
            {token : "text", regex : "\\\\s+"},\n
            {token : "text", regex : "(?:[^\\\\]]|\\\\](?!\\\\]>))+"}\n
        ],\n
\n
        comment : [\n
            {token : "comment", regex : ".*?-->", next : "start"},\n
            {token : "comment", regex : ".+"}\n
        ]\n
    };\n
    \n
    xmlUtil.tag(this.$rules, "tag", "start");\n
};\n
\n
oop.inherits(XmlHighlightRules, TextHighlightRules);\n
\n
exports.XmlHighlightRules = XmlHighlightRules;\n
});\n
\n
define(\'ace/mode/xml_util\', [\'require\', \'exports\', \'module\' ], function(require, exports, module) {\n
\n
\n
function string(state) {\n
    return [{\n
        token : "string",\n
        regex : \'"\',\n
        next : state + "_qqstring"\n
    }, {\n
        token : "string",\n
        regex : "\'",\n
        next : state + "_qstring"\n
    }];\n
}\n
\n
function multiLineString(quote, state) {\n
    return [\n
        {token : "string", regex : quote, next : state},\n
        {\n
            token : "constant.language.escape",\n
            regex : "(?:&#[0-9]+;)|(?:&#x[0-9a-fA-F]+;)|(?:&[a-zA-Z0-9_:\\\\.-]+;)" \n
        },\n
        {defaultToken : "string"}\n
    ];\n
}\n
\n
exports.tag = function(states, name, nextState, tagMap) {\n
    states[name] = [{\n
        token : "text",\n
        regex : "\\\\s+"\n
    }, {\n
        \n
    token : !tagMap ? "meta.tag.tag-name" : function(value) {\n
            if (tagMap[value])\n
                return "meta.tag.tag-name." + tagMap[value];\n
            else\n
                return "meta.tag.tag-name";\n
        },\n
        regex : "[-_a-zA-Z0-9:]+",\n
        next : name + "_embed_attribute_list" \n
    }, {\n
        token: "empty",\n
        regex: "",\n
        next : name + "_embed_attribute_list"\n
    }];\n
\n
    states[name + "_qstring"] = multiLineString("\'", name + "_embed_attribute_list");\n
    states[name + "_qqstring"] = multiLineString("\\"", name + "_embed_attribute_list");\n
    \n
    states[name + "_embed_attribute_list"] = [{\n
        token : "meta.tag.r",\n
        regex : "/?>",\n
        next : nextState\n
    }, {\n
        token : "keyword.operator",\n
        regex : "="\n
    }, {\n
        token : "entity.other.attribute-name",\n
        regex : "[-_a-zA-Z0-9:]+"\n
    }, {\n
        token : "constant.numeric", // float\n
        regex : "[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b"\n
    }, {\n
        token : "text",\n
        regex : "\\\\s+"\n
    }].concat(string(name));\n
};\n
\n
});\n
\n
define(\'ace/mode/behaviour/xml\', [\'require\', \'exports\', \'module\' , \'ace/lib/oop\', \'ace/mode/behaviour\', \'ace/mode/behaviour/cstyle\', \'ace/token_iterator\'], function(require, exports, module) {\n
\n
\n
var oop = require("../../lib/oop");\n
var Behaviour = require("../behaviour").Behaviour;\n
var CstyleBehaviour = require("./cstyle").CstyleBehaviour;\n
var TokenIterator = require("../../token_iterator").TokenIterator;\n
\n
function hasType(token, type) {\n
    var hasType = true;\n
    var typeList = token.type.split(\'.\');\n
    var needleList = type.split(\'.\');\n
    needleList.forEach(function(needle){\n
        if (typeList.indexOf(needle) == -1) {\n
            hasType = false;\n
            return false;\n
        }\n
    });\n
    return hasType;\n
}\n
\n
var XmlBehaviour = function () {\n
    \n
    this.inherit(CstyleBehaviour, ["string_dquotes"]); // Get string behaviour\n
    \n
    this.add("autoclosing", "insertion", function (state, action, editor, session, text) {\n
        if (text == \'>\') {\n
            var position = editor.getCursorPosition();\n
            var iterator = new TokenIterator(session, position.row, position.column);\n
            var token = iterator.getCurrentToken();\n
            var atCursor = false;\n
            if (!token || !hasType(token, \'meta.tag\') && !(hasType(token, \'text\') && token.value.match(\'/\'))){\n
                do {\n
                    token = iterator.stepBackward();\n
                } while (token && (hasType(token, \'string\') || hasType(token, \'keyword.operator\') || hasType(token, \'entity.attribute-name\') || hasType(token, \'text\')));\n
            } else {\n
                atCursor = true;\n
            }\n
            if (!token || !hasType(token, \'meta.tag-name\') || iterator.stepBackward().value.match(\'/\')) {\n
                return\n
            }\n
            var tag = token.value;\n
            if (atCursor){\n
                var tag = tag.substring(0, position.column - token.start);\n
            }\n
\n
            return {\n
               text: \'>\' + \'</\' + tag + \'>\',\n
               selection: [1, 1]\n
            }\n
        }\n
    });\n
\n
    this.add(\'autoindent\', \'insertion\', function (state, action, editor, session, text) {\n
        if (text == "\\n") {\n
            var cursor = editor.getCursorPosition();\n
            var line = session.doc.getLine(cursor.row);\n
            var rightChars = line.substring(cursor.column, cursor.column + 2);\n
            if (rightChars == \'</\') {\n
                var indent = this.$getIndent(session.doc.getLine(cursor.row)) + session.getTabString();\n
                var next_indent = this.$getIndent(session.doc.getLine(cursor.row));\n
\n
                return {\n
                    text: \'\\n\' + indent + \'\\n\' + next_indent,\n
                    selection: [1, indent.length, 1, indent.length]\n
                }\n
            }\n
        }\n
    });\n
    \n
}\n
oop.inherits(XmlBehaviour, Behaviour);\n
\n
exports.XmlBehaviour = XmlBehaviour;\n
});\n
\n
define(\'ace/mode/behaviour/cstyle\', [\'require\', \'exports\', \'module\' , \'ace/lib/oop\', \'ace/mode/behaviour\', \'ace/token_iterator\', \'ace/lib/lang\'], function(require, exports, module) {\n
\n
\n
var oop = require("../../lib/oop");\n
var Behaviour = require("../behaviour").Behaviour;\n
var TokenIterator = require("../../token_iterator").TokenIterator;\n
var lang = require("../../lib/lang");\n
\n
var SAFE_INSERT_IN_TOKENS =\n
    ["text", "paren.rparen", "punctuation.operator"];\n
var SAFE_INSERT_BEFORE_TOKENS =\n
    ["text", "paren.rparen", "punctuation.operator", "comment"];\n
\n
\n
var autoInsertedBrackets = 0;\n
var autoInsertedRow = -1;\n
var autoInsertedLineEnd = "";\n
var maybeInsertedBrackets = 0;\n
var maybeInsertedRow = -1;\n
var maybeInsertedLineStart = "";\n
var maybeInsertedLineEnd = "";\n
\n
var CstyleBehaviour = function () {\n
    \n
    CstyleBehaviour.isSaneInsertion = function(editor, session) {\n
        var cursor = editor.getCursorPosition();\n
        var iterator = new TokenIterator(session, cursor.row, cursor.column);\n
        if (!this.$matchTokenType(iterator.getCurrentToken() || "text", SAFE_INSERT_IN_TOKENS)) {\n
            var iterator2 = new TokenIterator(session, cursor.row, cursor.column + 1);\n
            if (!this.$matchTokenType(iterator2.getCurrentToken() || "text", SAFE_INSERT_IN_TOKENS))\n
                return false;\n
        }\n
        iterator.stepForward();\n
        return iterator.getCurrentTokenRow() !== cursor.row ||\n
            this.$matchTokenType(iterator.getCurrentToken() || "text", SAFE_INSERT_BEFORE_TOKENS);\n
    };\n
    \n
    CstyleBehaviour.$matchTokenType = function(token, types) {\n
        return types.indexOf(token.type || token) > -1;\n
    };\n
    \n
    CstyleBehaviour.recordAutoInsert = function(editor, session, bracket) {\n
        var cursor = editor.getCursorPosition();\n
        var line = session.doc.getLine(cursor.row);\n
        if (!this.isAutoInsertedClosing(cursor, line, autoInsertedLineEnd[0]))\n
            autoInsertedBrackets = 0;\n
        autoInsertedRow = cursor.row;\n
        autoInsertedLineEnd = bracket + line.substr(cursor.column);\n
        autoInsertedBrackets++;\n
    };\n
    \n
    CstyleBehaviour.recordMaybeInsert = function(editor, session, bracket) {\n
        var cursor = editor.getCursorPosition();\n
        var line = session.doc.getLine(cursor.row);\n
        if (!this.isMaybeInsertedClosing(cursor, line))\n
            maybeInsertedBrackets = 0;\n
        maybeInsertedRow = cursor.row;\n
        maybeInsertedLineStart = line.substr(0, cursor.column) + bracket;\n
        maybeInsertedLineEnd = line.substr(cursor.column);\n
        maybeInsertedBrackets++;\n
    };\n
    \n
    CstyleBehaviour.isAutoInsertedClosing = function(cursor, line, bracket) {\n
        return autoInsertedBrackets > 0 &&\n
            cursor.row === autoInsertedRow &&\n
            bracket === autoInsertedLineEnd[0] &&\n
            line.substr(cursor.column) === autoInsertedLineEnd;\n
    };\n
    \n
    CstyleBehaviour.isMaybeInsertedClosing = function(cursor, line) {\n
        return maybeInsertedBrackets > 0 &&\n
            cursor.row === maybeInsertedRow &&\n
            line.substr(cursor.column) === maybeInsertedLineEnd &&\n
            line.substr(0, cursor.column) == maybeInsertedLineStart;\n
    };\n
    \n
    CstyleBehaviour.popAutoInsertedClosing = function() {\n
        autoInsertedLineEnd = autoInsertedLineEnd.substr(1);\n
        autoInsertedBrackets--;\n
    };\n
    \n
    CstyleBehaviour.clearMaybeInsertedClosing = function() {\n
        maybeInsertedBrackets = 0;\n
        maybeInsertedRow = -1;\n
    };\n
\n
    this.add("braces", "insertion", function (state, action, editor, session, text) {\n
        var cursor = editor.getCursorPosition();\n
        var line = session.doc.getLine(cursor.row);\n
        if (text == \'{\') {\n
            var selection = editor.getSelectionRange();\n
            var selected = session.doc.getTextRange(selection);\n
            if (selected !== "" && selected !== "{" && editor.getWrapBehavioursEnabled()) {\n
                return {\n
                    text: \'{\' + selected + \'}\',\n
                    selection: false\n
                };\n
            } else if (CstyleBehaviour.isSaneInsertion(editor, session)) {\n
                if (/[\\]\\}\\)]/.test(line[cursor.column])) {\n
                    CstyleBehaviour.recordAutoInsert(editor, session, "}");\n
                    return {\n
                        text: \'{}\',\n
                        selection: [1, 1]\n
                    };\n
                } else {\n
                    CstyleBehaviour.recordMaybeInsert(editor, session, "{");\n
                    return {\n
                        text: \'{\',\n
                        selection: [1, 1]\n
                    };\n
                }\n
            }\n
        } else if (text == \'}\') {\n
            var rightChar = line.substring(cursor.column, cursor.column + 1);\n
            if (rightChar == \'}\') {\n
                var matching = session.$findOpeningBracket(\'}\', {column: cursor.column + 1, row: cursor.row});\n
                if (matching !== null && CstyleBehaviour.isAutoInsertedClosing(cursor, line, text)) {\n
                    CstyleBehaviour.popAutoInsertedClosing();\n
                    return {\n
                        text: \'\',\n
                        selection: [1, 1]\n
                    };\n
                }\n
            }\n
        } else if (text == "\\n" || text == "\\r\\n") {\n
            var closing = "";\n
            if (CstyleBehaviour.isMaybeInsertedClosing(cursor, line)) {\n
                closing = lang.stringRepeat("}", maybeInsertedBrackets);\n
                CstyleBehaviour.clearMaybeInsertedClosing();\n
            }\n
            var rightChar = line.substring(cursor.column, cursor.column + 1);\n
            if (rightChar == \'}\' || closing !== "") {\n
                var openBracePos = session.findMatchingBracket({row: cursor.row, column: cursor.column}, \'}\');\n
                if (!openBracePos)\n
                     return null;\n
\n
                var indent = this.getNextLineIndent(state, line.substring(0, cursor.column), session.getTabString());\n
                var next_indent = this.$getIndent(line);\n
\n
                return {\n
                    text: \'\\n\' + indent + \'\\n\' + next_indent + closing,\n
                    selection: [1, indent.length, 1, indent.length]\n
                };\n
            }\n
        }\n
    });\n
\n
    this.add("braces", "deletion", function (state, action, editor, session, range) {\n
        var selected = session.doc.getTextRange(range);\n
        if (!range.isMultiLine() && selected == \'{\') {\n
            var line = session.doc.getLine(range.start.row);\n
            var rightChar = line.substring(range.end.column, range.end.column + 1);\n
            if (rightChar == \'}\') {\n
                range.end.column++;\n
                return range;\n
            } else {\n
                maybeInsertedBrackets--;\n
            }\n
        }\n
    });\n
\n
    this.add("parens", "insertion", function (state, action, editor, session, text) {\n
        if (text == \'(\') {\n
            var selection = editor.getSelectionRange();\n
            var selected = session.doc.getTextRange(selection);\n
            if (selected !== "" && editor.getWrapBehavioursEnabled()) {\n
                return {\n
                    text: \'(\' + selected + \')\',\n
                    selection: false\n
                };\n
            } else if (CstyleBehaviour.isSaneInsertion(editor, session)) {\n
                CstyleBehaviour.recordAutoInsert(editor, session, ")");\n
                return {\n
                    text: \'()\',\n
                    selection: [1, 1]\n
                };\n
            }\n
        } else if (text == \')\') {\n
            var cursor = editor.getCursorPosition();\n
            var line = session.doc.getLine(cursor.row);\n
            var rightChar = line.substring(cursor.column, cursor.column + 1);\n
            if (rightChar == \')\') {\n
                var matching = session.$findOpeningBracket(\')\', {column: cursor.column + 1, row: cursor.row});\n
                if (matching !== null && CstyleBehaviour.isAutoInsertedClosing(cursor, line, text)) {\n
                    CstyleBehaviour.popAutoInsertedClosing();\n
                    return {\n
                        text: \'\',\n
                        selection: [1, 1]\n
                    };\n
                }\n
            }\n
        }\n
    });\n
\n
    this.add("parens", "deletion", function (state, action, editor, session, range) {\n
        var selected = session.doc.getTextRange(range);\n
        if (!range.isMultiLine() && selected == \'(\') {\n
            var line = session.doc.getLine(range.start.row);\n
            var rightChar = line.substring(range.start.column + 1, range.start.column + 2);\n
            if (rightChar == \')\') {\n
                range.end.column++;\n
                return range;\n
            }\n
        }\n
    });\n
\n
    this.add("brackets", "insertion", function (state, action, editor, session, text) {\n
        if (text == \'[\') {\n
            var selection = editor.getSelectionRange();\n
            var selected = session.doc.getTextRange(selection);\n
            if (selected !== "" && editor.getWrapBehavioursEnabled()) {\n
                return {\n
                    text: \'[\' + selected + \']\',\n
                    selection: false\n
                };\n
            } else if (CstyleBehaviour.isSaneInsertion(editor, session)) {\n
                CstyleBehaviour.recordAutoInsert(editor, session, "]");\n
                return {\n
                    text: \'[]\',\n
                    selection: [1, 1]\n
                };\n
            }\n
        } else if (text == \']\') {\n
            var cursor = editor.getCursorPosition();\n
            var line = session.doc.getLine(cursor.row);\n
            var rightChar = line.substring(cursor.column, cursor.column + 1);\n
            if (rightChar == \']\') {\n
                var matching = session.$findOpeningBracket(\']\', {column: cursor.column + 1, row: cursor.row});\n
                if (matching !== null && CstyleBehaviour.isAutoInsertedClosing(cursor, line, text)) {\n
                    CstyleBehaviour.popAutoInsertedClosing();\n
                    return {\n
                        text: \'\',\n
                        selection: [1, 1]\n
                    };\n
                }\n
            }\n
        }\n
    });\n
\n
    this.add("brackets", "deletion", function (state, action, editor, session, range) {\n
        var selected = session.doc.getTextRange(range);\n
        if (!range.isMultiLine() && selected == \'[\') {\n
            var line = session.doc.getLine(range.start.row);\n
            var rightChar = line.substring(range.start.column + 1, range.start.column + 2);\n
            if (rightChar == \']\') {\n
                range.end.column++;\n
                return range;\n
            }\n
        }\n
    });\n
\n
    this.add("string_dquotes", "insertion", function (state, action, editor, session, text) {\n
        if (text == \'"\' || text == "\'") {\n
            var quote = text;\n
            var selection = editor.getSelectionRange();\n
            var selected = session.doc.getTextRange(selection);\n
            if (selected !== "" && selected !== "\'" && selected != \'"\' && editor.getWrapBehavioursEnabled()) {\n
                return {\n
                    text: quote + selected + quote,\n
                    selection: false\n
                };\n
            } else {\n
                var cursor = editor.getCursorPosition();\n
                var line = session.doc.getLine(cursor.row);\n
                var leftChar = line.substring(cursor.column-1, cursor.column);\n
                if (leftChar == \'\\\\\') {\n
                    return null;\n
                }\n
                var tokens = session.getTokens(selection.start.row);\n
                var col = 0, token;\n
                var quotepos = -1; // Track whether we\'re inside an open quote.\n
\n
                for (var x = 0; x < tokens.length; x++) {\n
                    token = tokens[x];\n
                    if (token.type == "string") {\n
                      quotepos = -1;\n
                    } else if (quotepos < 0) {\n
                      quotepos = token.value.indexOf(quote);\n
                    }\n
                    if ((token.value.length + col) > selection.start.column) {\n
                        break;\n
                    }\n
                    col += tokens[x].value.length;\n
                }\n
                if (!token || (quotepos < 0 && token.type !== "comment" && (token.type !== "string" || ((selection.start.column !== token.value.length+col-1) && token.value.lastIndexOf(quote) === token.value.length-1)))) {\n
                    if (!CstyleBehaviour.isSaneInsertion(editor, session))\n
                        return;\n
                    return {\n
                        text: quote + quote,\n
                        selection: [1,1]\n
                    };\n
                } else if (token && token.type === "string") {\n
                    var rightChar = line.substring(cursor.column, cursor.column + 1);\n
                    if (rightChar == quote) {\n
                        return {\n
                            text: \'\',\n
                            selection: [1, 1]\n
                        };\n
                    }\n
                }\n
            }\n
        }\n
    });\n
\n
    this.add("string_dquotes", "deletion", function (state, action, editor, session, range) {\n
        var selected = session.doc.getTextRange(range);\n
        if (!range.isMultiLine() && (selected == \'"\' || selected == "\'")) {\n
            var line = session.doc.getLine(range.start.row);\n
            var rightChar = line.substring(range.start.column + 1, range.start.column + 2);\n
            if (rightChar == selected) {\n
                range.end.column++;\n
                return range;\n
            }\n
        }\n
    });\n
\n
};\n
\n
oop.inherits(CstyleBehaviour, Behaviour);\n
\n
exports.CstyleBehaviour = CstyleBehaviour;\n
});\n
\n
define(\'ace/mode/folding/xml\', [\'require\', \'exports\', \'module\' , \'ace/lib/oop\', \'ace/lib/lang\', \'ace/range\', \'ace/mode/folding/fold_mode\', \'ace/token_iterator\'], function(require, exports, module) {\n
\n
\n
var oop = require("../../lib/oop");\n
var lang = require("../../lib/lang");\n
var Range = require("../../range").Range;\n
var BaseFoldMode = require("./fold_mode").FoldMode;\n
var TokenIterator = require("../../token_iterator").TokenIterator;\n
\n
var FoldMode = exports.FoldMode = function(voidElements) {\n
    BaseFoldMode.call(this);\n
    this.voidElements = voidElements || {};\n
};\n
oop.inherits(FoldMode, BaseFoldMode);\n
\n
(function() {\n
\n
    this.getFoldWidget = function(session, foldStyle, row) {\n
        var tag = this._getFirstTagInLine(session, row);\n
\n
        if (tag.closing)\n
            return foldStyle == "markbeginend" ? "end" : "";\n
\n
        if (!tag.tagName || this.voidElements[tag.tagName.toLowerCase()])\n
            return "";\n
\n
        if (tag.selfClosing)\n
            return "";\n
\n
        if (tag.value.indexOf("/" + tag.tagName) !== -1)\n
            return "";\n
\n
        return "start";\n
    };\n
    \n
    this._getFirstTagInLine = function(session, row) {\n
        var tokens = session.getTokens(row);\n
        var value = "";\n
        for (var i = 0; i < tokens.length; i++) {\n
            var token = tokens[i];\n
            if (token.type.indexOf("meta.tag") === 0)\n
                value += token.value;\n
            else\n
                value += lang.stringRepeat(" ", token.value.length);\n
        }\n
        \n
        return this._parseTag(value);\n
    };\n
\n
    this.tagRe = /^(\\s*)(<?(\\/?)([-_a-zA-Z0-9:!]*)\\s*(\\/?)>?)/;\n
    this._parseTag = function(tag) {\n
        \n
        var match = tag.match(this.tagRe);\n
        var column = 0;\n
\n
        return {\n
            value: tag,\n
            match: match ? match[2] : "",\n
            closing: match ? !!match[3] : false,\n
            selfClosing: match ? !!match[5] || match[2] == "/>" : false,\n
            tagName: match ? match[4] : "",\n
            column: match[1] ? column + match[1].length : column\n
        };\n
    };\n
    this._readTagForward = function(iterator) {\n
        var token = iterator.getCurrentToken();\n
        if (!token)\n
            return null;\n
            \n
        var value = "";\n
        var start;\n
        \n
        do {\n
            if (token.type.indexOf("meta.tag") === 0) {\n
                if (!start) {\n
                    var start = {\n
                        row: iterator.getCurrentTokenRow(),\n
                        column: iterator.getCurrentTokenColumn()\n
                    };\n
                }\n
                value += token.value;\n
                if (value.indexOf(">") !== -1) {\n
                    var tag = this._parseTag(value);\n
                    tag.start = start;\n
                    tag.end = {\n
                        row: iterator.getCurrentTokenRow(),\n
                        column: iterator.getCurrentTokenColumn() + token.value.length\n
                    };\n
                    iterator.stepForward();\n
                    return tag;\n
                }\n
            }\n
        } while(token = iterator.stepForward());\n
        \n
        return null;\n
    };\n
    \n
    this._readTagBackward = function(iterator) {\n
        var token = iterator.getCurrentToken();\n
        if (!token)\n
            return null;\n
            \n
        var value = "";\n
        var end;\n
\n
        do {\n
            if (token.type.indexOf("meta.tag") === 0) {\n
                if (!end) {\n
                    end = {\n
                        row: iterator.getCurrentTokenRow(),\n
                        column: iterator.getCurrentTokenColumn() + token.value.length\n
                    };\n
                }\n
                value = token.value + value;\n
                if (value.indexOf("<") !== -1) {\n
                    var tag = this._parseTag(value);\n
                    tag.end = end;\n
                    tag.start = {\n
                        row: iterator.getCurrentTokenRow(),\n
                        column: iterator.getCurrentTokenColumn()\n
                    };\n
                    iterator.stepBackward();\n
                    return tag;\n
                }\n
            }\n
        } while(token = iterator.stepBackward());\n
        \n
        return null;\n
    };\n
    \n
    this._pop = function(stack, tag) {\n
        while (stack.length) {\n
            \n
            var top = stack[stack.length-1];\n
            if (!tag || top.tagName == tag.tagName) {\n
                return stack.pop();\n
            }\n
            else if (this.voidElements[tag.tagName]) {\n
                return;\n
            }\n
            else if (this.voidElements[top.tagName]) {\n
                stack.pop();\n
                continue;\n
            } else {\n
                return null;\n
            }\n
        }\n
    };\n
    \n
    this.getFoldWidgetRange = function(session, foldStyle, row) {\n
        var firstTag = this._getFirstTagInLine(session, row);\n
        \n
        if (!firstTag.match)\n
            return null;\n
        \n
        var isBackward = firstTag.closing || firstTag.selfClosing;\n
        var stack = [];\n
        var tag;\n
        \n
        if (!isBackward) {\n
            var iterator = new TokenIterator(session, row, firstTag.column);\n
            var start = {\n
                row: row,\n
                column: firstTag.column + firstTag.tagName.length + 2\n
            };\n
            while (tag = this._readTagForward(iterator)) {\n
                if (tag.selfClosing) {\n
                    if (!stack.length) {\n
                        tag.start.column += tag.tagName.length + 2;\n
                        tag.end.column -= 2;\n
                        return Range.fromPoints(tag.start, tag.end);\n
                    } else\n
                        continue;\n
                }\n
                \n
                if (tag.closing) {\n
                    this._pop(stack, tag);\n
                    if (stack.length == 0)\n
                        return Range.fromPoints(start, tag.start);\n
                }\n
                else {\n
                    stack.push(tag)\n
                }\n
            }\n
        }\n
        else {\n
            var iterator = new TokenIterator(session, row, firstTag.column + firstTag.match.length);\n
            var end = {\n
                row: row,\n
                column: firstTag.column\n
            };\n
            \n
            while (tag = this._readTagBackward(iterator)) {\n
                if (tag.selfClosing) {\n
                    if (!stack.length) {\n
                        tag.start.column += tag.tagName.length + 2;\n
                        tag.end.column -= 2;\n
                        return Range.fromPoints(tag.start, tag.end);\n
                    } else\n
                        continue;\n
                }\n
                \n
                if (!tag.closing) {\n
                    this._pop(stack, tag);\n
                    if (stack.length == 0) {\n
                        tag.start.column += tag.tagName.length + 2;\n
                        return Range.fromPoints(tag.start, end);\n
                    }\n
                }\n
                else {\n
                    stack.push(tag)\n
                }\n
            }\n
        }\n
        \n
    };\n
\n
}).call(FoldMode.prototype);\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>29530</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>mode-xml.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
