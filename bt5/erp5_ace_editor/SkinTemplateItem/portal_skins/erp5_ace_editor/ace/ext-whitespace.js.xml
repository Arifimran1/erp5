<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts83646622.56</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>ext-whitespace.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* ***** BEGIN LICENSE BLOCK *****\n
 * Distributed under the BSD license:\n
 *\n
 * Copyright (c) 2010, Ajax.org B.V.\n
 * All rights reserved.\n
 *\n
 * Redistribution and use in source and binary forms, with or without\n
 * modification, are permitted provided that the following conditions are met:\n
 *     * Redistributions of source code must retain the above copyright\n
 *       notice, this list of conditions and the following disclaimer.\n
 *     * Redistributions in binary form must reproduce the above copyright\n
 *       notice, this list of conditions and the following disclaimer in the\n
 *       documentation and/or other materials provided with the distribution.\n
 *     * Neither the name of Ajax.org B.V. nor the\n
 *       names of its contributors may be used to endorse or promote products\n
 *       derived from this software without specific prior written permission.\n
 *\n
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND\n
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\n
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n
 *\n
 * ***** END LICENSE BLOCK ***** */\n
\n
define(\'ace/ext/whitespace\', [\'require\', \'exports\', \'module\' , \'ace/lib/lang\'], function(require, exports, module) {\n
\n
\n
var lang = require("../lib/lang");\n
exports.$detectIndentation = function(lines, fallback) {\n
    var stats = [];\n
    var changes = [];\n
    var tabIndents = 0;\n
    var prevSpaces = 0;\n
    var max = Math.min(lines.length, 1000);\n
    for (var i = 0; i < max; i++) {\n
        var line = lines[i];\n
        if (!/^\\s*[^*+\\-\\s]/.test(line))\n
            continue;\n
\n
        var tabs = line.match(/^\\t*/)[0].length;\n
        if (line[0] == "\\t")\n
            tabIndents++;\n
\n
        var spaces = line.match(/^ */)[0].length;\n
        if (spaces && line[spaces] != "\\t") {\n
            var diff = spaces - prevSpaces;\n
            if (diff > 0 && !(prevSpaces%diff) && !(spaces%diff))\n
                changes[diff] = (changes[diff] || 0) + 1;\n
\n
            stats[spaces] = (stats[spaces] || 0) + 1;\n
        }\n
        prevSpaces = spaces;\n
        while (line[line.length - 1] == "\\\\")\n
            line = lines[i++];\n
    }\n
\n
    function getScore(indent) {\n
        var score = 0;\n
        for (var i = indent; i < stats.length; i += indent)\n
            score += stats[i] || 0;\n
        return score;\n
    }\n
\n
    var changesTotal = changes.reduce(function(a,b){return a+b}, 0);\n
\n
    var first = {score: 0, length: 0};\n
    var spaceIndents = 0;\n
    for (var i = 1; i < 12; i++) {\n
        if (i == 1) {\n
            spaceIndents = getScore(i);\n
            var score = 1;\n
        } else\n
            var score = getScore(i) / spaceIndents;\n
\n
        if (changes[i]) {\n
            score += changes[i] / changesTotal;\n
        }\n
\n
        if (score > first.score)\n
            first = {score: score, length: i};\n
    }\n
\n
    if (first.score && first.score > 1.4)\n
        var tabLength = first.length;\n
\n
    if (tabIndents > spaceIndents + 1)\n
        return {ch: "\\t", length: tabLength};\n
\n
    if (spaceIndents + 1 > tabIndents)\n
        return {ch: " ", length: tabLength};\n
};\n
\n
exports.detectIndentation = function(session) {\n
    var lines = session.getLines(0, 1000);\n
    var indent = exports.$detectIndentation(lines) || {};\n
\n
    if (indent.ch)\n
        session.setUseSoftTabs(indent.ch == " ");\n
\n
    if (indent.length)\n
        session.setTabSize(indent.length);\n
    return indent;\n
};\n
\n
exports.trimTrailingSpace = function(session, trimEmpty) {\n
    var doc = session.getDocument();\n
    var lines = doc.getAllLines();\n
    \n
    var min = trimEmpty ? -1 : 0;\n
\n
    for (var i = 0, l=lines.length; i < l; i++) {\n
        var line = lines[i];\n
        var index = line.search(/\\s+$/);\n
\n
        if (index > min)\n
            doc.removeInLine(i, index, line.length);\n
    }\n
};\n
\n
exports.convertIndentation = function(session, ch, len) {\n
    var oldCh = session.getTabString()[0];\n
    var oldLen = session.getTabSize();\n
    if (!len) len = oldLen;\n
    if (!ch) ch = oldCh;\n
\n
    var tab = ch == "\\t" ? ch: lang.stringRepeat(ch, len);\n
\n
    var doc = session.doc;\n
    var lines = doc.getAllLines();\n
\n
    var cache = {};\n
    var spaceCache = {};\n
    for (var i = 0, l=lines.length; i < l; i++) {\n
        var line = lines[i];\n
        var match = line.match(/^\\s*/)[0];\n
        if (match) {\n
            var w = session.$getStringScreenWidth(match)[0];\n
            var tabCount = Math.floor(w/oldLen);\n
            var reminder = w%oldLen;\n
            var toInsert = cache[tabCount] || (cache[tabCount] = lang.stringRepeat(tab, tabCount));\n
            toInsert += spaceCache[reminder] || (spaceCache[reminder] = lang.stringRepeat(" ", reminder));\n
\n
            if (toInsert != match) {\n
                doc.removeInLine(i, 0, match.length);\n
                doc.insertInLine({row: i, column: 0}, toInsert);\n
            }\n
        }\n
    }\n
    session.setTabSize(len);\n
    session.setUseSoftTabs(ch == " ");\n
};\n
\n
exports.$parseStringArg = function(text) {\n
    var indent = {};\n
    if (/t/.test(text))\n
        indent.ch = "\\t";\n
    else if (/s/.test(text))\n
        indent.ch = " ";\n
    var m = text.match(/\\d+/);\n
    if (m)\n
        indent.length = parseInt(m[0], 10);\n
    return indent;\n
};\n
\n
exports.$parseArg = function(arg) {\n
    if (!arg)\n
        return {};\n
    if (typeof arg == "string")\n
        return exports.$parseStringArg(arg);\n
    if (typeof arg.text == "string")\n
        return exports.$parseStringArg(arg.text);\n
    return arg;\n
};\n
\n
exports.commands = [{\n
    name: "detectIndentation",\n
    exec: function(editor) {\n
        exports.detectIndentation(editor.session);\n
    }\n
}, {\n
    name: "trimTrailingSpace",\n
    exec: function(editor) {\n
        exports.trimTrailingSpace(editor.session);\n
    }\n
}, {\n
    name: "convertIndentation",\n
    exec: function(editor, arg) {\n
        var indent = exports.$parseArg(arg);\n
        exports.convertIndentation(editor.session, indent.ch, indent.length);\n
    }\n
}, {\n
    name: "setIndentation",\n
    exec: function(editor, arg) {\n
        var indent = exports.$parseArg(arg);\n
        indent.length && editor.session.setTabSize(indent.length);\n
        indent.ch && editor.session.setUseSoftTabs(indent.ch == " ");\n
    }\n
}];\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>6693</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
