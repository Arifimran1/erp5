<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts77155552.76</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>ext-emmet.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* ***** BEGIN LICENSE BLOCK *****\n
 * Distributed under the BSD license:\n
 *\n
 * Copyright (c) 2010, Ajax.org B.V.\n
 * All rights reserved.\n
 *\n
 * Redistribution and use in source and binary forms, with or without\n
 * modification, are permitted provided that the following conditions are met:\n
 *     * Redistributions of source code must retain the above copyright\n
 *       notice, this list of conditions and the following disclaimer.\n
 *     * Redistributions in binary form must reproduce the above copyright\n
 *       notice, this list of conditions and the following disclaimer in the\n
 *       documentation and/or other materials provided with the distribution.\n
 *     * Neither the name of Ajax.org B.V. nor the\n
 *       names of its contributors may be used to endorse or promote products\n
 *       derived from this software without specific prior written permission.\n
 *\n
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND\n
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\n
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n
 *\n
 * ***** END LICENSE BLOCK ***** */\n
\n
define(\'ace/ext/emmet\', [\'require\', \'exports\', \'module\' , \'ace/keyboard/hash_handler\', \'ace/editor\', \'ace/config\'], function(require, exports, module) {\n
\n
var HashHandler = require("ace/keyboard/hash_handler").HashHandler;\n
var Editor = require("ace/editor").Editor;\n
var emmet;\n
\n
Editor.prototype.indexToPosition = function(index) {\n
    return this.session.doc.indexToPosition(index);\n
};\n
\n
Editor.prototype.positionToIndex = function(pos) {\n
    return this.session.doc.positionToIndex(pos);\n
};\n
function AceEmmetEditor() {}\n
\n
AceEmmetEditor.prototype = {\n
    setupContext: function(editor) {\n
        this.ace = editor;\n
        this.indentation = editor.session.getTabString();\n
        if (!emmet)\n
            emmet = window.emmet;\n
        emmet.require("resources").setVariable("indentation", this.indentation);\n
        this.$syntax = null;\n
        this.$syntax = this.getSyntax();\n
    },\n
    getSelectionRange: function() {\n
        var range = this.ace.getSelectionRange();\n
        return {\n
            start: this.ace.positionToIndex(range.start),\n
            end: this.ace.positionToIndex(range.end)\n
        };\n
    },\n
    createSelection: function(start, end) {\n
        this.ace.selection.setRange({\n
            start: this.ace.indexToPosition(start),\n
            end: this.ace.indexToPosition(end)\n
        });\n
    },\n
    getCurrentLineRange: function() {\n
        var row = this.ace.getCursorPosition().row;\n
        var lineLength = this.ace.session.getLine(row).length;\n
        var index = this.ace.positionToIndex({row: row, column: 0});\n
        return {\n
            start: index,\n
            end: index + lineLength\n
        };\n
    },\n
    getCaretPos: function(){\n
        var pos = this.ace.getCursorPosition();\n
        return this.ace.positionToIndex(pos);\n
    },\n
    setCaretPos: function(index){\n
        var pos = this.ace.indexToPosition(index);\n
        this.ace.clearSelection();\n
        this.ace.selection.moveCursorToPosition(pos);\n
    },\n
    getCurrentLine: function() {\n
        var row = this.ace.getCursorPosition().row;\n
        return this.ace.session.getLine(row);\n
    },\n
    replaceContent: function(value, start, end, noIndent) {\n
        if (end == null)\n
            end = start == null ? this.getContent().length : start;\n
        if (start == null)\n
            start = 0;\n
        var utils = emmet.require("utils");\n
        if (!noIndent) {\n
            value = utils.padString(value, utils.getLinePaddingFromPosition(this.getContent(), start));\n
        }\n
        var tabstopData = emmet.require("tabStops").extract(value, {\n
            escape: function(ch) {\n
                return ch;\n
            }\n
        });\n
\n
        value = tabstopData.text;\n
        var firstTabStop = tabstopData.tabstops[0];\n
\n
        if (firstTabStop) {\n
            firstTabStop.start += start;\n
            firstTabStop.end += start;\n
        } else {\n
            firstTabStop = {\n
                start: value.length + start,\n
                end: value.length + start\n
            };\n
        }\n
\n
        var range = this.ace.getSelectionRange();\n
        range.start = this.ace.indexToPosition(start);\n
        range.end = this.ace.indexToPosition(end);\n
\n
        this.ace.session.replace(range, value);\n
\n
        range.start = this.ace.indexToPosition(firstTabStop.start);\n
        range.end = this.ace.indexToPosition(firstTabStop.end);\n
        this.ace.selection.setRange(range);\n
    },\n
    getContent: function(){\n
        return this.ace.getValue();\n
    },\n
    getSyntax: function() {\n
        if (this.$syntax)\n
            return this.$syntax;\n
        var syntax = this.ace.session.$modeId.split("/").pop();\n
        if (syntax == "html" || syntax == "php") {\n
            var cursor = this.ace.getCursorPosition();\n
            var state = this.ace.session.getState(cursor.row);\n
            if (typeof state != "string")\n
                state = state[0];\n
            if (state) {\n
                state = state.split("-");\n
                if (state.length > 1)\n
                    syntax = state[0];\n
                else if (syntax == "php")\n
                    syntax = "html";\n
            }\n
        }\n
        return syntax;\n
    },\n
    getProfileName: function() {\n
        switch(this.getSyntax()) {\n
          case "css": return "css";\n
          case "xml":\n
          case "xsl":\n
            return "xml";\n
          case "html":\n
            var profile = emmet.require("resources").getVariable("profile");\n
            if (!profile)\n
                profile = this.ace.session.getLines(0,2).join("").search(/<!DOCTYPE[^>]+XHTML/i) != -1 ? "xhtml": "html";\n
            return profile;\n
        }\n
        return "xhtml";\n
    },\n
    prompt: function(title) {\n
        return prompt(title);\n
    },\n
    getSelection: function() {\n
        return this.ace.session.getTextRange();\n
    },\n
    getFilePath: function() {\n
        return "";\n
    }\n
};\n
\n
\n
var keymap = {\n
    expand_abbreviation: {"mac": "ctrl+alt+e", "win": "alt+e"},\n
    match_pair_outward: {"mac": "ctrl+d", "win": "ctrl+,"},\n
    match_pair_inward: {"mac": "ctrl+j", "win": "ctrl+shift+0"},\n
    matching_pair: {"mac": "ctrl+alt+j", "win": "alt+j"},\n
    next_edit_point: "alt+right",\n
    prev_edit_point: "alt+left",\n
    toggle_comment: {"mac": "command+/", "win": "ctrl+/"},\n
    split_join_tag: {"mac": "shift+command+\'", "win": "shift+ctrl+`"},\n
    remove_tag: {"mac": "command+\'", "win": "shift+ctrl+;"},\n
    evaluate_math_expression: {"mac": "shift+command+y", "win": "shift+ctrl+y"},\n
    increment_number_by_1: "ctrl+up",\n
    decrement_number_by_1: "ctrl+down",\n
    increment_number_by_01: "alt+up",\n
    decrement_number_by_01: "alt+down",\n
    increment_number_by_10: {"mac": "alt+command+up", "win": "shift+alt+up"},\n
    decrement_number_by_10: {"mac": "alt+command+down", "win": "shift+alt+down"},\n
    select_next_item: {"mac": "shift+command+.", "win": "shift+ctrl+."},\n
    select_previous_item: {"mac": "shift+command+,", "win": "shift+ctrl+,"},\n
    reflect_css_value: {"mac": "shift+command+r", "win": "shift+ctrl+r"},\n
\n
    encode_decode_data_url: {"mac": "shift+ctrl+d", "win": "ctrl+\'"},\n
    expand_abbreviation_with_tab: "Tab",\n
    wrap_with_abbreviation: {"mac": "shift+ctrl+a", "win": "shift+ctrl+a"}\n
};\n
\n
var editorProxy = new AceEmmetEditor();\n
exports.commands = new HashHandler();\n
exports.runEmmetCommand = function(editor) {\n
    editorProxy.setupContext(editor);\n
    if (editorProxy.getSyntax() == "php")\n
        return false;\n
    var actions = emmet.require("actions");\n
\n
    if (this.action == "expand_abbreviation_with_tab") {\n
        if (!editor.selection.isEmpty())\n
            return false;\n
    }\n
    \n
    if (this.action == "wrap_with_abbreviation") {\n
        return setTimeout(function() {\n
            actions.run("wrap_with_abbreviation", editorProxy);\n
        }, 0);\n
    }\n
    \n
    try {\n
        var result = actions.run(this.action, editorProxy);\n
    } catch(e) {\n
        editor._signal("changeStatus", typeof e == "string" ? e : e.message);\n
        console.log(e);\n
    }\n
    return result;\n
};\n
\n
for (var command in keymap) {\n
    exports.commands.addCommand({\n
        name: "emmet:" + command,\n
        action: command,\n
        bindKey: keymap[command],\n
        exec: exports.runEmmetCommand,\n
        multiSelectAction: "forEach"\n
    });\n
}\n
\n
var onChangeMode = function(e, target) {\n
    var editor = target;\n
    if (!editor)\n
        return;\n
    var modeId = editor.session.$modeId;\n
    var enabled = modeId && /css|less|sass|html|php/.test(modeId);\n
    if (e.enableEmmet === false)\n
        enabled = false;\n
    if (enabled)\n
        editor.keyBinding.addKeyboardHandler(exports.commands);\n
    else\n
        editor.keyBinding.removeKeyboardHandler(exports.commands);\n
};\n
\n
\n
exports.AceEmmetEditor = AceEmmetEditor;\n
require("ace/config").defineOptions(Editor.prototype, "editor", {\n
    enableEmmet: {\n
        set: function(val) {\n
            this[val ? "on" : "removeListener"]("changeMode", onChangeMode);\n
            onChangeMode({enableEmmet: !!val}, this);\n
        },\n
        value: true\n
    }\n
});\n
\n
\n
exports.setCore = function(e) {emmet = e;};\n
});\n
\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>9678</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
