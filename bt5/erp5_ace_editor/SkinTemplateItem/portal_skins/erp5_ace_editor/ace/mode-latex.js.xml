<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts77155559.58</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>mode-latex.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

define(\'ace/mode/latex\', [\'require\', \'exports\', \'module\' , \'ace/lib/oop\', \'ace/mode/text\', \'ace/tokenizer\', \'ace/mode/latex_highlight_rules\', \'ace/mode/folding/latex\', \'ace/range\'], function(require, exports, module) {\n
\n
\n
var oop = require("../lib/oop");\n
var TextMode = require("./text").Mode;\n
var Tokenizer = require("../tokenizer").Tokenizer;\n
var LatexHighlightRules = require("./latex_highlight_rules").LatexHighlightRules;\n
var LatexFoldMode = require("./folding/latex").FoldMode;\n
var Range = require("../range").Range;\n
\n
var Mode = function() {\n
    this.$tokenizer = new Tokenizer(new LatexHighlightRules().getRules());\n
    this.foldingRules = new LatexFoldMode();\n
};\n
oop.inherits(Mode, TextMode);\n
\n
(function() {\n
    this.lineCommentStart = "%";\n
\n
}).call(Mode.prototype);\n
\n
exports.Mode = Mode;\n
\n
});\n
define(\'ace/mode/latex_highlight_rules\', [\'require\', \'exports\', \'module\' , \'ace/lib/oop\', \'ace/mode/text_highlight_rules\'], function(require, exports, module) {\n
\n
\n
var oop = require("../lib/oop");\n
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;\n
\n
var LatexHighlightRules = function() {   \n
    this.$rules = {\n
        "start" : [{\n
            token : "keyword",\n
            regex : "\\\\\\\\(?:[^a-zA-Z]|[a-zA-Z]+)"\n
        }, {\n
            token : "lparen",\n
            regex : "[[({]"\n
        }, {\n
            token : "rparen",\n
            regex : "[\\\\])}]"\n
        }, {\n
            token : "string",\n
            regex : "\\\\$(?:(?:\\\\\\\\.)|(?:[^\\\\$\\\\\\\\]))*?\\\\$"\n
        }, {\n
            token : "comment",\n
            regex : "%.*$"\n
        }]\n
    };\n
};\n
\n
oop.inherits(LatexHighlightRules, TextHighlightRules);\n
\n
exports.LatexHighlightRules = LatexHighlightRules;\n
\n
});\n
\n
define(\'ace/mode/folding/latex\', [\'require\', \'exports\', \'module\' , \'ace/lib/oop\', \'ace/mode/folding/fold_mode\', \'ace/range\', \'ace/token_iterator\'], function(require, exports, module) {\n
\n
\n
var oop = require("../../lib/oop");\n
var BaseFoldMode = require("./fold_mode").FoldMode;\n
var Range = require("../../range").Range;\n
var TokenIterator = require("../../token_iterator").TokenIterator;\n
\n
var FoldMode = exports.FoldMode = function() {};\n
\n
oop.inherits(FoldMode, BaseFoldMode);\n
\n
(function() {\n
\n
    this.foldingStartMarker = /^\\s*\\\\(begin)|(section|subsection)\\b|{\\s*$/;\n
    this.foldingStopMarker = /^\\s*\\\\(end)\\b|^\\s*}/;\n
\n
    this.getFoldWidgetRange = function(session, foldStyle, row) {\n
        var line = session.doc.getLine(row);\n
        var match = this.foldingStartMarker.exec(line);\n
        if (match) {\n
            if (match[1])\n
                return this.latexBlock(session, row, match[0].length - 1);\n
            if (match[2])\n
                return this.latexSection(session, row, match[0].length - 1);\n
\n
            return this.openingBracketBlock(session, "{", row, match.index);\n
        }\n
\n
        var match = this.foldingStopMarker.exec(line);\n
        if (match) {\n
            if (match[1])\n
                return this.latexBlock(session, row, match[0].length - 1);\n
\n
            return this.closingBracketBlock(session, "}", row, match.index + match[0].length);\n
        }\n
    };\n
\n
    this.latexBlock = function(session, row, column) {\n
        var keywords = {\n
            "\\\\begin": 1,\n
            "\\\\end": -1\n
        };\n
\n
        var stream = new TokenIterator(session, row, column);\n
        var token = stream.getCurrentToken();\n
        if (!token || token.type !== "keyword")\n
            return;\n
\n
        var val = token.value;\n
        var dir = keywords[val];\n
\n
        var getType = function() {\n
            var token = stream.stepForward();\n
            var type = token.type == "lparen" ?stream.stepForward().value : "";\n
            if (dir === -1) {\n
                stream.stepBackward();\n
                if (type)\n
                    stream.stepBackward();\n
            }\n
            return type;\n
        };\n
        var stack = [getType()];\n
        var startColumn = dir === -1 ? stream.getCurrentTokenColumn() : session.getLine(row).length;\n
        var startRow = row;\n
\n
        stream.step = dir === -1 ? stream.stepBackward : stream.stepForward;\n
        while(token = stream.step()) {\n
            if (token.type !== "keyword")\n
                continue;\n
            var level = keywords[token.value];\n
            if (!level)\n
                continue;\n
            var type = getType();\n
            if (level === dir)\n
                stack.unshift(type);\n
            else if (stack.shift() !== type || !stack.length)\n
                break;\n
        }\n
\n
        if (stack.length)\n
            return;\n
\n
        var row = stream.getCurrentTokenRow();\n
        if (dir === -1)\n
            return new Range(row, session.getLine(row).length, startRow, startColumn);\n
        stream.stepBackward();\n
        return new Range(startRow, startColumn, row, stream.getCurrentTokenColumn());\n
    };\n
\n
    this.latexSection = function(session, row, column) {\n
        var keywords = ["\\\\subsection", "\\\\section", "\\\\begin", "\\\\end"];\n
\n
        var stream = new TokenIterator(session, row, column);\n
        var token = stream.getCurrentToken();\n
        if (!token || token.type != "keyword")\n
            return;\n
\n
        var startLevel = keywords.indexOf(token.value);\n
        var stackDepth = 0\n
        var endRow = row;\n
\n
        while(token = stream.stepForward()) {\n
            if (token.type !== "keyword")\n
                continue;\n
            var level = keywords.indexOf(token.value);\n
\n
            if (level >= 2) {\n
                if (!stackDepth)\n
                    endRow = stream.getCurrentTokenRow() - 1;\n
                stackDepth += level == 2 ? 1 : - 1;\n
                if (stackDepth < 0)\n
                    break\n
            } else if (level >= startLevel)\n
                break;\n
        }\n
\n
        if (!stackDepth)\n
            endRow = stream.getCurrentTokenRow() - 1;\n
\n
        while (endRow > row && !/\\S/.test(session.getLine(endRow)))\n
            endRow--;\n
\n
        return new Range(\n
            row, session.getLine(row).length,\n
            endRow, session.getLine(endRow).length\n
        );\n
    };\n
\n
}).call(FoldMode.prototype);\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>6040</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
