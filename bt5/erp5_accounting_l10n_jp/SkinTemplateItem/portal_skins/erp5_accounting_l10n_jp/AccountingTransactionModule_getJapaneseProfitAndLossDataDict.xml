<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string>portal = context.getPortalObject()\n
portal_simulation = context.portal_simulation\n
\n
gap_root = context.portal_categories.gap.jp.afbe\n
\n
portal_type = context.getPortalAccountingMovementTypeList()\n
\n
request = context.REQUEST\n
\n
at_date = request[\'at_date\'].latestTime()\n
simulation_state = request["simulation_state"]\n
section_uid = context.Base_getSectionUidListForSectionCategory(request["section_category"], request["section_category_strict"])\n
\n
def getGapCategoryValueList(gap_path_list):\n
  result = []\n
  for gap_path in gap_path_list:\n
    category = gap_root.restrictedTraverse(gap_path)\n
    subcategory_list = category.getCategoryChildValueList(include_if_child=0)\n
    if not subcategory_list:\n
      result.append(category)\n
    else:\n
      for subcategory in subcategory_list:\n
        result.append(subcategory)\n
  return result\n
\n
def getInventory(node_category_value):\n
  return portal_simulation.getInventoryAssetPrice(section_uid=section_uid, simulation_state=simulation_state, function=request.get("function") or None, project=request.get("project") or None, at_date=at_date, portal_type=portal_type, node_category=node_category_value.getRelativeUrl())\n
\n
data_dict = {}\n
\n
data_dict[\'data_list\'] = data_list = []\n
data_dict[\'company_name\'] = portal.portal_categories.restrictedTraverse(request["section_category"]).getTranslatedTitle()\n
data_dict[\'date\'] = \'%d-%d-%d\' % (at_date.year(), at_date.month(), at_date.day())\n
\n
def addItem(section_title=\'\', group_title=\'\', title=\'\', amount=None):\n
  data_list.append({\'section_title\':section_title, \'group_title\':group_title, \'title\':title, \'amount\':amount})\n
\n
def addGapCategoryItem(gap_path_list):\n
  total_amount = 0\n
  for category in getGapCategoryValueList(gap_path_list):\n
    amount = getInventory(category)\n
    addItem(\'\', \'\', category.getTitle(), amount)\n
    total_amount += amount\n
  addItem(title=\'Total\', amount=total_amount)\n
  return total_amount\n
\n
sale_gap_path_list = [\'7/70\']\n
cos_gap_path_list = [\'6/60\']\n
non_operating_income_gap_path_list = [\'7/75\', \'7/76\', \'7/78\']\n
non_operating_expense_gap_path_list = [\'6/65\', \'6/66\']\n
sga_gap_path_list = [\'6/61\', \'6/62\', \'6/63/635\', \'6/64\', \'6/68\']\n
extraordinary_income_gap_path_list = [\'7/77\']\n
extraordinary_expense_gap_path_list = [\'6/67\']\n
corporation_tax_gap_path_list = [\'6/63/636\']\n
corporation_tax_adjustment_gap_path_list = [\'1/14\']\n
\n
\n
\n
addItem(\'Sales\')\n
sale_amount = addGapCategoryItem([\'7/70\'])\n
addItem(\'Cost of Sales\')\n
cost_of_sale_amount = addGapCategoryItem([\'6/60\'])\n
\n
addItem()\n
\n
gross_profit_amount = sale_amount - cost_of_sale_amount\n
addItem(\'Gross Profit\', amount=gross_profit_amount)\n
\n
addItem()\n
\n
addItem(\'Selling and General Administrative Expenses\')\n
sga_amount = addGapCategoryItem([\'6/61\', \'6/62\', \'6/63/635\', \'6/64\', \'6/68\'])\n
\n
addItem()\n
\n
operating_profit_amount = gross_profit_amount - sga_amount\n
addItem(\'Operating Profit\', amount=operating_profit_amount)\n
\n
addItem()\n
\n
addItem(\'Non-Operating Income\')\n
non_operating_income_amount = addGapCategoryItem([\'7/75\', \'7/76\', \'7/78\'])\n
addItem(\'Non-Operating Expense\')\n
non_operating_expense_amount = addGapCategoryItem([\'6/65\', \'6/66\'])\n
\n
addItem()\n
\n
ordinary_profit_amount = operating_profit_amount + non_operating_income_amount - non_operating_expense_amount\n
addItem(\'Ordinary Profit\', amount=ordinary_profit_amount)\n
\n
addItem()\n
\n
addItem(\'Extraordinary Income\')\n
extraordinary_income_amount = addGapCategoryItem([\'7/77\'])\n
addItem(\'Extraordinary Expense\')\n
extraordinary_expense_amount = addGapCategoryItem([\'6/67\'])\n
\n
addItem()\n
\n
pretax_income_amount = ordinary_profit_amount + extraordinary_income_amount - extraordinary_expense_amount\n
addItem(\'Pretax Income\', amount=pretax_income_amount)\n
\n
addItem()\n
\n
addItem(\'Corporation Tax\')\n
corporation_tax_amount = addGapCategoryItem([\'6/63/636\'])\n
addItem(\'Corporation Tax Adjustment\')\n
corporation_tax_adjustment_amount = addGapCategoryItem([\'1/14\'])\n
\n
addItem()\n
\n
net_income_amount = pretax_income_amount - corporation_tax_amount + corporation_tax_adjustment_amount\n
addItem(\'Net Income\', amount=net_income_amount)\n
\n
return data_dict\n
</string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>AccountingTransactionModule_getJapaneseProfitAndLossDataDict</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
