<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <global name="File" module="OFS.Image"/>
        <tuple/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts64155407.04</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>ui.slider.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/x-javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/*\n
 * jQuery UI Slider 1.7.2\n
 *\n
 * Copyright (c) 2009 AUTHORS.txt (http://jqueryui.com/about)\n
 * Dual licensed under the MIT (MIT-LICENSE.txt)\n
 * and GPL (GPL-LICENSE.txt) licenses.\n
 *\n
 * http://docs.jquery.com/UI/Slider\n
 *\n
 * Depends:\n
 *\tui.core.js\n
 */\n
\n
(function($) {\n
\n
$.widget("ui.slider", $.extend({}, $.ui.mouse, {\n
\n
\t_init: function() {\n
\n
\t\tvar self = this, o = this.options;\n
\t\tthis._keySliding = false;\n
\t\tthis._handleIndex = null;\n
\t\tthis._detectOrientation();\n
\t\tthis._mouseInit();\n
\n
\t\tthis.element\n
\t\t\t.addClass("ui-slider"\n
\t\t\t\t+ " ui-slider-" + this.orientation\n
\t\t\t\t+ " ui-widget"\n
\t\t\t\t+ " ui-widget-content"\n
\t\t\t\t+ " ui-corner-all");\n
\n
\t\tthis.range = $([]);\n
\n
\t\tif (o.range) {\n
\n
\t\t\tif (o.range === true) {\n
\t\t\t\tthis.range = $(\'<div></div>\');\n
\t\t\t\tif (!o.values) o.values = [this._valueMin(), this._valueMin()];\n
\t\t\t\tif (o.values.length && o.values.length != 2) {\n
\t\t\t\t\to.values = [o.values[0], o.values[0]];\n
\t\t\t\t}\n
\t\t\t} else {\n
\t\t\t\tthis.range = $(\'<div></div>\');\n
\t\t\t}\n
\n
\t\t\tthis.range\n
\t\t\t\t.appendTo(this.element)\n
\t\t\t\t.addClass("ui-slider-range");\n
\n
\t\t\tif (o.range == "min" || o.range == "max") {\n
\t\t\t\tthis.range.addClass("ui-slider-range-" + o.range);\n
\t\t\t}\n
\n
\t\t\t// note: this isn\'t the most fittingly semantic framework class for this element,\n
\t\t\t// but worked best visually with a variety of themes\n
\t\t\tthis.range.addClass("ui-widget-header");\n
\n
\t\t}\n
\n
\t\tif ($(".ui-slider-handle", this.element).length == 0)\n
\t\t\t$(\'<a href="#"></a>\')\n
\t\t\t\t.appendTo(this.element)\n
\t\t\t\t.addClass("ui-slider-handle");\n
\n
\t\tif (o.values && o.values.length) {\n
\t\t\twhile ($(".ui-slider-handle", this.element).length < o.values.length)\n
\t\t\t\t$(\'<a href="#"></a>\')\n
\t\t\t\t\t.appendTo(this.element)\n
\t\t\t\t\t.addClass("ui-slider-handle");\n
\t\t}\n
\n
\t\tthis.handles = $(".ui-slider-handle", this.element)\n
\t\t\t.addClass("ui-state-default"\n
\t\t\t\t+ " ui-corner-all");\n
\n
\t\tthis.handle = this.handles.eq(0);\n
\n
\t\tthis.handles.add(this.range).filter("a")\n
\t\t\t.click(function(event) {\n
\t\t\t\tevent.preventDefault();\n
\t\t\t})\n
\t\t\t.hover(function() {\n
\t\t\t\tif (!o.disabled) {\n
\t\t\t\t\t$(this).addClass(\'ui-state-hover\');\n
\t\t\t\t}\n
\t\t\t}, function() {\n
\t\t\t\t$(this).removeClass(\'ui-state-hover\');\n
\t\t\t})\n
\t\t\t.focus(function() {\n
\t\t\t\tif (!o.disabled) {\n
\t\t\t\t\t$(".ui-slider .ui-state-focus").removeClass(\'ui-state-focus\'); $(this).addClass(\'ui-state-focus\');\n
\t\t\t\t} else {\n
\t\t\t\t\t$(this).blur();\n
\t\t\t\t}\n
\t\t\t})\n
\t\t\t.blur(function() {\n
\t\t\t\t$(this).removeClass(\'ui-state-focus\');\n
\t\t\t});\n
\n
\t\tthis.handles.each(function(i) {\n
\t\t\t$(this).data("index.ui-slider-handle", i);\n
\t\t});\n
\n
\t\tthis.handles.keydown(function(event) {\n
\n
\t\t\tvar ret = true;\n
\n
\t\t\tvar index = $(this).data("index.ui-slider-handle");\n
\n
\t\t\tif (self.options.disabled)\n
\t\t\t\treturn;\n
\n
\t\t\tswitch (event.keyCode) {\n
\t\t\t\tcase $.ui.keyCode.HOME:\n
\t\t\t\tcase $.ui.keyCode.END:\n
\t\t\t\tcase $.ui.keyCode.UP:\n
\t\t\t\tcase $.ui.keyCode.RIGHT:\n
\t\t\t\tcase $.ui.keyCode.DOWN:\n
\t\t\t\tcase $.ui.keyCode.LEFT:\n
\t\t\t\t\tret = false;\n
\t\t\t\t\tif (!self._keySliding) {\n
\t\t\t\t\t\tself._keySliding = true;\n
\t\t\t\t\t\t$(this).addClass("ui-state-active");\n
\t\t\t\t\t\tself._start(event, index);\n
\t\t\t\t\t}\n
\t\t\t\t\tbreak;\n
\t\t\t}\n
\n
\t\t\tvar curVal, newVal, step = self._step();\n
\t\t\tif (self.options.values && self.options.values.length) {\n
\t\t\t\tcurVal = newVal = self.values(index);\n
\t\t\t} else {\n
\t\t\t\tcurVal = newVal = self.value();\n
\t\t\t}\n
\n
\t\t\tswitch (event.keyCode) {\n
\t\t\t\tcase $.ui.keyCode.HOME:\n
\t\t\t\t\tnewVal = self._valueMin();\n
\t\t\t\t\tbreak;\n
\t\t\t\tcase $.ui.keyCode.END:\n
\t\t\t\t\tnewVal = self._valueMax();\n
\t\t\t\t\tbreak;\n
\t\t\t\tcase $.ui.keyCode.UP:\n
\t\t\t\tcase $.ui.keyCode.RIGHT:\n
\t\t\t\t\tif(curVal == self._valueMax()) return;\n
\t\t\t\t\tnewVal = curVal + step;\n
\t\t\t\t\tbreak;\n
\t\t\t\tcase $.ui.keyCode.DOWN:\n
\t\t\t\tcase $.ui.keyCode.LEFT:\n
\t\t\t\t\tif(curVal == self._valueMin()) return;\n
\t\t\t\t\tnewVal = curVal - step;\n
\t\t\t\t\tbreak;\n
\t\t\t}\n
\n
\t\t\tself._slide(event, index, newVal);\n
\n
\t\t\treturn ret;\n
\n
\t\t}).keyup(function(event) {\n
\n
\t\t\tvar index = $(this).data("index.ui-slider-handle");\n
\n
\t\t\tif (self._keySliding) {\n
\t\t\t\tself._stop(event, index);\n
\t\t\t\tself._change(event, index);\n
\t\t\t\tself._keySliding = false;\n
\t\t\t\t$(this).removeClass("ui-state-active");\n
\t\t\t}\n
\n
\t\t});\n
\n
\t\tthis._refreshValue();\n
\n
\t},\n
\n
\tdestroy: function() {\n
\n
\t\tthis.handles.remove();\n
\t\tthis.range.remove();\n
\n
\t\tthis.element\n
\t\t\t.removeClass("ui-slider"\n
\t\t\t\t+ " ui-slider-horizontal"\n
\t\t\t\t+ " ui-slider-vertical"\n
\t\t\t\t+ " ui-slider-disabled"\n
\t\t\t\t+ " ui-widget"\n
\t\t\t\t+ " ui-widget-content"\n
\t\t\t\t+ " ui-corner-all")\n
\t\t\t.removeData("slider")\n
\t\t\t.unbind(".slider");\n
\n
\t\tthis._mouseDestroy();\n
\n
\t},\n
\n
\t_mouseCapture: function(event) {\n
\n
\t\tvar o = this.options;\n
\n
\t\tif (o.disabled)\n
\t\t\treturn false;\n
\n
\t\tthis.elementSize = {\n
\t\t\twidth: this.element.outerWidth(),\n
\t\t\theight: this.element.outerHeight()\n
\t\t};\n
\t\tthis.elementOffset = this.element.offset();\n
\n
\t\tvar position = { x: event.pageX, y: event.pageY };\n
\t\tvar normValue = this._normValueFromMouse(position);\n
\n
\t\tvar distance = this._valueMax() - this._valueMin() + 1, closestHandle;\n
\t\tvar self = this, index;\n
\t\tthis.handles.each(function(i) {\n
\t\t\tvar thisDistance = Math.abs(normValue - self.values(i));\n
\t\t\tif (distance > thisDistance) {\n
\t\t\t\tdistance = thisDistance;\n
\t\t\t\tclosestHandle = $(this);\n
\t\t\t\tindex = i;\n
\t\t\t}\n
\t\t});\n
\n
\t\t// workaround for bug #3736 (if both handles of a range are at 0,\n
\t\t// the first is always used as the one with least distance,\n
\t\t// and moving it is obviously prevented by preventing negative ranges)\n
\t\tif(o.range == true && this.values(1) == o.min) {\n
\t\t\tclosestHandle = $(this.handles[++index]);\n
\t\t}\n
\n
\t\tthis._start(event, index);\n
\n
\t\tself._handleIndex = index;\n
\n
\t\tclosestHandle\n
\t\t\t.addClass("ui-state-active")\n
\t\t\t.focus();\n
\t\t\n
\t\tvar offset = closestHandle.offset();\n
\t\tvar mouseOverHandle = !$(event.target).parents().andSelf().is(\'.ui-slider-handle\');\n
\t\tthis._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {\n
\t\t\tleft: event.pageX - offset.left - (closestHandle.width() / 2),\n
\t\t\ttop: event.pageY - offset.top\n
\t\t\t\t- (closestHandle.height() / 2)\n
\t\t\t\t- (parseInt(closestHandle.css(\'borderTopWidth\'),10) || 0)\n
\t\t\t\t- (parseInt(closestHandle.css(\'borderBottomWidth\'),10) || 0)\n
\t\t\t\t+ (parseInt(closestHandle.css(\'marginTop\'),10) || 0)\n
\t\t};\n
\n
\t\tnormValue = this._normValueFromMouse(position);\n
\t\tthis._slide(event, index, normValue);\n
\t\treturn true;\n
\n
\t},\n
\n
\t_mouseStart: function(event) {\n
\t\treturn true;\n
\t},\n
\n
\t_mouseDrag: function(event) {\n
\n
\t\tvar position = { x: event.pageX, y: event.pageY };\n
\t\tvar normValue = this._normValueFromMouse(position);\n
\t\t\n
\t\tthis._slide(event, this._handleIndex, normValue);\n
\n
\t\treturn false;\n
\n
\t},\n
\n
\t_mouseStop: function(event) {\n
\n
\t\tthis.handles.removeClass("ui-state-active");\n
\t\tthis._stop(event, this._handleIndex);\n
\t\tthis._change(event, this._handleIndex);\n
\t\tthis._handleIndex = null;\n
\t\tthis._clickOffset = null;\n
\n
\t\treturn false;\n
\n
\t},\n
\t\n
\t_detectOrientation: function() {\n
\t\tthis.orientation = this.options.orientation == \'vertical\' ? \'vertical\' : \'horizontal\';\n
\t},\n
\n
\t_normValueFromMouse: function(position) {\n
\n
\t\tvar pixelTotal, pixelMouse;\n
\t\tif (\'horizontal\' == this.orientation) {\n
\t\t\tpixelTotal = this.elementSize.width;\n
\t\t\tpixelMouse = position.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0);\n
\t\t} else {\n
\t\t\tpixelTotal = this.elementSize.height;\n
\t\t\tpixelMouse = position.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0);\n
\t\t}\n
\n
\t\tvar percentMouse = (pixelMouse / pixelTotal);\n
\t\tif (percentMouse > 1) percentMouse = 1;\n
\t\tif (percentMouse < 0) percentMouse = 0;\n
\t\tif (\'vertical\' == this.orientation)\n
\t\t\tpercentMouse = 1 - percentMouse;\n
\n
\t\tvar valueTotal = this._valueMax() - this._valueMin(),\n
\t\t\tvalueMouse = percentMouse * valueTotal,\n
\t\t\tvalueMouseModStep = valueMouse % this.options.step,\n
\t\t\tnormValue = this._valueMin() + valueMouse - valueMouseModStep;\n
\n
\t\tif (valueMouseModStep > (this.options.step / 2))\n
\t\t\tnormValue += this.options.step;\n
\n
\t\t// Since JavaScript has problems with large floats, round\n
\t\t// the final value to 5 digits after the decimal point (see #4124)\n
\t\treturn parseFloat(normValue.toFixed(5));\n
\n
\t},\n
\n
\t_start: function(event, index) {\n
\t\tvar uiHash = {\n
\t\t\thandle: this.handles[index],\n
\t\t\tvalue: this.value()\n
\t\t};\n
\t\tif (this.options.values && this.options.values.length) {\n
\t\t\tuiHash.value = this.values(index);\n
\t\t\tuiHash.values = this.values();\n
\t\t}\n
\t\tthis._trigger("start", event, uiHash);\n
\t},\n
\n
\t_slide: function(event, index, newVal) {\n
\n
\t\tvar handle = this.handles[index];\n
\n
\t\tif (this.options.values && this.options.values.length) {\n
\n
\t\t\tvar otherVal = this.values(index ? 0 : 1);\n
\n
\t\t\tif ((this.options.values.length == 2 && this.options.range === true) && \n
\t\t\t\t((index == 0 && newVal > otherVal) || (index == 1 && newVal < otherVal))){\n
 \t\t\t\tnewVal = otherVal;\n
\t\t\t}\n
\n
\t\t\tif (newVal != this.values(index)) {\n
\t\t\t\tvar newValues = this.values();\n
\t\t\t\tnewValues[index] = newVal;\n
\t\t\t\t// A slide can be canceled by returning false from the slide callback\n
\t\t\t\tvar allowed = this._trigger("slide", event, {\n
\t\t\t\t\thandle: this.handles[index],\n
\t\t\t\t\tvalue: newVal,\n
\t\t\t\t\tvalues: newValues\n
\t\t\t\t});\n
\t\t\t\tvar otherVal = this.values(index ? 0 : 1);\n
\t\t\t\tif (allowed !== false) {\n
\t\t\t\t\tthis.values(index, newVal, ( event.type == \'mousedown\' && this.options.animate ), true);\n
\t\t\t\t}\n
\t\t\t}\n
\n
\t\t} else {\n
\n
\t\t\tif (newVal != this.value()) {\n
\t\t\t\t// A slide can be canceled by returning false from the slide callback\n
\t\t\t\tvar allowed = this._trigger("slide", event, {\n
\t\t\t\t\thandle: this.handles[index],\n
\t\t\t\t\tvalue: newVal\n
\t\t\t\t});\n
\t\t\t\tif (allowed !== false) {\n
\t\t\t\t\tthis._setData(\'value\', newVal, ( event.type == \'mousedown\' && this.options.animate ));\n
\t\t\t\t}\n
\t\t\t\t\t\n
\t\t\t}\n
\n
\t\t}\n
\n
\t},\n
\n
\t_stop: function(event, index) {\n
\t\tvar uiHash = {\n
\t\t\thandle: this.handles[index],\n
\t\t\tvalue: this.value()\n
\t\t};\n
\t\tif (this.options.values && this.options.values.length) {\n
\t\t\tuiHash.value = this.values(index);\n
\t\t\tuiHash.values = this.values();\n
\t\t}\n
\t\tthis._trigger("stop", event, uiHash);\n
\t},\n
\n
\t_change: function(event, index) {\n
\t\tvar uiHash = {\n
\t\t\thandle: this.handles[index],\n
\t\t\tvalue: this.value()\n
\t\t};\n
\t\tif (this.options.values && this.options.values.length) {\n
\t\t\tuiHash.value = this.values(index);\n
\t\t\tuiHash.values = this.values();\n
\t\t}\n
\t\tthis._trigger("change", event, uiHash);\n
\t},\n
\n
\tvalue: function(newValue) {\n
\n
\t\tif (arguments.length) {\n
\t\t\tthis._setData("value", newValue);\n
\t\t\tthis._change(null, 0);\n
\t\t}\n
\n
\t\treturn this._value();\n
\n
\t},\n
\n
\tvalues: function(index, newValue, animated, noPropagation) {\n
\n
\t\tif (arguments.length > 1) {\n
\t\t\tthis.options.values[index] = newValue;\n
\t\t\tthis._refreshValue(animated);\n
\t\t\tif(!noPropagation) this._change(null, index);\n
\t\t}\n
\n
\t\tif (arguments.length) {\n
\t\t\tif (this.options.values && this.options.values.length) {\n
\t\t\t\treturn this._values(index);\n
\t\t\t} else {\n
\t\t\t\treturn this.value();\n
\t\t\t}\n
\t\t} else {\n
\t\t\treturn this._values();\n
\t\t}\n
\n
\t},\n
\n
\t_setData: function(key, value, animated) {\n
\n
\t\t$.widget.prototype._setData.apply(this, arguments);\n
\n
\t\tswitch (key) {\n
\t\t\tcase \'disabled\':\n
\t\t\t\tif (value) {\n
\t\t\t\t\tthis.handles.filter(".ui-state-focus").blur();\n
\t\t\t\t\tthis.handles.removeClass("ui-state-hover");\n
\t\t\t\t\tthis.handles.attr("disabled", "disabled");\n
\t\t\t\t} else {\n
\t\t\t\t\tthis.handles.removeAttr("disabled");\n
\t\t\t\t}\n
\t\t\tcase \'orientation\':\n
\n
\t\t\t\tthis._detectOrientation();\n
\t\t\t\t\n
\t\t\t\tthis.element\n
\t\t\t\t\t.removeClass("ui-slider-horizontal ui-slider-vertical")\n
\t\t\t\t\t.addClass("ui-slider-" + this.orientation);\n
\t\t\t\tthis._refreshValue(animated);\n
\t\t\t\tbreak;\n
\t\t\tcase \'value\':\n
\t\t\t\tthis._refreshValue(animated);\n
\t\t\t\tbreak;\n
\t\t}\n
\n
\t},\n
\n
\t_step: function() {\n
\t\tvar step = this.options.step;\n
\t\treturn step;\n
\t},\n
\n
\t_value: function() {\n
\n
\t\tvar val = this.options.value;\n
\t\tif (val < this._valueMin()) val = this._valueMin();\n
\t\tif (val > this._valueMax()) val = this._valueMax();\n
\n
\t\treturn val;\n
\n
\t},\n
\n
\t_values: function(index) {\n
\n
\t\tif (arguments.length) {\n
\t\t\tvar val = this.options.values[index];\n
\t\t\tif (val < this._valueMin()) val = this._valueMin();\n
\t\t\tif (val > this._valueMax()) val = this._valueMax();\n
\n
\t\t\treturn val;\n
\t\t} else {\n
\t\t\treturn this.options.values;\n
\t\t}\n
\n
\t},\n
\n
\t_valueMin: function() {\n
\t\tvar valueMin = this.options.min;\n
\t\treturn valueMin;\n
\t},\n
\n
\t_valueMax: function() {\n
\t\tvar valueMax = this.options.max;\n
\t\treturn valueMax;\n
\t},\n
\n
\t_refreshValue: function(animate) {\n
\n
\t\tvar oRange = this.options.range, o = this.options, self = this;\n
\n
\t\tif (this.options.values && this.options.values.length) {\n
\t\t\tvar vp0, vp1;\n
\t\t\tthis.handles.each(function(i, j) {\n
\t\t\t\tvar valPercent = (self.values(i) - self._valueMin()) / (self._valueMax() - self._valueMin()) * 100;\n
\t\t\t\tvar _set = {}; _set[self.orientation == \'horizontal\' ? \'left\' : \'bottom\'] = valPercent + \'%\';\n
\t\t\t\t$(this).stop(1,1)[animate ? \'animate\' : \'css\'](_set, o.animate);\n
\t\t\t\tif (self.options.range === true) {\n
\t\t\t\t\tif (self.orientation == \'horizontal\') {\n
\t\t\t\t\t\t(i == 0) && self.range.stop(1,1)[animate ? \'animate\' : \'css\']({ left: valPercent + \'%\' }, o.animate);\n
\t\t\t\t\t\t(i == 1) && self.range[animate ? \'animate\' : \'css\']({ width: (valPercent - lastValPercent) + \'%\' }, { queue: false, duration: o.animate });\n
\t\t\t\t\t} else {\n
\t\t\t\t\t\t(i == 0) && self.range.stop(1,1)[animate ? \'animate\' : \'css\']({ bottom: (valPercent) + \'%\' }, o.animate);\n
\t\t\t\t\t\t(i == 1) && self.range[animate ? \'animate\' : \'css\']({ height: (valPercent - lastValPercent) + \'%\' }, { queue: false, duration: o.animate });\n
\t\t\t\t\t}\n
\t\t\t\t}\n
\t\t\t\tlastValPercent = valPercent;\n
\t\t\t});\n
\t\t} else {\n
\t\t\tvar value = this.value(),\n
\t\t\t\tvalueMin = this._valueMin(),\n
\t\t\t\tvalueMax = this._valueMax(),\n
\t\t\t\tvalPercent = valueMax != valueMin\n
\t\t\t\t\t? (value - valueMin) / (valueMax - valueMin) * 100\n
\t\t\t\t\t: 0;\n
\t\t\tvar _set = {}; _set[self.orientation == \'horizontal\' ? \'left\' : \'bottom\'] = valPercent + \'%\';\n
\t\t\tthis.handle.stop(1,1)[animate ? \'animate\' : \'css\'](_set, o.animate);\n
\n
\t\t\t(oRange == "min") && (this.orientation == "horizontal") && this.range.stop(1,1)[animate ? \'animate\' : \'css\']({ width: valPercent + \'%\' }, o.animate);\n
\t\t\t(oRange == "max") && (this.orientation == "horizontal") && this.range[animate ? \'animate\' : \'css\']({ width: (100 - valPercent) + \'%\' }, { queue: false, duration: o.animate });\n
\t\t\t(oRange == "min") && (this.orientation == "vertical") && this.range.stop(1,1)[animate ? \'animate\' : \'css\']({ height: valPercent + \'%\' }, o.animate);\n
\t\t\t(oRange == "max") && (this.orientation == "vertical") && this.range[animate ? \'animate\' : \'css\']({ height: (100 - valPercent) + \'%\' }, { queue: false, duration: o.animate });\n
\t\t}\n
\n
\t}\n
\t\n
}));\n
\n
$.extend($.ui.slider, {\n
\tgetter: "value values",\n
\tversion: "1.7.2",\n
\teventPrefix: "slide",\n
\tdefaults: {\n
\t\tanimate: false,\n
\t\tdelay: 0,\n
\t\tdistance: 0,\n
\t\tmax: 100,\n
\t\tmin: 0,\n
\t\torientation: \'horizontal\',\n
\t\trange: false,\n
\t\tstep: 1,\n
\t\tvalue: 0,\n
\t\tvalues: null\n
\t}\n
});\n
\n
})(jQuery);\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <long>14380</long> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
