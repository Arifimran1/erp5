<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <global name="ZopePageTemplate" module="Products.PageTemplates.ZopePageTemplate"/>
        <tuple/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_text</string> </key>
            <value> <string encoding="cdata"><![CDATA[

\n
<ul class="UIAPIPlugin-toc">\n
<li><a href="#overview">Overview</a></li>\n
<li><a href="#options">Options</a></li>\n
<li><a href="#events">Events</a></li>\n
<li><a href="#methods">Methods</a></li>\n
<li><a href="#theming">Theming</a></li>\n
</ul>\n
<div class="UIAPIPlugin">\n
  <h1>jQuery UI Slider</h1>\n
  <div id="overview">\n
    <h2 class="top-header">Overview</h2>\n
    <div id="overview-main">\n
        <p>The jQuery UI Slider plugin makes selected elements into sliders. There are various options such as multiple handles, and ranges. The handle can be moved with the mouse or the arrow keys.</p>\n
<p>All callbacks receive two arguments: The original browser event and a prepared ui object, view below for a documentation of this object (if you name your second argument \'ui\'):\n
</p>\n
<ul>\n
  <li><b>ui.handle</b>: DOMElement - the current focused handle\n
  <li><b>ui.value</b>: Integer - the current handle\'s value\n
</ul>\n
    </div>\n
    <div id="overview-dependencies">\n
        <h3>Dependencies</h3>\n
        <ul>\n
<li>UI Core</li>\n
</ul>\n
    </div>\n
    <div id="overview-example">\n
        <h3>Example</h3>\n
        <div id="overview-example" class="example">\n
<ul><li><a href="#demo"><span>Demo</span></a></li><li><a href="#source"><span>View Source</span></a></li></ul>\n
<p><div id="demo" class="tabs-container" rel="">\n
A simple jQuery UI Slider.<br />\n
</p>\n
<pre>$(&quot;#slider&quot;).slider();\n
</pre>\n
<p></div><div id="source" class="tabs-container">\n
</p>\n
<pre>&lt;!DOCTYPE html&gt;\n
&lt;html&gt;\n
&lt;head&gt;\n
  &lt;link type=&quot;text/css&quot; href=&quot;http://jqueryui.com/latest/themes/base/ui.all.css&quot; rel=&quot;stylesheet&quot; /&gt;\n
  &lt;script type=&quot;text/javascript&quot; src=&quot;http://jqueryui.com/latest/jquery-1.3.2.js&quot;&gt;&lt;/script&gt;\n
  &lt;script type=&quot;text/javascript&quot; src=&quot;http://jqueryui.com/latest/ui/ui.core.js&quot;&gt;&lt;/script&gt;\n
  &lt;script type=&quot;text/javascript&quot; src=&quot;http://jqueryui.com/latest/ui/ui.slider.js&quot;&gt;&lt;/script&gt;\n
  &lt;style type=&quot;text/css&quot;&gt;\n
    #slider { margin: 10px; }\n
  &lt;/style&gt;\n
  &lt;script type="text/javascript"&gt;\n
  $(document).ready(function(){\n
    $(&quot;#slider&quot;).slider();\n
  });\n
  &lt;/script&gt;\n
&lt;/head&gt;\n
&lt;body style="font-size:62.5%;"&gt;\n
  \n
&lt;div id=&quot;slider&quot;&gt;&lt;/div&gt;\n
\n
&lt;/body&gt;\n
&lt;/html&gt;\n
</pre>\n
<p></div>\n
</p><p></div>\n
    </div>\n
  </div>\n
  <div id="options">\n
    <h2 class="top-header">Options</h2>\n
    <ul class="options-list">\n
      \n
<li class="option" id="option-animate">\n
  <div class="option-header">\n
    <h3 class="option-name"><a href="#option-animate">animate</a></h3>\n
    <dl>\n
      <dt class="option-type-label">Type:</dt>\n
        <dd class="option-type">Boolean</dd>\n
      \n
      <dt class="option-default-label">Default:</dt>\n
        <dd class="option-default">false</dd>\n
      \n
    </dl>\n
  </div>\n
  <div class="option-description">\n
    <p>Whether to slide handle smoothly when user click outside handle on the bar.</p>\n
  </div>\n
  <div class="option-examples">\n
    <h4>Code examples</h4>\n
    <dl class="option-examples-list">\n
    \n
<dt>\n
  Initialize a slider with the <code>animate</code> option specified.\n
</dt>\n
<dd>\n
<pre><code>$(\'.selector\').slider({ animate: true });</code></pre>\n
</dd>\n
\n
    \n
<dt>\n
  Get or set the <code>animate</code> option, after init.\n
</dt>\n
<dd>\n
<pre><code>//getter\n
var animate = $(\'.selector\').slider(\'option\', \'animate\');\n
//setter\n
$(\'.selector\').slider(\'option\', \'animate\', true);</code></pre>\n
</dd>\n
\n
    </dl>\n
  </div>\n
</li>\n
\n
\n
<li class="option" id="option-max">\n
  <div class="option-header">\n
    <h3 class="option-name"><a href="#option-max">max</a></h3>\n
    <dl>\n
      <dt class="option-type-label">Type:</dt>\n
        <dd class="option-type">Number</dd>\n
      \n
      <dt class="option-default-label">Default:</dt>\n
        <dd class="option-default">100</dd>\n
      \n
    </dl>\n
  </div>\n
  <div class="option-description">\n
    <p>The maximum value of the slider.</p>\n
  </div>\n
  <div class="option-examples">\n
    <h4>Code examples</h4>\n
    <dl class="option-examples-list">\n
    \n
<dt>\n
  Initialize a slider with the <code>max</code> option specified.\n
</dt>\n
<dd>\n
<pre><code>$(\'.selector\').slider({ max: 7 });</code></pre>\n
</dd>\n
\n
    \n
<dt>\n
  Get or set the <code>max</code> option, after init.\n
</dt>\n
<dd>\n
<pre><code>//getter\n
var max = $(\'.selector\').slider(\'option\', \'max\');\n
//setter\n
$(\'.selector\').slider(\'option\', \'max\', 7);</code></pre>\n
</dd>\n
\n
    </dl>\n
  </div>\n
</li>\n
\n
\n
<li class="option" id="option-min">\n
  <div class="option-header">\n
    <h3 class="option-name"><a href="#option-min">min</a></h3>\n
    <dl>\n
      <dt class="option-type-label">Type:</dt>\n
        <dd class="option-type">Number</dd>\n
      \n
      <dt class="option-default-label">Default:</dt>\n
        <dd class="option-default">0</dd>\n
      \n
    </dl>\n
  </div>\n
  <div class="option-description">\n
    <p>The minimum value of the slider.</p>\n
  </div>\n
  <div class="option-examples">\n
    <h4>Code examples</h4>\n
    <dl class="option-examples-list">\n
    \n
<dt>\n
  Initialize a slider with the <code>min</code> option specified.\n
</dt>\n
<dd>\n
<pre><code>$(\'.selector\').slider({ min: -7 });</code></pre>\n
</dd>\n
\n
    \n
<dt>\n
  Get or set the <code>min</code> option, after init.\n
</dt>\n
<dd>\n
<pre><code>//getter\n
var min = $(\'.selector\').slider(\'option\', \'min\');\n
//setter\n
$(\'.selector\').slider(\'option\', \'min\', -7);</code></pre>\n
</dd>\n
\n
    </dl>\n
  </div>\n
</li>\n
\n
\n
<li class="option" id="option-orientation">\n
  <div class="option-header">\n
    <h3 class="option-name"><a href="#option-orientation">orientation</a></h3>\n
    <dl>\n
      <dt class="option-type-label">Type:</dt>\n
        <dd class="option-type">String</dd>\n
      \n
      <dt class="option-default-label">Default:</dt>\n
        <dd class="option-default">\'auto\'</dd>\n
      \n
    </dl>\n
  </div>\n
  <div class="option-description">\n
    <p>Normally you don\'t need to set this option because the plugin detects the slider orientation automatically. If the orientation is not correctly detected you can set this option to \'horizontal\' or \'vertical\'.</p>\n
  </div>\n
  <div class="option-examples">\n
    <h4>Code examples</h4>\n
    <dl class="option-examples-list">\n
    \n
<dt>\n
  Initialize a slider with the <code>orientation</code> option specified.\n
</dt>\n
<dd>\n
<pre><code>$(\'.selector\').slider({ orientation: \'vertical\' });</code></pre>\n
</dd>\n
\n
    \n
<dt>\n
  Get or set the <code>orientation</code> option, after init.\n
</dt>\n
<dd>\n
<pre><code>//getter\n
var orientation = $(\'.selector\').slider(\'option\', \'orientation\');\n
//setter\n
$(\'.selector\').slider(\'option\', \'orientation\', \'vertical\');</code></pre>\n
</dd>\n
\n
    </dl>\n
  </div>\n
</li>\n
\n
\n
<li class="option" id="option-range">\n
  <div class="option-header">\n
    <h3 class="option-name"><a href="#option-range">range</a></h3>\n
    <dl>\n
      <dt class="option-type-label">Type:</dt>\n
        <dd class="option-type">Boolean, String</dd>\n
      \n
      <dt class="option-default-label">Default:</dt>\n
        <dd class="option-default">false</dd>\n
      \n
    </dl>\n
  </div>\n
  <div class="option-description">\n
    <p>If set to true, the slider will detect if you have two handles and create a stylable range element between these two. Two other possible values are \'min\' and \'max\'. A min range goes from the slider min to one handle. A max range goes from one handle to the slider max.</p>\n
  </div>\n
  <div class="option-examples">\n
    <h4>Code examples</h4>\n
    <dl class="option-examples-list">\n
    \n
<dt>\n
  Initialize a slider with the <code>range</code> option specified.\n
</dt>\n
<dd>\n
<pre><code>$(\'.selector\').slider({ range: \'min\' });</code></pre>\n
</dd>\n
\n
    \n
<dt>\n
  Get or set the <code>range</code> option, after init.\n
</dt>\n
<dd>\n
<pre><code>//getter\n
var range = $(\'.selector\').slider(\'option\', \'range\');\n
//setter\n
$(\'.selector\').slider(\'option\', \'range\', \'min\');</code></pre>\n
</dd>\n
\n
    </dl>\n
  </div>\n
</li>\n
\n
\n
<li class="option" id="option-step">\n
  <div class="option-header">\n
    <h3 class="option-name"><a href="#option-step">step</a></h3>\n
    <dl>\n
      <dt class="option-type-label">Type:</dt>\n
        <dd class="option-type">Number</dd>\n
      \n
      <dt class="option-default-label">Default:</dt>\n
        <dd class="option-default">1</dd>\n
      \n
    </dl>\n
  </div>\n
  <div class="option-description">\n
    <p>Determines the size or amount of each interval or step the slider takes between min and max. The full specified value range of the slider (max - min) needs to be evenly divisible by the step.</p>\n
  </div>\n
  <div class="option-examples">\n
    <h4>Code examples</h4>\n
    <dl class="option-examples-list">\n
    \n
<dt>\n
  Initialize a slider with the <code>step</code> option specified.\n
</dt>\n
<dd>\n
<pre><code>$(\'.selector\').slider({ step: 5 });</code></pre>\n
</dd>\n
\n
    \n
<dt>\n
  Get or set the <code>step</code> option, after init.\n
</dt>\n
<dd>\n
<pre><code>//getter\n
var step = $(\'.selector\').slider(\'option\', \'step\');\n
//setter\n
$(\'.selector\').slider(\'option\', \'step\', 5);</code></pre>\n
</dd>\n
\n
    </dl>\n
  </div>\n
</li>\n
\n
\n
<li class="option" id="option-value">\n
  <div class="option-header">\n
    <h3 class="option-name"><a href="#option-value">value</a></h3>\n
    <dl>\n
      <dt class="option-type-label">Type:</dt>\n
        <dd class="option-type">Number</dd>\n
      \n
      <dt class="option-default-label">Default:</dt>\n
        <dd class="option-default">0</dd>\n
      \n
    </dl>\n
  </div>\n
  <div class="option-description">\n
    <p>Determines the value of the slider, if there\'s only one handle. If there is more than one handle, determines the value of the first handle.</p>\n
  </div>\n
  <div class="option-examples">\n
    <h4>Code examples</h4>\n
    <dl class="option-examples-list">\n
    \n
<dt>\n
  Initialize a slider with the <code>value</code> option specified.\n
</dt>\n
<dd>\n
<pre><code>$(\'.selector\').slider({ value: 37 });</code></pre>\n
</dd>\n
\n
    \n
<dt>\n
  Get or set the <code>value</code> option, after init.\n
</dt>\n
<dd>\n
<pre><code>//getter\n
var value = $(\'.selector\').slider(\'option\', \'value\');\n
//setter\n
$(\'.selector\').slider(\'option\', \'value\', 37);</code></pre>\n
</dd>\n
\n
    </dl>\n
  </div>\n
</li>\n
\n
\n
<li class="option" id="option-values">\n
  <div class="option-header">\n
    <h3 class="option-name"><a href="#option-values">values</a></h3>\n
    <dl>\n
      <dt class="option-type-label">Type:</dt>\n
        <dd class="option-type">Array</dd>\n
      \n
      <dt class="option-default-label">Default:</dt>\n
        <dd class="option-default">null</dd>\n
      \n
    </dl>\n
  </div>\n
  <div class="option-description">\n
    <p>This option can be used to specify multiple handles. If range is set to true, the length of \'values\' should be 2.</p>\n
  </div>\n
  <div class="option-examples">\n
    <h4>Code examples</h4>\n
    <dl class="option-examples-list">\n
    \n
<dt>\n
  Initialize a slider with the <code>values</code> option specified.\n
</dt>\n
<dd>\n
<pre><code>$(\'.selector\').slider({ values: [1,5,9] });</code></pre>\n
</dd>\n
\n
    \n
<dt>\n
  Get or set the <code>values</code> option, after init.\n
</dt>\n
<dd>\n
<pre><code>//getter\n
var values = $(\'.selector\').slider(\'option\', \'values\');\n
//setter\n
$(\'.selector\').slider(\'option\', \'values\', [1,5,9]);</code></pre>\n
</dd>\n
\n
    </dl>\n
  </div>\n
</li>\n
\n
    </ul>\n
  </div>\n
  <div id="events">\n
    <h2 class="top-header">Events</h2>\n
    <ul class="events-list">\n
      \n
<li class="event" id="event-start">\n
  <div class="event-header">\n
    <h3 class="event-name"><a href="#event-start">start</a></h3>\n
    <dl>\n
      <dt class="event-type-label">Type:</dt>\n
        <dd class="event-type">slidestart</dd>\n
    </dl>\n
  </div>\n
  <div class="event-description">\n
    <p>This event is triggered when the user starts sliding.</p>\n
  </div>\n
  <div class="event-examples">\n
    <h4>Code examples</h4>\n
    <dl class="event-examples-list">\n
    \n
<dt>\n
  Supply a callback function to handle the <code>start</code> event as an init option.\n
</dt>\n
<dd>\n
<pre><code>$(\'.selector\').slider({\n
   start: function(event, ui) { ... }\n
});</code></pre>\n
</dd>\n
\n
    \n
<dt>\n
  Bind to the <code>start</code> event by type: <code>slidestart</code>.\n
</dt>\n
<dd>\n
<pre><code>$(\'.selector\').bind(\'slidestart\', function(event, ui) {\n
  ...\n
});</code></pre>\n
</dd>\n
\n
    </dl>\n
  </div>\n
</li>\n
\n
\n
<li class="event" id="event-slide">\n
  <div class="event-header">\n
    <h3 class="event-name"><a href="#event-slide">slide</a></h3>\n
    <dl>\n
      <dt class="event-type-label">Type:</dt>\n
        <dd class="event-type">slide</dd>\n
    </dl>\n
  </div>\n
  <div class="event-description">\n
    <p>This event is triggered on every mouse move during slide. Use ui.value (single-handled sliders) to obtain the value of the current handle, $(..).slider(\'value\', index) to get another handles\' value.\n
</p><p>Return false in order to prevent a slide, based on ui.value.</p>\n
  </div>\n
  <div class="event-examples">\n
    <h4>Code examples</h4>\n
    <dl class="event-examples-list">\n
    \n
<dt>\n
  Supply a callback function to handle the <code>slide</code> event as an init option.\n
</dt>\n
<dd>\n
<pre><code>$(\'.selector\').slider({\n
   slide: function(event, ui) { ... }\n
});</code></pre>\n
</dd>\n
\n
    \n
<dt>\n
  Bind to the <code>slide</code> event by type: <code>slide</code>.\n
</dt>\n
<dd>\n
<pre><code>$(\'.selector\').bind(\'slide\', function(event, ui) {\n
  ...\n
});</code></pre>\n
</dd>\n
\n
    </dl>\n
  </div>\n
</li>\n
\n
\n
<li class="event" id="event-change">\n
  <div class="event-header">\n
    <h3 class="event-name"><a href="#event-change">change</a></h3>\n
    <dl>\n
      <dt class="event-type-label">Type:</dt>\n
        <dd class="event-type">slidechange</dd>\n
    </dl>\n
  </div>\n
  <div class="event-description">\n
    <p>This event is triggered on slide stop, or if the value is changed programmatically (by the <code>value</code> method).  Takes arguments event and ui.  Use event.orginalEvent to detect whether the value changed by mouse, keyboard, or programmatically. Use ui.value (single-handled sliders) to obtain the value of the current handle, $(this).slider(\'values\', index) to get another handle\'s value.</p>\n
  </div>\n
  <div class="event-examples">\n
    <h4>Code examples</h4>\n
    <dl class="event-examples-list">\n
    \n
<dt>\n
  Supply a callback function to handle the <code>change</code> event as an init option.\n
</dt>\n
<dd>\n
<pre><code>$(\'.selector\').slider({\n
   change: function(event, ui) { ... }\n
});</code></pre>\n
</dd>\n
\n
    \n
<dt>\n
  Bind to the <code>change</code> event by type: <code>slidechange</code>.\n
</dt>\n
<dd>\n
<pre><code>$(\'.selector\').bind(\'slidechange\', function(event, ui) {\n
  ...\n
});</code></pre>\n
</dd>\n
\n
    </dl>\n
  </div>\n
</li>\n
\n
\n
<li class="event" id="event-stop">\n
  <div class="event-header">\n
    <h3 class="event-name"><a href="#event-stop">stop</a></h3>\n
    <dl>\n
      <dt class="event-type-label">Type:</dt>\n
        <dd class="event-type">slidestop</dd>\n
    </dl>\n
  </div>\n
  <div class="event-description">\n
    <p>This event is triggered when the user stops sliding.</p>\n
  </div>\n
  <div class="event-examples">\n
    <h4>Code examples</h4>\n
    <dl class="event-examples-list">\n
    \n
<dt>\n
  Supply a callback function to handle the <code>stop</code> event as an init option.\n
</dt>\n
<dd>\n
<pre><code>$(\'.selector\').slider({\n
   stop: function(event, ui) { ... }\n
});</code></pre>\n
</dd>\n
\n
    \n
<dt>\n
  Bind to the <code>stop</code> event by type: <code>slidestop</code>.\n
</dt>\n
<dd>\n
<pre><code>$(\'.selector\').bind(\'slidestop\', function(event, ui) {\n
  ...\n
});</code></pre>\n
</dd>\n
\n
    </dl>\n
  </div>\n
</li>\n
\n
    </ul>\n
  </div>\n
  <div id="methods">\n
    <h2 class="top-header">Methods</h2>\n
    <ul class="methods-list">\n
      \n
<li class="method" id="method-destroy">\n
  <div class="method-header">\n
    <h3 class="method-name"><a href="#method-destroy">destroy</a></h3>\n
    <dl>\n
      <dt class="method-signature-label">Signature:</dt>\n
        <dd class="method-signature">.slider( \'destroy\'\n
\n
\n
\n
\n
\n
\n
\n
)</dd>\n
    </dl>\n
  </div>\n
  <div class="method-description">\n
    <p>Remove the slider functionality completely. This will return the element back to its pre-init state.</p>\n
  </div>\n
</li>\n
\n
\n
<li class="method" id="method-disable">\n
  <div class="method-header">\n
    <h3 class="method-name"><a href="#method-disable">disable</a></h3>\n
    <dl>\n
      <dt class="method-signature-label">Signature:</dt>\n
        <dd class="method-signature">.slider( \'disable\'\n
\n
\n
\n
\n
\n
\n
\n
)</dd>\n
    </dl>\n
  </div>\n
  <div class="method-description">\n
    <p>Disable the slider.</p>\n
  </div>\n
</li>\n
\n
\n
<li class="method" id="method-enable">\n
  <div class="method-header">\n
    <h3 class="method-name"><a href="#method-enable">enable</a></h3>\n
    <dl>\n
      <dt class="method-signature-label">Signature:</dt>\n
        <dd class="method-signature">.slider( \'enable\'\n
\n
\n
\n
\n
\n
\n
\n
)</dd>\n
    </dl>\n
  </div>\n
  <div class="method-description">\n
    <p>Enable the slider.</p>\n
  </div>\n
</li>\n
\n
\n
<li class="method" id="method-option">\n
  <div class="method-header">\n
    <h3 class="method-name"><a href="#method-option">option</a></h3>\n
    <dl>\n
      <dt class="method-signature-label">Signature:</dt>\n
        <dd class="method-signature">.slider( \'option\'\n
\n
, optionName\n
\n
, <span class="optional">[</span>value<span class="optional">] </span>\n
\n
\n
\n
)</dd>\n
    </dl>\n
  </div>\n
  <div class="method-description">\n
    <p>Get or set any slider option. If no value is specified, will act as a getter.</p>\n
  </div>\n
</li>\n
\n
\n
<li class="method" id="method-value">\n
  <div class="method-header">\n
    <h3 class="method-name"><a href="#method-value">value</a></h3>\n
    <dl>\n
      <dt class="method-signature-label">Signature:</dt>\n
        <dd class="method-signature">.slider( \'value\'\n
\n
, <span class="optional">[</span>value<span class="optional">] </span>\n
\n
\n
\n
\n
\n
)</dd>\n
    </dl>\n
  </div>\n
  <div class="method-description">\n
    <p>Gets or sets the value of the slider. For single handle sliders.</p>\n
  </div>\n
</li>\n
\n
\n
<li class="method" id="method-values">\n
  <div class="method-header">\n
    <h3 class="method-name"><a href="#method-values">values</a></h3>\n
    <dl>\n
      <dt class="method-signature-label">Signature:</dt>\n
        <dd class="method-signature">.slider( \'values\'\n
\n
, index\n
\n
, <span class="optional">[</span>value<span class="optional">] </span>\n
\n
\n
\n
)</dd>\n
    </dl>\n
  </div>\n
  <div class="method-description">\n
    <p>Gets or sets the values of the slider. For multiple handle or range sliders.</p>\n
  </div>\n
</li>\n
\n
    </ul>\n
  </div>\n
  <div id="theming">\n
    <h2 class="top-header">Theming</h2>\n
    <p>The jQuery UI Slider plugin uses the jQuery UI CSS Framework to style its look and feel, including colors and background textures. We recommend using the ThemeRoller tool to create and download custom themes that are easy to build and maintain.\n
</p>\n
  <p>If a deeper level of customization is needed, there are widget-specific classes referenced within the ui.slider.css stylesheet that can be modified. These classes are highlighed in bold below.\n
</p>\n
    \n
  <h3>Sample markup with jQuery UI CSS Framework classes</h3>\n
  &lt;div class=&quot;ui-slider<strong> ui-slider-horizontal</strong> ui-widget ui-widget-content ui-corner-all&quot;&gt;<br />\n
&nbsp;&nbsp;&nbsp;&lt;a style=&quot;left: 0%;&quot; class=&quot;<strong>ui-slider-handle</strong> ui-state-default ui-corner-all&quot; href=&quot;#&quot;&gt;&lt;/a&gt;<br />\n
&lt;/div&gt;<br />\n
  <p class="theme-note">\n
    <strong>\n
      Note: This is a sample of markup generated by the slider plugin, not markup you should use to create a slider. The only markup needed for that is &lt;div&gt;&lt;div&gt;.\n
    </strong>\n
  </p>\n
\n
  </div>\n
</div>\n
\n
</p><!-- \n
Pre-expand include size: 30277 bytes\n
Post-expand include size: 46114 bytes\n
Template argument size: 25048 bytes\n
Maximum: 2097152 bytes\n
-->\n
\n
<!-- Saved in parser cache with key jqdocs_docs:pcache:idhash:3349-1!1!0!!en!2 and timestamp 20090604112222 -->\n


]]></string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>slider.html</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
