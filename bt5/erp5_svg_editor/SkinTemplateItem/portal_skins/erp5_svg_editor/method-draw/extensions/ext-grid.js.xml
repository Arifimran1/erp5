<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts52850592.85</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>ext-grid.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/*\n
 * ext-grid.js\n
 *\n
 * Licensed under the Apache License, Version 2\n
 *\n
 * Copyright(c) 2010 Redou Mine\n
 * Copyright(c) 2010 Alexis Deveria\n
 *\n
 */\n
\n
// Dependencies:\n
// 1) units.js\n
// 2) everything else\n
\n
methodDraw.addExtension("view_grid", function(s) {\n
    if (!document.getElementById("canvasGrid")){\n
    var svgdoc = document.getElementById("svgcanvas").ownerDocument,\n
            svgns = "http://www.w3.org/2000/svg",\n
            dims = methodDraw.curConfig.dimensions,\n
            svgroot = s.svgroot;\n
    var svgCanvas = methodDraw.canvas;\n
    var showGrid = false;\n
    var assignAttributes = s.assignAttributes;\n
    \n
    var hcanvas = document.createElement(\'canvas\');\n
    $(hcanvas).hide().appendTo(\'body\');\n
\n
    var canvasgrid = svgdoc.createElementNS(svgns, "g");\n
    assignAttributes(canvasgrid, {\n
        \'id\': \'canvasGrid\',\n
        \'width\': \'100%\',\n
        \'height\': \'100%\',\n
        \'x\': 0,\n
        \'y\': 0,\n
        \'overflow\': \'visible\',\n
        \'display\': \'none\'\n
    });\n
    \n
    var canvBG = $(\'#canvas_background\');\n
    canvBG.after(canvasgrid);\n
    \n
    \n
\n
        // grid-pattern\n
        var gridPattern = svgdoc.createElementNS(svgns, "pattern");\n
        assignAttributes(gridPattern, {\n
            \'id\': \'gridpattern\',\n
            \'patternUnits\': \'userSpaceOnUse\',\n
            \'x\': 0, //-(value.strokeWidth / 2), // position for strokewidth\n
            \'y\': 0, //-(value.strokeWidth / 2), // position for strokewidth\n
            \'width\': 100,\n
            \'height\': 100\n
        });\n
        \n
        var gridimg = svgdoc.createElementNS(svgns, "image");\n
        assignAttributes(gridimg, {\n
            \'x\': 0,\n
            \'y\': 0,\n
            \'width\': 100,\n
            \'height\': 100\n
        });\n
        \n
        gridPattern.appendChild(gridimg);\n
        $(\'#svgroot defs\').append(gridPattern);\n
\n
        // grid-box\n
        var gridBox = svgdoc.createElementNS(svgns, "rect");\n
        assignAttributes(gridBox, {\n
            \'width\': \'100%\',\n
            \'height\': \'100%\',\n
            \'x\': 0,\n
            \'y\': 0,\n
            \'stroke-width\': 0,\n
            \'stroke\': \'none\',\n
            \'fill\': \'url(#gridpattern)\',\n
            \'style\': \'pointer-events: none; display:visible;\'\n
        });\n
        $(\'#canvasGrid\').append(gridBox);\n
        }\n
//     });\n
\n
    function updateGrid(zoom) {\n
        // TODO: Try this with <line> elements, then compare performance difference\n
    \n
        var bgwidth = +canvBG.attr(\'width\');\n
        var bgheight = +canvBG.attr(\'height\');\n
        \n
        var units = svgedit.units.getTypeMap();\n
        var unit = units[methodDraw.curConfig.baseUnit]; // 1 = 1px\n
        var r_intervals = [.01, .1, 1, 10, 100, 1000];\n
    \n
        var d = 0;\n
        var is_x = (d === 0);\n
        var dim = is_x ? \'x\' : \'y\';\n
        var lentype = is_x?\'width\':\'height\';\n
        var c_elem = svgCanvas.getContentElem();\n
        var content_d = c_elem.getAttribute(dim)-0;\n
        \n
        var hcanv = hcanvas;\n
        \n
        var u_multi = unit * zoom;\n
        \n
        // Calculate the main number interval\n
        var raw_m = 100 / u_multi;\n
        var multi = 1;\n
        for(var i = 0; i < r_intervals.length; i++) {\n
            var num = r_intervals[i];\n
            multi = num;\n
            if(raw_m <= num) {\n
                break;\n
            }\n
        }\n
        \n
        var big_int = multi * u_multi;\n
\n
        // Set the canvas size to the width of the container\n
        hcanv.width = big_int;\n
        hcanv.height = big_int;\n
        var ctx = hcanv.getContext("2d");\n
\n
        var ruler_d = 0; \n
        var cur_d = .5;\n
        \n
        var part = big_int / 10;\n
\n
        ctx.globalAlpha = 0.2;\n
        ctx.strokeStyle = "#000";\n
        for(var i = 1; i < 10; i++) {\n
            var sub_d = Math.round(part * i) + .5;\n
//                  var line_num = (i % 2)?12:10;\n
            var line_num = 0;\n
            ctx.moveTo(sub_d, big_int);\n
            ctx.lineTo(sub_d, line_num);\n
            ctx.moveTo(big_int, sub_d);\n
            ctx.lineTo(line_num ,sub_d);\n
        }\n
        ctx.stroke();\n
        ctx.beginPath();  \n
        ctx.globalAlpha = 0.5;\n
        ctx.moveTo(cur_d, big_int);\n
        ctx.lineTo(cur_d, 0);\n
\n
        ctx.moveTo(big_int, cur_d);\n
        ctx.lineTo(0, cur_d);\n
        ctx.stroke();\n
\n
        var datauri = hcanv.toDataURL(\'image/png\');\n
        gridimg.setAttribute(\'width\', big_int);\n
        gridimg.setAttribute(\'height\', big_int);\n
        gridimg.parentNode.setAttribute(\'width\', big_int);\n
        gridimg.parentNode.setAttribute(\'height\', big_int);\n
        svgCanvas.setHref(gridimg, datauri);\n
    }\n
\n
    return {\n
        name: "view_grid",\n
        zoomChanged: function(zoom) {\n
            // update size\n
            if(showGrid) updateGrid(zoom);\n
        },\n
\n
        buttons: [{\n
            id: "view_grid",\n
            type: "menu",\n
            after: "tool_wireframe",\n
            panel: "view_menu",\n
            title: "View Grid",\n
            events: {\n
                \'click\': function() {\n
                    var gr = !$(\'#view_grid\').hasClass(\'push_button_pressed\');\n
                    if (gr) {\n
                        methodDraw.curConfig.showGrid = showGrid = true;\n
                        $(\'#view_grid\').addClass(\'push_button_pressed\');\n
                        $(\'#canvasGrid\').attr(\'display\', \'inline\');\n
                        updateGrid(svgCanvas.getZoom());\n
                    }\n
                    else {\n
                        methodDraw.curConfig.showGrid = showGrid = false;\n
                        $(\'#view_grid\').removeClass(\'push_button_pressed\');\n
                        $(\'#canvasGrid\').attr(\'display\', \'none\');\n
                    }\n
                }\n
            }\n
}]\n
        };\n
    });\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>5674</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
