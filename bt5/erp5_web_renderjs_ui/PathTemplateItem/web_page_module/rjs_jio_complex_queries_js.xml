<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="Web Script" module="erp5.portal_type"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Access_contents_information_Permission</string> </key>
            <value>
              <tuple>
                <string>Anonymous</string>
                <string>Assignee</string>
                <string>Assignor</string>
                <string>Associate</string>
                <string>Auditor</string>
                <string>Manager</string>
                <string>Owner</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_Add_portal_content_Permission</string> </key>
            <value>
              <tuple>
                <string>Assignee</string>
                <string>Assignor</string>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_Change_local_roles_Permission</string> </key>
            <value>
              <tuple>
                <string>Assignor</string>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_Modify_portal_content_Permission</string> </key>
            <value>
              <tuple>
                <string>Assignee</string>
                <string>Assignor</string>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_View_Permission</string> </key>
            <value>
              <tuple>
                <string>Anonymous</string>
                <string>Assignee</string>
                <string>Assignor</string>
                <string>Associate</string>
                <string>Auditor</string>
                <string>Manager</string>
                <string>Owner</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>content_md5</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>default_reference</string> </key>
            <value> <string>jio_complex_queries.js</string> </value>
        </item>
        <item>
            <key> <string>description</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>rjs_jio_complex_queries_js</string> </value>
        </item>
        <item>
            <key> <string>language</string> </key>
            <value> <string>en</string> </value>
        </item>
        <item>
            <key> <string>portal_type</string> </key>
            <value> <string>Web Script</string> </value>
        </item>
        <item>
            <key> <string>short_title</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>text_content</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/*\n
* Copyright 2013, Nexedi SA\n
* Released under the LGPL license.\n
* http://www.gnu.org/licenses/lgpl.html\n
*/\n
\n
/**\n
 * Provides some function to use complex queries with item list\n
 *\n
 * @module complex_queries\n
 */\n
// define([module_name], [dependencies], module);\n
(function (dependencies, module) {\n
  "use strict";\n
  if (typeof define === \'function\' && define.amd) {\n
    return define(dependencies, module);\n
  }\n
  if (typeof exports === \'object\') {\n
    return module(exports);\n
  }\n
  window.complex_queries = {};\n
  module(window.complex_queries, RSVP);\n
}([\'exports\', \'rsvp\'], function (to_export, RSVP) {\n
  "use strict";\n
\n
  /**\n
   * Add a secured (write permission denied) property to an object.\n
   *\n
   * @param  {Object} object The object to fill\n
   * @param  {String} key The object key where to store the property\n
   * @param  {Any} value The value to store\n
   */\n
  function _export(key, value) {\n
    Object.defineProperty(to_export, key, {\n
      "configurable": false,\n
      "enumerable": true,\n
      "writable": false,\n
      "value": value\n
    });\n
  }\n
\n
/**\n
 * Parse a text request to a json query object tree\n
 *\n
 * @param  {String} string The string to parse\n
 * @return {Object} The json query tree\n
 */\n
function parseStringToObject(string) {\n
\n
\n
/*\n
\tDefault template driver for JS/CC generated parsers running as\n
\tbrowser-based JavaScript/ECMAScript applications.\n
\t\n
\tWARNING: \tThis parser template will not run as console and has lesser\n
\t\t\t\tfeatures for debugging than the console derivates for the\n
\t\t\t\tvarious JavaScript platforms.\n
\t\n
\tFeatures:\n
\t- Parser trace messages\n
\t- Integrated panic-mode error recovery\n
\t\n
\tWritten 2007, 2008 by Jan Max Meyer, J.M.K S.F. Software Technologies\n
\t\n
\tThis is in the public domain.\n
*/\n
\n
var NODEJS__dbg_withtrace\t\t= false;\n
var NODEJS__dbg_string\t\t\t= new String();\n
\n
function __NODEJS_dbg_print( text )\n
{\n
\tNODEJS__dbg_string += text + "\\n";\n
}\n
\n
function __NODEJS_lex( info )\n
{\n
\tvar state\t\t= 0;\n
\tvar match\t\t= -1;\n
\tvar match_pos\t= 0;\n
\tvar start\t\t= 0;\n
\tvar pos\t\t\t= info.offset + 1;\n
\n
\tdo\n
\t{\n
\t\tpos--;\n
\t\tstate = 0;\n
\t\tmatch = -2;\n
\t\tstart = pos;\n
\n
\t\tif( info.src.length <= start )\n
\t\t\treturn 19;\n
\n
\t\tdo\n
\t\t{\n
\n
switch( state )\n
{\n
\tcase 0:\n
\t\tif( ( info.src.charCodeAt( pos ) >= 0 && info.src.charCodeAt( pos ) <= 8 ) || ( info.src.charCodeAt( pos ) >= 10 && info.src.charCodeAt( pos ) <= 31 ) || ( info.src.charCodeAt( pos ) >= 35 && info.src.charCodeAt( pos ) <= 39 ) || ( info.src.charCodeAt( pos ) >= 42 && info.src.charCodeAt( pos ) <= 57 ) || info.src.charCodeAt( pos ) == 59 || ( info.src.charCodeAt( pos ) >= 63 && info.src.charCodeAt( pos ) <= 64 ) || ( info.src.charCodeAt( pos ) >= 66 && info.src.charCodeAt( pos ) <= 77 ) || ( info.src.charCodeAt( pos ) >= 80 && info.src.charCodeAt( pos ) <= 254 ) ) state = 1;\n
\t\telse if( info.src.charCodeAt( pos ) == 9 ) state = 2;\n
\t\telse if( info.src.charCodeAt( pos ) == 40 ) state = 3;\n
\t\telse if( info.src.charCodeAt( pos ) == 41 ) state = 4;\n
\t\telse if( info.src.charCodeAt( pos ) == 60 || info.src.charCodeAt( pos ) == 62 ) state = 5;\n
\t\telse if( info.src.charCodeAt( pos ) == 33 ) state = 11;\n
\t\telse if( info.src.charCodeAt( pos ) == 79 ) state = 12;\n
\t\telse if( info.src.charCodeAt( pos ) == 32 ) state = 13;\n
\t\telse if( info.src.charCodeAt( pos ) == 61 ) state = 14;\n
\t\telse if( info.src.charCodeAt( pos ) == 34 ) state = 15;\n
\t\telse if( info.src.charCodeAt( pos ) == 65 ) state = 19;\n
\t\telse if( info.src.charCodeAt( pos ) == 78 ) state = 20;\n
\t\telse state = -1;\n
\t\tbreak;\n
\n
\tcase 1:\n
\t\tif( ( info.src.charCodeAt( pos ) >= 0 && info.src.charCodeAt( pos ) <= 31 ) || info.src.charCodeAt( pos ) == 33 || ( info.src.charCodeAt( pos ) >= 35 && info.src.charCodeAt( pos ) <= 39 ) || ( info.src.charCodeAt( pos ) >= 42 && info.src.charCodeAt( pos ) <= 57 ) || ( info.src.charCodeAt( pos ) >= 59 && info.src.charCodeAt( pos ) <= 254 ) ) state = 1;\n
\t\telse if( info.src.charCodeAt( pos ) == 58 ) state = 6;\n
\t\telse state = -1;\n
\t\tmatch = 10;\n
\t\tmatch_pos = pos;\n
\t\tbreak;\n
\n
\tcase 2:\n
\t\tif( ( info.src.charCodeAt( pos ) >= 0 && info.src.charCodeAt( pos ) <= 31 ) || info.src.charCodeAt( pos ) == 33 || ( info.src.charCodeAt( pos ) >= 35 && info.src.charCodeAt( pos ) <= 39 ) || ( info.src.charCodeAt( pos ) >= 42 && info.src.charCodeAt( pos ) <= 57 ) || ( info.src.charCodeAt( pos ) >= 59 && info.src.charCodeAt( pos ) <= 254 ) ) state = 1;\n
\t\telse if( info.src.charCodeAt( pos ) == 58 ) state = 6;\n
\t\telse state = -1;\n
\t\tmatch = 1;\n
\t\tmatch_pos = pos;\n
\t\tbreak;\n
\n
\tcase 3:\n
\t\tstate = -1;\n
\t\tmatch = 3;\n
\t\tmatch_pos = pos;\n
\t\tbreak;\n
\n
\tcase 4:\n
\t\tstate = -1;\n
\t\tmatch = 4;\n
\t\tmatch_pos = pos;\n
\t\tbreak;\n
\n
\tcase 5:\n
\t\tif( info.src.charCodeAt( pos ) == 61 ) state = 14;\n
\t\telse state = -1;\n
\t\tmatch = 11;\n
\t\tmatch_pos = pos;\n
\t\tbreak;\n
\n
\tcase 6:\n
\t\tstate = -1;\n
\t\tmatch = 8;\n
\t\tmatch_pos = pos;\n
\t\tbreak;\n
\n
\tcase 7:\n
\t\tstate = -1;\n
\t\tmatch = 9;\n
\t\tmatch_pos = pos;\n
\t\tbreak;\n
\n
\tcase 8:\n
\t\tif( ( info.src.charCodeAt( pos ) >= 0 && info.src.charCodeAt( pos ) <= 31 ) || info.src.charCodeAt( pos ) == 33 || ( info.src.charCodeAt( pos ) >= 35 && info.src.charCodeAt( pos ) <= 39 ) || ( info.src.charCodeAt( pos ) >= 42 && info.src.charCodeAt( pos ) <= 57 ) || ( info.src.charCodeAt( pos ) >= 59 && info.src.charCodeAt( pos ) <= 254 ) ) state = 1;\n
\t\telse if( info.src.charCodeAt( pos ) == 58 ) state = 6;\n
\t\telse state = -1;\n
\t\tmatch = 6;\n
\t\tmatch_pos = pos;\n
\t\tbreak;\n
\n
\tcase 9:\n
\t\tif( ( info.src.charCodeAt( pos ) >= 0 && info.src.charCodeAt( pos ) <= 31 ) || info.src.charCodeAt( pos ) == 33 || ( info.src.charCodeAt( pos ) >= 35 && info.src.charCodeAt( pos ) <= 39 ) || ( info.src.charCodeAt( pos ) >= 42 && info.src.charCodeAt( pos ) <= 57 ) || ( info.src.charCodeAt( pos ) >= 59 && info.src.charCodeAt( pos ) <= 254 ) ) state = 1;\n
\t\telse if( info.src.charCodeAt( pos ) == 58 ) state = 6;\n
\t\telse state = -1;\n
\t\tmatch = 5;\n
\t\tmatch_pos = pos;\n
\t\tbreak;\n
\n
\tcase 10:\n
\t\tif( ( info.src.charCodeAt( pos ) >= 0 && info.src.charCodeAt( pos ) <= 31 ) || info.src.charCodeAt( pos ) == 33 || ( info.src.charCodeAt( pos ) >= 35 && info.src.charCodeAt( pos ) <= 39 ) || ( info.src.charCodeAt( pos ) >= 42 && info.src.charCodeAt( pos ) <= 57 ) || ( info.src.charCodeAt( pos ) >= 59 && info.src.charCodeAt( pos ) <= 254 ) ) state = 1;\n
\t\telse if( info.src.charCodeAt( pos ) == 58 ) state = 6;\n
\t\telse state = -1;\n
\t\tmatch = 7;\n
\t\tmatch_pos = pos;\n
\t\tbreak;\n
\n
\tcase 11:\n
\t\tif( info.src.charCodeAt( pos ) == 61 ) state = 14;\n
\t\telse state = -1;\n
\t\tbreak;\n
\n
\tcase 12:\n
\t\tif( ( info.src.charCodeAt( pos ) >= 0 && info.src.charCodeAt( pos ) <= 31 ) || info.src.charCodeAt( pos ) == 33 || ( info.src.charCodeAt( pos ) >= 35 && info.src.charCodeAt( pos ) <= 39 ) || ( info.src.charCodeAt( pos ) >= 42 && info.src.charCodeAt( pos ) <= 57 ) || ( info.src.charCodeAt( pos ) >= 59 && info.src.charCodeAt( pos ) <= 81 ) || ( info.src.charCodeAt( pos ) >= 83 && info.src.charCodeAt( pos ) <= 254 ) ) state = 1;\n
\t\telse if( info.src.charCodeAt( pos ) == 58 ) state = 6;\n
\t\telse if( info.src.charCodeAt( pos ) == 82 ) state = 8;\n
\t\telse state = -1;\n
\t\tmatch = 10;\n
\t\tmatch_pos = pos;\n
\t\tbreak;\n
\n
\tcase 13:\n
\t\tstate = -1;\n
\t\tmatch = 1;\n
\t\tmatch_pos = pos;\n
\t\tbreak;\n
\n
\tcase 14:\n
\t\tstate = -1;\n
\t\tmatch = 11;\n
\t\tmatch_pos = pos;\n
\t\tbreak;\n
\n
\tcase 15:\n
\t\tif( info.src.charCodeAt( pos ) == 34 ) state = 7;\n
\t\telse if( ( info.src.charCodeAt( pos ) >= 0 && info.src.charCodeAt( pos ) <= 33 ) || ( info.src.charCodeAt( pos ) >= 35 && info.src.charCodeAt( pos ) <= 91 ) || ( info.src.charCodeAt( pos ) >= 93 && info.src.charCodeAt( pos ) <= 254 ) ) state = 15;\n
\t\telse if( info.src.charCodeAt( pos ) == 92 ) state = 17;\n
\t\telse state = -1;\n
\t\tbreak;\n
\n
\tcase 16:\n
\t\tif( ( info.src.charCodeAt( pos ) >= 0 && info.src.charCodeAt( pos ) <= 31 ) || info.src.charCodeAt( pos ) == 33 || ( info.src.charCodeAt( pos ) >= 35 && info.src.charCodeAt( pos ) <= 39 ) || ( info.src.charCodeAt( pos ) >= 42 && info.src.charCodeAt( pos ) <= 57 ) || ( info.src.charCodeAt( pos ) >= 59 && info.src.charCodeAt( pos ) <= 67 ) || ( info.src.charCodeAt( pos ) >= 69 && info.src.charCodeAt( pos ) <= 254 ) ) state = 1;\n
\t\telse if( info.src.charCodeAt( pos ) == 58 ) state = 6;\n
\t\telse if( info.src.charCodeAt( pos ) == 68 ) state = 9;\n
\t\telse state = -1;\n
\t\tmatch = 10;\n
\t\tmatch_pos = pos;\n
\t\tbreak;\n
\n
\tcase 17:\n
\t\tif( ( info.src.charCodeAt( pos ) >= 0 && info.src.charCodeAt( pos ) <= 254 ) ) state = 15;\n
\t\telse state = -1;\n
\t\tbreak;\n
\n
\tcase 18:\n
\t\tif( ( info.src.charCodeAt( pos ) >= 0 && info.src.charCodeAt( pos ) <= 31 ) || info.src.charCodeAt( pos ) == 33 || ( info.src.charCodeAt( pos ) >= 35 && info.src.charCodeAt( pos ) <= 39 ) || ( info.src.charCodeAt( pos ) >= 42 && info.src.charCodeAt( pos ) <= 57 ) || ( info.src.charCodeAt( pos ) >= 59 && info.src.charCodeAt( pos ) <= 83 ) || ( info.src.charCodeAt( pos ) >= 85 && info.src.charCodeAt( pos ) <= 254 ) ) state = 1;\n
\t\telse if( info.src.charCodeAt( pos ) == 58 ) state = 6;\n
\t\telse if( info.src.charCodeAt( pos ) == 84 ) state = 10;\n
\t\telse state = -1;\n
\t\tmatch = 10;\n
\t\tmatch_pos = pos;\n
\t\tbreak;\n
\n
\tcase 19:\n
\t\tif( ( info.src.charCodeAt( pos ) >= 0 && info.src.charCodeAt( pos ) <= 31 ) || info.src.charCodeAt( pos ) == 33 || ( info.src.charCodeAt( pos ) >= 35 && info.src.charCodeAt( pos ) <= 39 ) || ( info.src.charCodeAt( pos ) >= 42 && info.src.charCodeAt( pos ) <= 57 ) || ( info.src.charCodeAt( pos ) >= 59 && info.src.charCodeAt( pos ) <= 77 ) || ( info.src.charCodeAt( pos ) >= 79 && info.src.charCodeAt( pos ) <= 254 ) ) state = 1;\n
\t\telse if( info.src.charCodeAt( pos ) == 58 ) state = 6;\n
\t\telse if( info.src.charCodeAt( pos ) == 78 ) state = 16;\n
\t\telse state = -1;\n
\t\tmatch = 10;\n
\t\tmatch_pos = pos;\n
\t\tbreak;\n
\n
\tcase 20:\n
\t\tif( ( info.src.charCodeAt( pos ) >= 0 && info.src.charCodeAt( pos ) <= 31 ) || info.src.charCodeAt( pos ) == 33 || ( info.src.charCodeAt( pos ) >= 35 && info.src.charCodeAt( pos ) <= 39 ) || ( info.src.charCodeAt( pos ) >= 42 && info.src.charCodeAt( pos ) <= 57 ) || ( info.src.charCodeAt( pos ) >= 59 && info.src.charCodeAt( pos ) <= 78 ) || ( info.src.charCodeAt( pos ) >= 80 && info.src.charCodeAt( pos ) <= 254 ) ) state = 1;\n
\t\telse if( info.src.charCodeAt( pos ) == 58 ) state = 6;\n
\t\telse if( info.src.charCodeAt( pos ) == 79 ) state = 18;\n
\t\telse state = -1;\n
\t\tmatch = 10;\n
\t\tmatch_pos = pos;\n
\t\tbreak;\n
\n
}\n
\n
\n
\t\t\tpos++;\n
\n
\t\t}\n
\t\twhile( state > -1 );\n
\n
\t}\n
\twhile( 1 > -1 && match == 1 );\n
\n
\tif( match > -1 )\n
\t{\n
\t\tinfo.att = info.src.substr( start, match_pos - start );\n
\t\tinfo.offset = match_pos;\n
\t\t\n
\n
\t}\n
\telse\n
\t{\n
\t\tinfo.att = new String();\n
\t\tmatch = -1;\n
\t}\n
\n
\treturn match;\n
}\n
\n
\n
function __NODEJS_parse( src, err_off, err_la )\n
{\n
\tvar\t\tsstack\t\t\t= new Array();\n
\tvar\t\tvstack\t\t\t= new Array();\n
\tvar \terr_cnt\t\t\t= 0;\n
\tvar\t\tact;\n
\tvar\t\tgo;\n
\tvar\t\tla;\n
\tvar\t\trval;\n
\tvar \tparseinfo\t\t= new Function( "", "var offset; var src; var att;" );\n
\tvar\t\tinfo\t\t\t= new parseinfo();\n
\t\n
/* Pop-Table */\n
var pop_tab = new Array(\n
\tnew Array( 0/* begin\' */, 1 ),\n
\tnew Array( 13/* begin */, 1 ),\n
\tnew Array( 12/* search_text */, 1 ),\n
\tnew Array( 12/* search_text */, 2 ),\n
\tnew Array( 12/* search_text */, 3 ),\n
\tnew Array( 14/* and_expression */, 1 ),\n
\tnew Array( 14/* and_expression */, 3 ),\n
\tnew Array( 15/* boolean_expression */, 2 ),\n
\tnew Array( 15/* boolean_expression */, 1 ),\n
\tnew Array( 16/* expression */, 3 ),\n
\tnew Array( 16/* expression */, 2 ),\n
\tnew Array( 16/* expression */, 1 ),\n
\tnew Array( 17/* value */, 2 ),\n
\tnew Array( 17/* value */, 1 ),\n
\tnew Array( 18/* string */, 1 ),\n
\tnew Array( 18/* string */, 1 )\n
);\n
\n
/* Action-Table */\n
var act_tab = new Array(\n
\t/* State 0 */ new Array( 7/* "NOT" */,5 , 3/* "LEFT_PARENTHESE" */,7 , 8/* "COLUMN" */,8 , 11/* "OPERATOR" */,10 , 10/* "WORD" */,12 , 9/* "STRING" */,13 ),\n
\t/* State 1 */ new Array( 19/* "$" */,0 ),\n
\t/* State 2 */ new Array( 19/* "$" */,-1 ),\n
\t/* State 3 */ new Array( 6/* "OR" */,14 , 7/* "NOT" */,5 , 3/* "LEFT_PARENTHESE" */,7 , 8/* "COLUMN" */,8 , 11/* "OPERATOR" */,10 , 10/* "WORD" */,12 , 9/* "STRING" */,13 , 19/* "$" */,-2 , 4/* "RIGHT_PARENTHESE" */,-2 ),\n
\t/* State 4 */ new Array( 5/* "AND" */,16 , 19/* "$" */,-5 , 7/* "NOT" */,-5 , 3/* "LEFT_PARENTHESE" */,-5 , 8/* "COLUMN" */,-5 , 11/* "OPERATOR" */,-5 , 10/* "WORD" */,-5 , 9/* "STRING" */,-5 , 6/* "OR" */,-5 , 4/* "RIGHT_PARENTHESE" */,-5 ),\n
\t/* State 5 */ new Array( 3/* "LEFT_PARENTHESE" */,7 , 8/* "COLUMN" */,8 , 11/* "OPERATOR" */,10 , 10/* "WORD" */,12 , 9/* "STRING" */,13 ),\n
\t/* State 6 */ new Array( 19/* "$" */,-8 , 7/* "NOT" */,-8 , 3/* "LEFT_PARENTHESE" */,-8 , 8/* "COLUMN" */,-8 , 11/* "OPERATOR" */,-8 , 10/* "WORD" */,-8 , 9/* "STRING" */,-8 , 6/* "OR" */,-8 , 5/* "AND" */,-8 , 4/* "RIGHT_PARENTHESE" */,-8 ),\n
\t/* State 7 */ new Array( 7/* "NOT" */,5 , 3/* "LEFT_PARENTHESE" */,7 , 8/* "COLUMN" */,8 , 11/* "OPERATOR" */,10 , 10/* "WORD" */,12 , 9/* "STRING" */,13 ),\n
\t/* State 8 */ new Array( 3/* "LEFT_PARENTHESE" */,7 , 8/* "COLUMN" */,8 , 11/* "OPERATOR" */,10 , 10/* "WORD" */,12 , 9/* "STRING" */,13 ),\n
\t/* State 9 */ new Array( 19/* "$" */,-11 , 7/* "NOT" */,-11 , 3/* "LEFT_PARENTHESE" */,-11 , 8/* "COLUMN" */,-11 , 11/* "OPERATOR" */,-11 , 10/* "WORD" */,-11 , 9/* "STRING" */,-11 , 6/* "OR" */,-11 , 5/* "AND" */,-11 , 4/* "RIGHT_PARENTHESE" */,-11 ),\n
\t/* State 10 */ new Array( 10/* "WORD" */,12 , 9/* "STRING" */,13 ),\n
\t/* State 11 */ new Array( 19/* "$" */,-13 , 7/* "NOT" */,-13 , 3/* "LEFT_PARENTHESE" */,-13 , 8/* "COLUMN" */,-13 , 11/* "OPERATOR" */,-13 , 10/* "WORD" */,-13 , 9/* "STRING" */,-13 , 6/* "OR" */,-13 , 5/* "AND" */,-13 , 4/* "RIGHT_PARENTHESE" */,-13 ),\n
\t/* State 12 */ new Array( 19/* "$" */,-14 , 7/* "NOT" */,-14 , 3/* "LEFT_PARENTHESE" */,-14 , 8/* "COLUMN" */,-14 , 11/* "OPERATOR" */,-14 , 10/* "WORD" */,-14 , 9/* "STRING" */,-14 , 6/* "OR" */,-14 , 5/* "AND" */,-14 , 4/* "RIGHT_PARENTHESE" */,-14 ),\n
\t/* State 13 */ new Array( 19/* "$" */,-15 , 7/* "NOT" */,-15 , 3/* "LEFT_PARENTHESE" */,-15 , 8/* "COLUMN" */,-15 , 11/* "OPERATOR" */,-15 , 10/* "WORD" */,-15 , 9/* "STRING" */,-15 , 6/* "OR" */,-15 , 5/* "AND" */,-15 , 4/* "RIGHT_PARENTHESE" */,-15 ),\n
\t/* State 14 */ new Array( 7/* "NOT" */,5 , 3/* "LEFT_PARENTHESE" */,7 , 8/* "COLUMN" */,8 , 11/* "OPERATOR" */,10 , 10/* "WORD" */,12 , 9/* "STRING" */,13 ),\n
\t/* State 15 */ new Array( 19/* "$" */,-3 , 4/* "RIGHT_PARENTHESE" */,-3 ),\n
\t/* State 16 */ new Array( 7/* "NOT" */,5 , 3/* "LEFT_PARENTHESE" */,7 , 8/* "COLUMN" */,8 , 11/* "OPERATOR" */,10 , 10/* "WORD" */,12 , 9/* "STRING" */,13 ),\n
\t/* State 17 */ new Array( 19/* "$" */,-7 , 7/* "NOT" */,-7 , 3/* "LEFT_PARENTHESE" */,-7 , 8/* "COLUMN" */,-7 , 11/* "OPERATOR" */,-7 , 10/* "WORD" */,-7 , 9/* "STRING" */,-7 , 6/* "OR" */,-7 , 5/* "AND" */,-7 , 4/* "RIGHT_PARENTHESE" */,-7 ),\n
\t/* State 18 */ new Array( 4/* "RIGHT_PARENTHESE" */,23 ),\n
\t/* State 19 */ new Array( 19/* "$" */,-10 , 7/* "NOT" */,-10 , 3/* "LEFT_PARENTHESE" */,-10 , 8/* "COLUMN" */,-10 , 11/* "OPERATOR" */,-10 , 10/* "WORD" */,-10 , 9/* "STRING" */,-10 , 6/* "OR" */,-10 , 5/* "AND" */,-10 , 4/* "RIGHT_PARENTHESE" */,-10 ),\n
\t/* State 20 */ new Array( 19/* "$" */,-12 , 7/* "NOT" */,-12 , 3/* "LEFT_PARENTHESE" */,-12 , 8/* "COLUMN" */,-12 , 11/* "OPERATOR" */,-12 , 10/* "WORD" */,-12 , 9/* "STRING" */,-12 , 6/* "OR" */,-12 , 5/* "AND" */,-12 , 4/* "RIGHT_PARENTHESE" */,-12 ),\n
\t/* State 21 */ new Array( 19/* "$" */,-4 , 4/* "RIGHT_PARENTHESE" */,-4 ),\n
\t/* State 22 */ new Array( 19/* "$" */,-6 , 7/* "NOT" */,-6 , 3/* "LEFT_PARENTHESE" */,-6 , 8/* "COLUMN" */,-6 , 11/* "OPERATOR" */,-6 , 10/* "WORD" */,-6 , 9/* "STRING" */,-6 , 6/* "OR" */,-6 , 4/* "RIGHT_PARENTHESE" */,-6 ),\n
\t/* State 23 */ new Array( 19/* "$" */,-9 , 7/* "NOT" */,-9 , 3/* "LEFT_PARENTHESE" */,-9 , 8/* "COLUMN" */,-9 , 11/* "OPERATOR" */,-9 , 10/* "WORD" */,-9 , 9/* "STRING" */,-9 , 6/* "OR" */,-9 , 5/* "AND" */,-9 , 4/* "RIGHT_PARENTHESE" */,-9 )\n
);\n
\n
/* Goto-Table */\n
var goto_tab = new Array(\n
\t/* State 0 */ new Array( 13/* begin */,1 , 12/* search_text */,2 , 14/* and_expression */,3 , 15/* boolean_expression */,4 , 16/* expression */,6 , 17/* value */,9 , 18/* string */,11 ),\n
\t/* State 1 */ new Array(  ),\n
\t/* State 2 */ new Array(  ),\n
\t/* State 3 */ new Array( 12/* search_text */,15 , 14/* and_expression */,3 , 15/* boolean_expression */,4 , 16/* expression */,6 , 17/* value */,9 , 18/* string */,11 ),\n
\t/* State 4 */ new Array(  ),\n
\t/* State 5 */ new Array( 16/* expression */,17 , 17/* value */,9 , 18/* string */,11 ),\n
\t/* State 6 */ new Array(  ),\n
\t/* State 7 */ new Array( 12/* search_text */,18 , 14/* and_expression */,3 , 15/* boolean_expression */,4 , 16/* expression */,6 , 17/* value */,9 , 18/* string */,11 ),\n
\t/* State 8 */ new Array( 16/* expression */,19 , 17/* value */,9 , 18/* string */,11 ),\n
\t/* State 9 */ new Array(  ),\n
\t/* State 10 */ new Array( 18/* string */,20 ),\n
\t/* State 11 */ new Array(  ),\n
\t/* State 12 */ new Array(  ),\n
\t/* State 13 */ new Array(  ),\n
\t/* State 14 */ new Array( 12/* search_text */,21 , 14/* and_expression */,3 , 15/* boolean_expression */,4 , 16/* expression */,6 , 17/* value */,9 , 18/* string */,11 ),\n
\t/* State 15 */ new Array(  ),\n
\t/* State 16 */ new Array( 14/* and_expression */,22 , 15/* boolean_expression */,4 , 16/* expression */,6 , 17/* value */,9 , 18/* string */,11 ),\n
\t/* State 17 */ new Array(  ),\n
\t/* State 18 */ new Array(  ),\n
\t/* State 19 */ new Array(  ),\n
\t/* State 20 */ new Array(  ),\n
\t/* State 21 */ new Array(  ),\n
\t/* State 22 */ new Array(  ),\n
\t/* State 23 */ new Array(  )\n
);\n
\n
\n
\n
/* Symbol labels */\n
var labels = new Array(\n
\t"begin\'" /* Non-terminal symbol */,\n
\t"WHITESPACE" /* Terminal symbol */,\n
\t"WHITESPACE" /* Terminal symbol */,\n
\t"LEFT_PARENTHESE" /* Terminal symbol */,\n
\t"RIGHT_PARENTHESE" /* Terminal symbol */,\n
\t"AND" /* Terminal symbol */,\n
\t"OR" /* Terminal symbol */,\n
\t"NOT" /* Terminal symbol */,\n
\t"COLUMN" /* Terminal symbol */,\n
\t"STRING" /* Terminal symbol */,\n
\t"WORD" /* Terminal symbol */,\n
\t"OPERATOR" /* Terminal symbol */,\n
\t"search_text" /* Non-terminal symbol */,\n
\t"begin" /* Non-terminal symbol */,\n
\t"and_expression" /* Non-terminal symbol */,\n
\t"boolean_expression" /* Non-terminal symbol */,\n
\t"expression" /* Non-terminal symbol */,\n
\t"value" /* Non-terminal symbol */,\n
\t"string" /* Non-terminal symbol */,\n
\t"$" /* Terminal symbol */\n
);\n
\n
\n
\t\n
\tinfo.offset = 0;\n
\tinfo.src = src;\n
\tinfo.att = new String();\n
\t\n
\tif( !err_off )\n
\t\terr_off\t= new Array();\n
\tif( !err_la )\n
\terr_la = new Array();\n
\t\n
\tsstack.push( 0 );\n
\tvstack.push( 0 );\n
\t\n
\tla = __NODEJS_lex( info );\n
\n
\twhile( true )\n
\t{\n
\t\tact = 25;\n
\t\tfor( var i = 0; i < act_tab[sstack[sstack.length-1]].length; i+=2 )\n
\t\t{\n
\t\t\tif( act_tab[sstack[sstack.length-1]][i] == la )\n
\t\t\t{\n
\t\t\t\tact = act_tab[sstack[sstack.length-1]][i+1];\n
\t\t\t\tbreak;\n
\t\t\t}\n
\t\t}\n
\n
\t\tif( NODEJS__dbg_withtrace && sstack.length > 0 )\n
\t\t{\n
\t\t\t__NODEJS_dbg_print( "\\nState " + sstack[sstack.length-1] + "\\n" +\n
\t\t\t\t\t\t\t"\\tLookahead: " + labels[la] + " (\\"" + info.att + "\\")\\n" +\n
\t\t\t\t\t\t\t"\\tAction: " + act + "\\n" + \n
\t\t\t\t\t\t\t"\\tSource: \\"" + info.src.substr( info.offset, 30 ) + ( ( info.offset + 30 < info.src.length ) ?\n
\t\t\t\t\t\t\t\t\t"..." : "" ) + "\\"\\n" +\n
\t\t\t\t\t\t\t"\\tStack: " + sstack.join() + "\\n" +\n
\t\t\t\t\t\t\t"\\tValue stack: " + vstack.join() + "\\n" );\n
\t\t}\n
\t\t\n
\t\t\t\n
\t\t//Panic-mode: Try recovery when parse-error occurs!\n
\t\tif( act == 25 )\n
\t\t{\n
\t\t\tif( NODEJS__dbg_withtrace )\n
\t\t\t\t__NODEJS_dbg_print( "Error detected: There is no reduce or shift on the symbol " + labels[la] );\n
\t\t\t\n
\t\t\terr_cnt++;\n
\t\t\terr_off.push( info.offset - info.att.length );\t\t\t\n
\t\t\terr_la.push( new Array() );\n
\t\t\tfor( var i = 0; i < act_tab[sstack[sstack.length-1]].length; i+=2 )\n
\t\t\t\terr_la[err_la.length-1].push( labels[act_tab[sstack[sstack.length-1]][i]] );\n
\t\t\t\n
\t\t\t//Remember the original stack!\n
\t\t\tvar rsstack = new Array();\n
\t\t\tvar rvstack = new Array();\n
\t\t\tfor( var i = 0; i < sstack.length; i++ )\n
\t\t\t{\n
\t\t\t\trsstack[i] = sstack[i];\n
\t\t\t\trvstack[i] = vstack[i];\n
\t\t\t}\n
\t\t\t\n
\t\t\twhile( act == 25 && la != 19 )\n
\t\t\t{\n
\t\t\t\tif( NODEJS__dbg_withtrace )\n
\t\t\t\t\t__NODEJS_dbg_print( "\\tError recovery\\n" +\n
\t\t\t\t\t\t\t\t\t"Current lookahead: " + labels[la] + " (" + info.att + ")\\n" +\n
\t\t\t\t\t\t\t\t\t"Action: " + act + "\\n\\n" );\n
\t\t\t\tif( la == -1 )\n
\t\t\t\t\tinfo.offset++;\n
\t\t\t\t\t\n
\t\t\t\twhile( act == 25 && sstack.length > 0 )\n
\t\t\t\t{\n
\t\t\t\t\tsstack.pop();\n
\t\t\t\t\tvstack.pop();\n
\t\t\t\t\t\n
\t\t\t\t\tif( sstack.length == 0 )\n
\t\t\t\t\t\tbreak;\n
\t\t\t\t\t\t\n
\t\t\t\t\tact = 25;\n
\t\t\t\t\tfor( var i = 0; i < act_tab[sstack[sstack.length-1]].length; i+=2 )\n
\t\t\t\t\t{\n
\t\t\t\t\t\tif( act_tab[sstack[sstack.length-1]][i] == la )\n
\t\t\t\t\t\t{\n
\t\t\t\t\t\t\tact = act_tab[sstack[sstack.length-1]][i+1];\n
\t\t\t\t\t\t\tbreak;\n
\t\t\t\t\t\t}\n
\t\t\t\t\t}\n
\t\t\t\t}\n
\t\t\t\t\n
\t\t\t\tif( act != 25 )\n
\t\t\t\t\tbreak;\n
\t\t\t\t\n
\t\t\t\tfor( var i = 0; i < rsstack.length; i++ )\n
\t\t\t\t{\n
\t\t\t\t\tsstack.push( rsstack[i] );\n
\t\t\t\t\tvstack.push( rvstack[i] );\n
\t\t\t\t}\n
\t\t\t\t\n
\t\t\t\tla = __NODEJS_lex( info );\n
\t\t\t}\n
\t\t\t\n
\t\t\tif( act == 25 )\n
\t\t\t{\n
\t\t\t\tif( NODEJS__dbg_withtrace )\n
\t\t\t\t\t__NODEJS_dbg_print( "\\tError recovery failed, terminating parse process..." );\n
\t\t\t\tbreak;\n
\t\t\t}\n
\n
\n
\t\t\tif( NODEJS__dbg_withtrace )\n
\t\t\t\t__NODEJS_dbg_print( "\\tError recovery succeeded, continuing" );\n
\t\t}\n
\t\t\n
\t\t/*\n
\t\tif( act == 25 )\n
\t\t\tbreak;\n
\t\t*/\n
\t\t\n
\t\t\n
\t\t//Shift\n
\t\tif( act > 0 )\n
\t\t{\t\t\t\n
\t\t\tif( NODEJS__dbg_withtrace )\n
\t\t\t\t__NODEJS_dbg_print( "Shifting symbol: " + labels[la] + " (" + info.att + ")" );\n
\t\t\n
\t\t\tsstack.push( act );\n
\t\t\tvstack.push( info.att );\n
\t\t\t\n
\t\t\tla = __NODEJS_lex( info );\n
\t\t\t\n
\t\t\tif( NODEJS__dbg_withtrace )\n
\t\t\t\t__NODEJS_dbg_print( "\\tNew lookahead symbol: " + labels[la] + " (" + info.att + ")" );\n
\t\t}\n
\t\t//Reduce\n
\t\telse\n
\t\t{\t\t\n
\t\t\tact *= -1;\n
\t\t\t\n
\t\t\tif( NODEJS__dbg_withtrace )\n
\t\t\t\t__NODEJS_dbg_print( "Reducing by producution: " + act );\n
\t\t\t\n
\t\t\trval = void(0);\n
\t\t\t\n
\t\t\tif( NODEJS__dbg_withtrace )\n
\t\t\t\t__NODEJS_dbg_print( "\\tPerforming semantic action..." );\n
\t\t\t\n
switch( act )\n
{\n
\tcase 0:\n
\t{\n
\t\trval = vstack[ vstack.length - 1 ];\n
\t}\n
\tbreak;\n
\tcase 1:\n
\t{\n
\t\t result = vstack[ vstack.length - 1 ]; \n
\t}\n
\tbreak;\n
\tcase 2:\n
\t{\n
\t\t rval = vstack[ vstack.length - 1 ]; \n
\t}\n
\tbreak;\n
\tcase 3:\n
\t{\n
\t\t rval = mkComplexQuery(\'OR\',[vstack[ vstack.length - 2 ],vstack[ vstack.length - 1 ]]); \n
\t}\n
\tbreak;\n
\tcase 4:\n
\t{\n
\t\t rval = mkComplexQuery(\'OR\',[vstack[ vstack.length - 3 ],vstack[ vstack.length - 1 ]]); \n
\t}\n
\tbreak;\n
\tcase 5:\n
\t{\n
\t\t rval = vstack[ vstack.length - 1 ] ; \n
\t}\n
\tbreak;\n
\tcase 6:\n
\t{\n
\t\t rval = mkComplexQuery(\'AND\',[vstack[ vstack.length - 3 ],vstack[ vstack.length - 1 ]]); \n
\t}\n
\tbreak;\n
\tcase 7:\n
\t{\n
\t\t rval = mkNotQuery(vstack[ vstack.length - 1 ]); \n
\t}\n
\tbreak;\n
\tcase 8:\n
\t{\n
\t\t rval = vstack[ vstack.length - 1 ]; \n
\t}\n
\tbreak;\n
\tcase 9:\n
\t{\n
\t\t rval = vstack[ vstack.length - 2 ]; \n
\t}\n
\tbreak;\n
\tcase 10:\n
\t{\n
\t\t simpleQuerySetKey(vstack[ vstack.length - 1 ],vstack[ vstack.length - 2 ].split(\':\').slice(0,-1).join(\':\')); rval = vstack[ vstack.length - 1 ]; \n
\t}\n
\tbreak;\n
\tcase 11:\n
\t{\n
\t\t rval = vstack[ vstack.length - 1 ]; \n
\t}\n
\tbreak;\n
\tcase 12:\n
\t{\n
\t\t vstack[ vstack.length - 1 ].operator = vstack[ vstack.length - 2 ] ; rval = vstack[ vstack.length - 1 ]; \n
\t}\n
\tbreak;\n
\tcase 13:\n
\t{\n
\t\t rval = vstack[ vstack.length - 1 ]; \n
\t}\n
\tbreak;\n
\tcase 14:\n
\t{\n
\t\t rval = mkSimpleQuery(\'\',vstack[ vstack.length - 1 ]); \n
\t}\n
\tbreak;\n
\tcase 15:\n
\t{\n
\t\t rval = mkSimpleQuery(\'\',vstack[ vstack.length - 1 ].split(\'"\').slice(1,-1).join(\'"\')); \n
\t}\n
\tbreak;\n
}\n
\n
\n
\n
\t\t\tif( NODEJS__dbg_withtrace )\n
\t\t\t\t__NODEJS_dbg_print( "\\tPopping " + pop_tab[act][1] + " off the stack..." );\n
\t\t\t\t\n
\t\t\tfor( var i = 0; i < pop_tab[act][1]; i++ )\n
\t\t\t{\n
\t\t\t\tsstack.pop();\n
\t\t\t\tvstack.pop();\n
\t\t\t}\n
\t\t\t\t\t\t\t\t\t\n
\t\t\tgo = -1;\n
\t\t\tfor( var i = 0; i < goto_tab[sstack[sstack.length-1]].length; i+=2 )\n
\t\t\t{\n
\t\t\t\tif( goto_tab[sstack[sstack.length-1]][i] == pop_tab[act][0] )\n
\t\t\t\t{\n
\t\t\t\t\tgo = goto_tab[sstack[sstack.length-1]][i+1];\n
\t\t\t\t\tbreak;\n
\t\t\t\t}\n
\t\t\t}\n
\t\t\t\n
\t\t\tif( act == 0 )\n
\t\t\t\tbreak;\n
\t\t\t\t\n
\t\t\tif( NODEJS__dbg_withtrace )\n
\t\t\t\t__NODEJS_dbg_print( "\\tPushing non-terminal " + labels[ pop_tab[act][0] ] );\n
\t\t\t\t\n
\t\t\tsstack.push( go );\n
\t\t\tvstack.push( rval );\t\t\t\n
\t\t}\n
\t\t\n
\t\tif( NODEJS__dbg_withtrace )\n
\t\t{\t\t\n
\t\t\talert( NODEJS__dbg_string );\n
\t\t\tNODEJS__dbg_string = new String();\n
\t\t}\n
\t}\n
\n
\tif( NODEJS__dbg_withtrace )\n
\t{\n
\t\t__NODEJS_dbg_print( "\\nParse complete." );\n
\t\talert( NODEJS__dbg_string );\n
\t}\n
\t\n
\treturn err_cnt;\n
}\n
\n
\n
\n
var arrayExtend = function () {\n
  var j, i, newlist = [], list_list = arguments;\n
  for (j = 0; j < list_list.length; j += 1) {\n
    for (i = 0; i < list_list[j].length; i += 1) {\n
      newlist.push(list_list[j][i]);\n
    }\n
  }\n
  return newlist;\n
\n
}, mkSimpleQuery = function (key, value, operator) {\n
  var object = {"type": "simple", "key": key, "value": value};\n
  if (operator !== undefined) {\n
    object.operator = operator;\n
  }\n
  return object;\n
\n
}, mkNotQuery = function (query) {\n
  if (query.operator === "NOT") {\n
    return query.query_list[0];\n
  }\n
  return {"type": "complex", "operator": "NOT", "query_list": [query]};\n
\n
}, mkComplexQuery = function (operator, query_list) {\n
  var i, query_list2 = [];\n
  for (i = 0; i < query_list.length; i += 1) {\n
    if (query_list[i].operator === operator) {\n
      query_list2 = arrayExtend(query_list2, query_list[i].query_list);\n
    } else {\n
      query_list2.push(query_list[i]);\n
    }\n
  }\n
  return {type:"complex",operator:operator,query_list:query_list2};\n
\n
}, simpleQuerySetKey = function (query, key) {\n
  var i;\n
  if (query.type === "complex") {\n
    for (i = 0; i < query.query_list.length; ++i) {\n
      simpleQuerySetKey (query.query_list[i],key);\n
    }\n
    return true;\n
  }\n
  if (query.type === "simple" && !query.key) {\n
    query.key = key;\n
    return true;\n
  }\n
  return false;\n
},\n
  error_offsets = [],\n
  error_lookaheads = [],\n
  error_count = 0,\n
  result;\n
\n
if ((error_count = __NODEJS_parse(string, error_offsets, error_lookaheads)) > 0) {\n
  var i;\n
  for (i = 0; i < error_count; i += 1) {\n
    throw new Error("Parse error near \\"" +\n
                    string.substr(error_offsets[i]) +\n
                    "\\", expecting \\"" +\n
                    error_lookaheads[i].join() + "\\"");\n
  }\n
}\n
\n
\n
  return result;\n
} // parseStringToObject\n
\n
_export(\'parseStringToObject\', parseStringToObject);\n
\n
/*jslint indent: 2, maxlen: 80, sloppy: true */\n
\n
var query_class_dict = {};\n
\n
/*jslint indent: 2, maxlen: 80, sloppy: true, nomen: true */\n
/*global Query: true, query_class_dict: true, inherits: true,\n
         _export, QueryFactory, RSVP, sequence */\n
\n
/**\n
 * The ComplexQuery inherits from Query, and compares one or several metadata\n
 * values.\n
 *\n
 * @class ComplexQuery\n
 * @extends Query\n
 * @param  {Object} [spec={}] The specifications\n
 * @param  {String} [spec.operator="AND"] The compare method to use\n
 * @param  {String} spec.key The metadata key\n
 * @param  {String} spec.value The value of the metadata to compare\n
 */\n
function ComplexQuery(spec, key_schema) {\n
  Query.call(this);\n
\n
  /**\n
   * Logical operator to use to compare object values\n
   *\n
   * @attribute operator\n
   * @type String\n
   * @default "AND"\n
   * @optional\n
   */\n
  this.operator = spec.operator || "AND";\n
\n
  /**\n
   * The sub Query list which are used to query an item.\n
   *\n
   * @attribute query_list\n
   * @type Array\n
   * @default []\n
   * @optional\n
   */\n
  this.query_list = spec.query_list || [];\n
  /*jslint unparam: true*/\n
  this.query_list = this.query_list.map(\n
    // decorate the map to avoid sending the index as key_schema argument\n
    function (o, i) { return QueryFactory.create(o, key_schema); }\n
  );\n
  /*jslint unparam: false*/\n
\n
}\n
inherits(ComplexQuery, Query);\n
\n
/**\n
 * #crossLink "Query/match:method"\n
 */\n
ComplexQuery.prototype.match = function (item) {\n
  var operator = this.operator;\n
  if (!(/^(?:AND|OR|NOT)$/i.test(operator))) {\n
    operator = "AND";\n
  }\n
  return this[operator.toUpperCase()](item);\n
};\n
\n
/**\n
 * #crossLink "Query/toString:method"\n
 */\n
ComplexQuery.prototype.toString = function () {\n
  var str_list = ["("], this_operator = this.operator;\n
  this.query_list.forEach(function (query) {\n
    str_list.push(query.toString());\n
    str_list.push(this_operator);\n
  });\n
  str_list[str_list.length - 1] = ")"; // replace last operator\n
  return str_list.join(" ");\n
};\n
\n
/**\n
 * #crossLink "Query/serialized:method"\n
 */\n
ComplexQuery.prototype.serialized = function () {\n
  var s = {\n
    "type": "complex",\n
    "operator": this.operator,\n
    "query_list": []\n
  };\n
  this.query_list.forEach(function (query) {\n
    s.query_list.push(query.serialized());\n
  });\n
  return s;\n
};\n
ComplexQuery.prototype.toJSON = ComplexQuery.prototype.serialized;\n
\n
/**\n
 * Comparison operator, test if all sub queries match the\n
 * item value\n
 *\n
 * @method AND\n
 * @param  {Object} item The item to match\n
 * @return {Boolean} true if all match, false otherwise\n
 */\n
ComplexQuery.prototype.AND = function (item) {\n
  var j, promises = [];\n
  for (j = 0; j < this.query_list.length; j += 1) {\n
    promises.push(this.query_list[j].match(item));\n
  }\n
\n
  function cancel() {\n
    var i;\n
    for (i = 0; i < promises.length; i += 1) {\n
      if (typeof promises.cancel === \'function\') {\n
        promises.cancel();\n
      }\n
    }\n
  }\n
\n
  return new RSVP.Promise(function (resolve, reject) {\n
    var i, count = 0;\n
    function resolver(value) {\n
      if (!value) {\n
        resolve(false);\n
      }\n
      count += 1;\n
      if (count === promises.length) {\n
        resolve(true);\n
      }\n
    }\n
\n
    function rejecter(err) {\n
      reject(err);\n
      cancel();\n
    }\n
\n
    for (i = 0; i < promises.length; i += 1) {\n
      promises[i].then(resolver, rejecter);\n
    }\n
  }, cancel);\n
};\n
\n
/**\n
 * Comparison operator, test if one of the sub queries matches the\n
 * item value\n
 *\n
 * @method OR\n
 * @param  {Object} item The item to match\n
 * @return {Boolean} true if one match, false otherwise\n
 */\n
ComplexQuery.prototype.OR =  function (item) {\n
  var j, promises = [];\n
  for (j = 0; j < this.query_list.length; j += 1) {\n
    promises.push(this.query_list[j].match(item));\n
  }\n
\n
  function cancel() {\n
    var i;\n
    for (i = 0; i < promises.length; i += 1) {\n
      if (typeof promises.cancel === \'function\') {\n
        promises.cancel();\n
      }\n
    }\n
  }\n
\n
  return new RSVP.Promise(function (resolve, reject) {\n
    var i, count = 0;\n
    function resolver(value) {\n
      if (value) {\n
        resolve(true);\n
      }\n
      count += 1;\n
      if (count === promises.length) {\n
        resolve(false);\n
      }\n
    }\n
\n
    function rejecter(err) {\n
      reject(err);\n
      cancel();\n
    }\n
\n
    for (i = 0; i < promises.length; i += 1) {\n
      promises[i].then(resolver, rejecter);\n
    }\n
  }, cancel);\n
};\n
\n
/**\n
 * Comparison operator, test if the sub query does not match the\n
 * item value\n
 *\n
 * @method NOT\n
 * @param  {Object} item The item to match\n
 * @return {Boolean} true if one match, false otherwise\n
 */\n
ComplexQuery.prototype.NOT = function (item) {\n
  return sequence([function () {\n
    return this.query_list[0].match(item);\n
  }, function (answer) {\n
    return !answer;\n
  }]);\n
};\n
\n
query_class_dict.complex = ComplexQuery;\n
\n
_export("ComplexQuery", ComplexQuery);\n
\n
/*jslint indent: 2, maxlen: 80, sloppy: true, nomen: true */\n
/*global parseStringToObject: true, emptyFunction: true, sortOn: true, limit:\n
  true, select: true, _export: true, stringEscapeRegexpCharacters: true,\n
  deepClone, RSVP, sequence */\n
\n
/**\n
 * The query to use to filter a list of objects.\n
 * This is an abstract class.\n
 *\n
 * @class Query\n
 * @constructor\n
 */\n
function Query() {\n
\n
  /**\n
   * Called before parsing the query. Must be overridden!\n
   *\n
   * @method onParseStart\n
   * @param  {Object} object The object shared in the parse process\n
   * @param  {Object} option Some option gave in parse()\n
   */\n
  this.onParseStart = emptyFunction;\n
\n
  /**\n
   * Called when parsing a simple query. Must be overridden!\n
   *\n
   * @method onParseSimpleQuery\n
   * @param  {Object} object The object shared in the parse process\n
   * @param  {Object} option Some option gave in parse()\n
   */\n
  this.onParseSimpleQuery = emptyFunction;\n
\n
  /**\n
   * Called when parsing a complex query. Must be overridden!\n
   *\n
   * @method onParseComplexQuery\n
   * @param  {Object} object The object shared in the parse process\n
   * @param  {Object} option Some option gave in parse()\n
   */\n
  this.onParseComplexQuery = emptyFunction;\n
\n
  /**\n
   * Called after parsing the query. Must be overridden!\n
   *\n
   * @method onParseEnd\n
   * @param  {Object} object The object shared in the parse process\n
   * @param  {Object} option Some option gave in parse()\n
   */\n
  this.onParseEnd = emptyFunction;\n
\n
}\n
\n
/**\n
 * Filter the item list with matching item only\n
 *\n
 * @method exec\n
 * @param  {Array} item_list The list of object\n
 * @param  {Object} [option] Some operation option\n
 * @param  {Array} [option.select_list] A object keys to retrieve\n
 * @param  {Array} [option.sort_on] Couples of object keys and "ascending"\n
 *                 or "descending"\n
 * @param  {Array} [option.limit] Couple of integer, first is an index and\n
 *                 second is the length.\n
 */\n
Query.prototype.exec = function (item_list, option) {\n
  var i, promises = [];\n
  if (!Array.isArray(item_list)) {\n
    throw new TypeError("Query().exec(): Argument 1 is not of type \'array\'");\n
  }\n
  if (option === undefined) {\n
    option = {};\n
  }\n
  if (typeof option !== \'object\') {\n
    throw new TypeError("Query().exec(): " +\n
                        "Optional argument 2 is not of type \'object\'");\n
  }\n
  for (i = 0; i < item_list.length; i += 1) {\n
    if (!item_list[i]) {\n
      promises.push(RSVP.resolve(false));\n
    } else {\n
      promises.push(this.match(item_list[i]));\n
    }\n
  }\n
  return sequence([function () {\n
    return RSVP.all(promises);\n
  }, function (answers) {\n
    var j;\n
    for (j = answers.length - 1; j >= 0; j -= 1) {\n
      if (!answers[j]) {\n
        item_list.splice(j, 1);\n
      }\n
    }\n
    if (option.sort_on) {\n
      return sortOn(option.sort_on, item_list);\n
    }\n
  }, function () {\n
    if (option.limit) {\n
      return limit(option.limit, item_list);\n
    }\n
  }, function () {\n
    return select(option.select_list || [], item_list);\n
  }, function () {\n
    return item_list;\n
  }]);\n
};\n
\n
/**\n
 * Test if an item matches this query\n
 *\n
 * @method match\n
 * @param  {Object} item The object to test\n
 * @return {Boolean} true if match, false otherwise\n
 */\n
Query.prototype.match = function () {\n
  return RSVP.resolve(true);\n
};\n
\n
\n
/**\n
 * Browse the Query in deep calling parser method in each step.\n
 *\n
 * `onParseStart` is called first, on end `onParseEnd` is called.\n
 * It starts from the simple queries at the bottom of the tree calling the\n
 * parser method `onParseSimpleQuery`, and go up calling the\n
 * `onParseComplexQuery` method.\n
 *\n
 * @method parse\n
 * @param  {Object} option Any options you want (except \'parsed\')\n
 * @return {Any} The parse result\n
 */\n
Query.prototype.parse = function (option) {\n
  var that = this, object;\n
  /**\n
   * The recursive parser.\n
   *\n
   * @param  {Object} object The object shared in the parse process\n
   * @param  {Object} options Some options usable in the parseMethods\n
   * @return {Any} The parser result\n
   */\n
  function recParse(object, option) {\n
    var query = object.parsed;\n
    if (query.type === "complex") {\n
      return sequence([function () {\n
        return sequence(query.query_list.map(function (v, i) {\n
          /*jslint unparam: true */\n
          return function () {\n
            sequence([function () {\n
              object.parsed = query.query_list[i];\n
              return recParse(object, option);\n
            }, function () {\n
              query.query_list[i] = object.parsed;\n
            }]);\n
          };\n
        }));\n
      }, function () {\n
        object.parsed = query;\n
        return that.onParseComplexQuery(object, option);\n
      }]);\n
    }\n
    if (query.type === "simple") {\n
      return that.onParseSimpleQuery(object, option);\n
    }\n
  }\n
  object = {"parsed": JSON.parse(JSON.stringify(that.serialized()))};\n
  return sequence([function () {\n
    return that.onParseStart(object, option);\n
  }, function () {\n
    return recParse(object, option);\n
  }, function () {\n
    return that.onParseEnd(object, option);\n
  }, function () {\n
    return object.parsed;\n
  }]);\n
};\n
\n
/**\n
 * Convert this query to a parsable string.\n
 *\n
 * @method toString\n
 * @return {String} The string version of this query\n
 */\n
Query.prototype.toString = function () {\n
  return "";\n
};\n
\n
/**\n
 * Convert this query to an jsonable object in order to be remake thanks to\n
 * QueryFactory class.\n
 *\n
 * @method serialized\n
 * @return {Object} The jsonable object\n
 */\n
Query.prototype.serialized = function () {\n
  return undefined;\n
};\n
\n
_export("Query", Query);\n
\n
/*jslint indent: 2, maxlen: 80, sloppy: true, nomen: true */\n
/*global _export, ComplexQuery, SimpleQuery, Query, parseStringToObject,\n
  query_class_dict */\n
\n
/**\n
 * Provides static methods to create Query object\n
 *\n
 * @class QueryFactory\n
 */\n
function QueryFactory() {\n
  return;\n
}\n
\n
/**\n
 * Creates Query object from a search text string or a serialized version\n
 * of a Query.\n
 *\n
 * @method create\n
 * @static\n
 * @param  {Object,String} object The search text or the serialized version\n
 *         of a Query\n
 * @return {Query} A Query object\n
 */\n
QueryFactory.create = function (object, key_schema) {\n
  if (object === "") {\n
    return new Query();\n
  }\n
  if (typeof object === "string") {\n
    object = parseStringToObject(object);\n
  }\n
  if (typeof (object || {}).type === "string" &&\n
      query_class_dict[object.type]) {\n
    return new query_class_dict[object.type](object, key_schema);\n
  }\n
  throw new TypeError("QueryFactory.create(): " +\n
                      "Argument 1 is not a search text or a parsable object");\n
};\n
\n
_export("QueryFactory", QueryFactory);\n
\n
/*jslint indent: 2, maxlen: 80, sloppy: true, nomen: true */\n
/*global _export: true */\n
\n
function objectToSearchText(query) {\n
  var str_list = [];\n
  if (query.type === "complex") {\n
    str_list.push("(");\n
    (query.query_list || []).forEach(function (sub_query) {\n
      str_list.push(objectToSearchText(sub_query));\n
      str_list.push(query.operator);\n
    });\n
    str_list.length -= 1;\n
    str_list.push(")");\n
    return str_list.join(" ");\n
  }\n
  if (query.type === "simple") {\n
    return (query.key ? query.key + ": " : "") +\n
      (query.operator || "") + \' "\' + query.value + \'"\';\n
  }\n
  throw new TypeError("This object is not a query");\n
}\n
_export("objectToSearchText", objectToSearchText);\n
\n
/*jslint indent: 2, maxlen: 80, sloppy: true, nomen: true */\n
/*global Query: true, inherits: true, query_class_dict: true, _export: true,\n
  searchTextToRegExp, RSVP */\n
\n
var checkKeySchema = function (key_schema) {\n
  var prop;\n
\n
  if (key_schema !== undefined) {\n
    if (typeof key_schema !== \'object\') {\n
      throw new TypeError("SimpleQuery().create(): " +\n
                          "key_schema is not of type \'object\'");\n
    }\n
    // key_set is mandatory\n
    if (key_schema.key_set === undefined) {\n
      throw new TypeError("SimpleQuery().create(): " +\n
                          "key_schema has no \'key_set\' property");\n
    }\n
    for (prop in key_schema) {\n
      if (key_schema.hasOwnProperty(prop)) {\n
        switch (prop) {\n
        case \'key_set\':\n
        case \'cast_lookup\':\n
        case \'match_lookup\':\n
          break;\n
        default:\n
          throw new TypeError("SimpleQuery().create(): " +\n
                             "key_schema has unknown property \'" + prop + "\'");\n
        }\n
      }\n
    }\n
  }\n
};\n
\n
\n
/**\n
 * The SimpleQuery inherits from Query, and compares one metadata value\n
 *\n
 * @class SimpleQuery\n
 * @extends Query\n
 * @param  {Object} [spec={}] The specifications\n
 * @param  {String} [spec.operator="="] The compare method to use\n
 * @param  {String} spec.key The metadata key\n
 * @param  {String} spec.value The value of the metadata to compare\n
 */\n
function SimpleQuery(spec, key_schema) {\n
  Query.call(this);\n
\n
  checkKeySchema(key_schema);\n
\n
  this._key_schema = key_schema || {};\n
\n
  /**\n
   * Operator to use to compare object values\n
   *\n
   * @attribute operator\n
   * @type String\n
   * @optional\n
   */\n
  this.operator = spec.operator;\n
\n
  /**\n
   * Key of the object which refers to the value to compare\n
   *\n
   * @attribute key\n
   * @type String\n
   */\n
  this.key = spec.key;\n
\n
  /**\n
   * Value is used to do the comparison with the object value\n
   *\n
   * @attribute value\n
   * @type String\n
   */\n
  this.value = spec.value;\n
\n
}\n
inherits(SimpleQuery, Query);\n
\n
\n
var checkKey = function (key) {\n
  var prop;\n
\n
  if (key.read_from === undefined) {\n
    throw new TypeError("Custom key is missing the read_from property");\n
  }\n
\n
  for (prop in key) {\n
    if (key.hasOwnProperty(prop)) {\n
      switch (prop) {\n
      case \'read_from\':\n
      case \'cast_to\':\n
      case \'equal_match\':\n
        break;\n
      default:\n
        throw new TypeError("Custom key has unknown property \'" +\n
                            prop + "\'");\n
      }\n
    }\n
  }\n
};\n
\n
\n
/**\n
 * #crossLink "Query/match:method"\n
 */\n
SimpleQuery.prototype.match = function (item) {\n
  var object_value = null,\n
    equal_match = null,\n
    cast_to = null,\n
    matchMethod = null,\n
    operator = this.operator,\n
    value = null,\n
    key = this.key;\n
\n
  /*jslint regexp: true */\n
  if (!(/^(?:!?=|<=?|>=?)$/i.test(operator))) {\n
    // `operator` is not correct, we have to change it to "like" or "="\n
    if (/%/.test(this.value)) {\n
      // `value` contains a non escaped `%`\n
      operator = "like";\n
    } else {\n
      // `value` does not contain non escaped `%`\n
      operator = "=";\n
    }\n
  }\n
\n
  matchMethod = this[operator];\n
\n
  if (this._key_schema.key_set && this._key_schema.key_set[key] !== undefined) {\n
    key = this._key_schema.key_set[key];\n
  }\n
\n
  if (typeof key === \'object\') {\n
    checkKey(key);\n
    object_value = item[key.read_from];\n
\n
    equal_match = key.equal_match;\n
\n
    // equal_match can be a string\n
    if (typeof equal_match === \'string\') {\n
      // XXX raise error if equal_match not in match_lookup\n
      equal_match = this._key_schema.match_lookup[equal_match];\n
    }\n
\n
    // equal_match overrides the default \'=\' operator\n
    if (equal_match !== undefined) {\n
      matchMethod = (operator === "=" || operator === "like" ?\n
                     equal_match : matchMethod);\n
    }\n
\n
    value = this.value;\n
    cast_to = key.cast_to;\n
    if (cast_to) {\n
      // cast_to can be a string\n
      if (typeof cast_to === \'string\') {\n
        // XXX raise error if cast_to not in cast_lookup\n
        cast_to = this._key_schema.cast_lookup[cast_to];\n
      }\n
\n
      value = cast_to(value);\n
      object_value = cast_to(object_value);\n
    }\n
  } else {\n
    object_value = item[key];\n
    value = this.value;\n
  }\n
  if (object_value === undefined || value === undefined) {\n
    return RSVP.resolve(false);\n
  }\n
  return matchMethod(object_value, value);\n
};\n
\n
/**\n
 * #crossLink "Query/toString:method"\n
 */\n
SimpleQuery.prototype.toString = function () {\n
  return (this.key ? this.key + ":" : "") +\n
    (this.operator ? " " + this.operator : "") + \' "\' + this.value + \'"\';\n
};\n
\n
/**\n
 * #crossLink "Query/serialized:method"\n
 */\n
SimpleQuery.prototype.serialized = function () {\n
  var object = {\n
    "type": "simple",\n
    "key": this.key,\n
    "value": this.value\n
  };\n
  if (this.operator !== undefined) {\n
    object.operator = this.operator;\n
  }\n
  return object;\n
};\n
SimpleQuery.prototype.toJSON = SimpleQuery.prototype.serialized;\n
\n
/**\n
 * Comparison operator, test if this query value matches the item value\n
 *\n
 * @method =\n
 * @param  {String} object_value The value to compare\n
 * @param  {String} comparison_value The comparison value\n
 * @return {Boolean} true if match, false otherwise\n
 */\n
SimpleQuery.prototype["="] = function (object_value, comparison_value) {\n
  var value, i;\n
  if (!Array.isArray(object_value)) {\n
    object_value = [object_value];\n
  }\n
  for (i = 0; i < object_value.length; i += 1) {\n
    value = object_value[i];\n
    if (typeof value === \'object\' && value.hasOwnProperty(\'content\')) {\n
      value = value.content;\n
    }\n
    if (typeof value.cmp === "function") {\n
      return RSVP.resolve(value.cmp(comparison_value) === 0);\n
    }\n
    if (\n
      searchTextToRegExp(comparison_value.toString(), false).\n
        test(value.toString())\n
    ) {\n
      return RSVP.resolve(true);\n
    }\n
  }\n
  return RSVP.resolve(false);\n
};\n
\n
/**\n
 * Comparison operator, test if this query value matches the item value\n
 *\n
 * @method like\n
 * @param  {String} object_value The value to compare\n
 * @param  {String} comparison_value The comparison value\n
 * @return {Boolean} true if match, false otherwise\n
 */\n
SimpleQuery.prototype.like = function (object_value, comparison_value) {\n
  var value, i;\n
  if (!Array.isArray(object_value)) {\n
    object_value = [object_value];\n
  }\n
  for (i = 0; i < object_value.length; i += 1) {\n
    value = object_value[i];\n
    if (typeof value === \'object\' && value.hasOwnProperty(\'content\')) {\n
      value = value.content;\n
    }\n
    if (typeof value.cmp === "function") {\n
      return RSVP.resolve(value.cmp(comparison_value) === 0);\n
    }\n
    if (\n
      searchTextToRegExp(comparison_value.toString()).test(value.toString())\n
    ) {\n
      return RSVP.resolve(true);\n
    }\n
  }\n
  return RSVP.resolve(false);\n
};\n
\n
/**\n
 * Comparison operator, test if this query value does not match the item value\n
 *\n
 * @method !=\n
 * @param  {String} object_value The value to compare\n
 * @param  {String} comparison_value The comparison value\n
 * @return {Boolean} true if not match, false otherwise\n
 */\n
SimpleQuery.prototype["!="] = function (object_value, comparison_value) {\n
  var value, i;\n
  if (!Array.isArray(object_value)) {\n
    object_value = [object_value];\n
  }\n
  for (i = 0; i < object_value.length; i += 1) {\n
    value = object_value[i];\n
    if (typeof value === \'object\' && value.hasOwnProperty(\'content\')) {\n
      value = value.content;\n
    }\n
    if (typeof value.cmp === "function") {\n
      return RSVP.resolve(value.cmp(comparison_value) !== 0);\n
    }\n
    if (\n
      searchTextToRegExp(comparison_value.toString(), false).\n
        test(value.toString())\n
    ) {\n
      return RSVP.resolve(false);\n
    }\n
  }\n
  return RSVP.resolve(true);\n
};\n
\n
/**\n
 * Comparison operator, test if this query value is lower than the item value\n
 *\n
 * @method <\n
 * @param  {Number, String} object_value The value to compare\n
 * @param  {Number, String} comparison_value The comparison value\n
 * @return {Boolean} true if lower, false otherwise\n
 */\n
SimpleQuery.prototype["<"] = function (object_value, comparison_value) {\n
  var value;\n
  if (!Array.isArray(object_value)) {\n
    object_value = [object_value];\n
  }\n
  value = object_value[0];\n
  if (typeof value === \'object\' && value.hasOwnProperty(\'content\')) {\n
    value = value.content;\n
  }\n
  if (typeof value.cmp === "function") {\n
    return RSVP.resolve(value.cmp(comparison_value) < 0);\n
  }\n
  return RSVP.resolve(value < comparison_value);\n
};\n
\n
/**\n
 * Comparison operator, test if this query value is equal or lower than the\n
 * item value\n
 *\n
 * @method <=\n
 * @param  {Number, String} object_value The value to compare\n
 * @param  {Number, String} comparison_value The comparison value\n
 * @return {Boolean} true if equal or lower, false otherwise\n
 */\n
SimpleQuery.prototype["<="] = function (object_value, comparison_value) {\n
  var value;\n
  if (!Array.isArray(object_value)) {\n
    object_value = [object_value];\n
  }\n
  value = object_value[0];\n
  if (typeof value === \'object\' && value.hasOwnProperty(\'content\')) {\n
    value = value.content;\n
  }\n
  if (typeof value.cmp === "function") {\n
    return RSVP.resolve(value.cmp(comparison_value) <= 0);\n
  }\n
  return RSVP.resolve(value <= comparison_value);\n
};\n
\n
/**\n
 * Comparison operator, test if this query value is greater than the item\n
 * value\n
 *\n
 * @method >\n
 * @param  {Number, String} object_value The value to compare\n
 * @param  {Number, String} comparison_value The comparison value\n
 * @return {Boolean} true if greater, false otherwise\n
 */\n
SimpleQuery.prototype[">"] = function (object_value, comparison_value) {\n
  var value;\n
  if (!Array.isArray(object_value)) {\n
    object_value = [object_value];\n
  }\n
  value = object_value[0];\n
  if (typeof value === \'object\' && value.hasOwnProperty(\'content\')) {\n
    value = value.content;\n
  }\n
  if (typeof value.cmp === "function") {\n
    return RSVP.resolve(value.cmp(comparison_value) > 0);\n
  }\n
  return RSVP.resolve(value > comparison_value);\n
};\n
\n
/**\n
 * Comparison operator, test if this query value is equal or greater than the\n
 * item value\n
 *\n
 * @method >=\n
 * @param  {Number, String} object_value The value to compare\n
 * @param  {Number, String} comparison_value The comparison value\n
 * @return {Boolean} true if equal or greater, false otherwise\n
 */\n
SimpleQuery.prototype[">="] = function (object_value, comparison_value) {\n
  var value;\n
  if (!Array.isArray(object_value)) {\n
    object_value = [object_value];\n
  }\n
  value = object_value[0];\n
  if (typeof value === \'object\' && value.hasOwnProperty(\'content\')) {\n
    value = value.content;\n
  }\n
  if (typeof value.cmp === "function") {\n
    return RSVP.resolve(value.cmp(comparison_value) >= 0);\n
  }\n
  return RSVP.resolve(value >= comparison_value);\n
};\n
\n
query_class_dict.simple = SimpleQuery;\n
\n
_export("SimpleQuery", SimpleQuery);\n
\n
/*jslint indent: 2, maxlen: 80, sloppy: true, nomen: true */\n
/*global _export, RSVP */\n
\n
/**\n
 * Escapes regexp special chars from a string.\n
 *\n
 * @param  {String} string The string to escape\n
 * @return {String} The escaped string\n
 */\n
function stringEscapeRegexpCharacters(string) {\n
  if (typeof string === "string") {\n
    return string.replace(/([\\\\\\.\\$\\[\\]\\(\\)\\{\\}\\^\\?\\*\\+\\-])/g, "\\\\$1");\n
  }\n
  throw new TypeError("complex_queries.stringEscapeRegexpCharacters(): " +\n
                      "Argument no 1 is not of type \'string\'");\n
}\n
\n
_export("stringEscapeRegexpCharacters", stringEscapeRegexpCharacters);\n
\n
/**\n
 * Convert metadata values to array of strings. ex:\n
 *\n
 *     "a" -> ["a"],\n
 *     {"content": "a"} -> ["a"]\n
 *\n
 * @param  {Any} value The metadata value\n
 * @return {Array} The value in string array format\n
 */\n
function metadataValueToStringArray(value) {\n
  var i, new_value = [];\n
  if (value === undefined) {\n
    return undefined;\n
  }\n
  if (!Array.isArray(value)) {\n
    value = [value];\n
  }\n
  for (i = 0; i < value.length; i += 1) {\n
    if (typeof value[i] === \'object\') {\n
      new_value[i] = value[i].content;\n
    } else {\n
      new_value[i] = value[i];\n
    }\n
  }\n
  return new_value;\n
}\n
\n
/**\n
 * A sort function to sort items by key\n
 *\n
 * @param  {String} key The key to sort on\n
 * @param  {String} [way="ascending"] \'ascending\' or \'descending\'\n
 * @return {Function} The sort function\n
 */\n
function sortFunction(key, way) {\n
  if (way === \'descending\') {\n
    return function (a, b) {\n
      // this comparison is 5 times faster than json comparison\n
      var i, l;\n
      a = metadataValueToStringArray(a[key]) || [];\n
      b = metadataValueToStringArray(b[key]) || [];\n
      l = a.length > b.length ? a.length : b.length;\n
      for (i = 0; i < l; i += 1) {\n
        if (a[i] === undefined) {\n
          return 1;\n
        }\n
        if (b[i] === undefined) {\n
          return -1;\n
        }\n
        if (a[i] > b[i]) {\n
          return -1;\n
        }\n
        if (a[i] < b[i]) {\n
          return 1;\n
        }\n
      }\n
      return 0;\n
    };\n
  }\n
  if (way === \'ascending\') {\n
    return function (a, b) {\n
      // this comparison is 5 times faster than json comparison\n
      var i, l;\n
      a = metadataValueToStringArray(a[key]) || [];\n
      b = metadataValueToStringArray(b[key]) || [];\n
      l = a.length > b.length ? a.length : b.length;\n
      for (i = 0; i < l; i += 1) {\n
        if (a[i] === undefined) {\n
          return -1;\n
        }\n
        if (b[i] === undefined) {\n
          return 1;\n
        }\n
        if (a[i] > b[i]) {\n
          return 1;\n
        }\n
        if (a[i] < b[i]) {\n
          return -1;\n
        }\n
      }\n
      return 0;\n
    };\n
  }\n
  throw new TypeError("complex_queries.sortFunction(): " +\n
                      "Argument 2 must be \'ascending\' or \'descending\'");\n
}\n
\n
/**\n
 * Clones all native object in deep. Managed types: Object, Array, String,\n
 * Number, Boolean, null.\n
 *\n
 * @param  {A} object The object to clone\n
 * @return {A} The cloned object\n
 */\n
function deepClone(object) {\n
  var i, cloned;\n
  if (Array.isArray(object)) {\n
    cloned = [];\n
    for (i = 0; i < object.length; i += 1) {\n
      cloned[i] = deepClone(object[i]);\n
    }\n
    return cloned;\n
  }\n
  if (typeof object === "object") {\n
    cloned = {};\n
    for (i in object) {\n
      if (object.hasOwnProperty(i)) {\n
        cloned[i] = deepClone(object[i]);\n
      }\n
    }\n
    return cloned;\n
  }\n
  return object;\n
}\n
\n
/**\n
 * Inherits the prototype methods from one constructor into another. The\n
 * prototype of `constructor` will be set to a new object created from\n
 * `superConstructor`.\n
 *\n
 * @param  {Function} constructor The constructor which inherits the super one\n
 * @param  {Function} superConstructor The super constructor\n
 */\n
function inherits(constructor, superConstructor) {\n
  constructor.super_ = superConstructor;\n
  constructor.prototype = Object.create(superConstructor.prototype, {\n
    "constructor": {\n
      "configurable": true,\n
      "enumerable": false,\n
      "writable": true,\n
      "value": constructor\n
    }\n
  });\n
}\n
\n
/**\n
 * Does nothing\n
 */\n
function emptyFunction() {\n
  return;\n
}\n
\n
/**\n
 * Filter a list of items, modifying them to select only wanted keys. If\n
 * `clone` is true, then the method will act on a cloned list.\n
 *\n
 * @param  {Array} select_option Key list to keep\n
 * @param  {Array} list The item list to filter\n
 * @param  {Boolean} [clone=false] If true, modifies a clone of the list\n
 * @return {Array} The filtered list\n
 */\n
function select(select_option, list, clone) {\n
  var i, j, new_item;\n
  if (!Array.isArray(select_option)) {\n
    throw new TypeError("complex_queries.select(): " +\n
                        "Argument 1 is not of type Array");\n
  }\n
  if (!Array.isArray(list)) {\n
    throw new TypeError("complex_queries.select(): " +\n
                        "Argument 2 is not of type Array");\n
  }\n
  if (clone === true) {\n
    list = deepClone(list);\n
  }\n
  for (i = 0; i < list.length; i += 1) {\n
    new_item = {};\n
    for (j = 0; j < select_option.length; j += 1) {\n
      if (list[i].hasOwnProperty([select_option[j]])) {\n
        new_item[select_option[j]] = list[i][select_option[j]];\n
      }\n
    }\n
    for (j in new_item) {\n
      if (new_item.hasOwnProperty(j)) {\n
        list[i] = new_item;\n
        break;\n
      }\n
    }\n
  }\n
  return list;\n
}\n
\n
_export(\'select\', select);\n
\n
/**\n
 * Sort a list of items, according to keys and directions. If `clone` is true,\n
 * then the method will act on a cloned list.\n
 *\n
 * @param  {Array} sort_on_option List of couples [key, direction]\n
 * @param  {Array} list The item list to sort\n
 * @param  {Boolean} [clone=false] If true, modifies a clone of the list\n
 * @return {Array} The filtered list\n
 */\n
function sortOn(sort_on_option, list, clone) {\n
  var sort_index;\n
  if (!Array.isArray(sort_on_option)) {\n
    throw new TypeError("complex_queries.sortOn(): " +\n
                        "Argument 1 is not of type \'array\'");\n
  }\n
  if (clone) {\n
    list = deepClone(list);\n
  }\n
  for (sort_index = sort_on_option.length - 1; sort_index >= 0;\n
       sort_index -= 1) {\n
    list.sort(sortFunction(\n
      sort_on_option[sort_index][0],\n
      sort_on_option[sort_index][1]\n
    ));\n
  }\n
  return list;\n
}\n
\n
_export(\'sortOn\', sortOn);\n
\n
/**\n
 * Limit a list of items, according to index and length. If `clone` is true,\n
 * then the method will act on a cloned list.\n
 *\n
 * @param  {Array} limit_option A couple [from, length]\n
 * @param  {Array} list The item list to limit\n
 * @param  {Boolean} [clone=false] If true, modifies a clone of the list\n
 * @return {Array} The filtered list\n
 */\n
function limit(limit_option, list, clone) {\n
  if (!Array.isArray(limit_option)) {\n
    throw new TypeError("complex_queries.limit(): " +\n
                        "Argument 1 is not of type \'array\'");\n
  }\n
  if (!Array.isArray(list)) {\n
    throw new TypeError("complex_queries.limit(): " +\n
                        "Argument 2 is not of type \'array\'");\n
  }\n
  if (clone) {\n
    list = deepClone(list);\n
  }\n
  list.splice(0, limit_option[0]);\n
  if (limit_option[1]) {\n
    list.splice(limit_option[1]);\n
  }\n
  return list;\n
}\n
\n
_export(\'limit\', limit);\n
\n
/**\n
 * Convert a search text to a regexp.\n
 *\n
 * @param  {String} string The string to convert\n
 * @param  {Boolean} [use_wildcard_character=true] Use wildcard "%" and "_"\n
 * @return {RegExp} The search text regexp\n
 */\n
function searchTextToRegExp(string, use_wildcard_characters) {\n
  if (typeof string !== \'string\') {\n
    throw new TypeError("complex_queries.searchTextToRegExp(): " +\n
                        "Argument 1 is not of type \'string\'");\n
  }\n
  if (use_wildcard_characters === false) {\n
    return new RegExp("^" + stringEscapeRegexpCharacters(string) + "$");\n
  }\n
  return new RegExp("^" + stringEscapeRegexpCharacters(string).replace(\n
    /%/g,\n
    ".*"\n
  ).replace(\n
    /_/g,\n
    "."\n
  ) + "$");\n
}\n
\n
_export("searchTextToRegExp", searchTextToRegExp);\n
\n
/**\n
 * sequence(thens): Promise\n
 *\n
 * Executes a sequence of *then* callbacks. It acts like\n
 * `smth().then(callback).then(callback)...`. The first callback is called with\n
 * no parameter.\n
 *\n
 * Elements of `thens` array can be a function or an array contaning at most\n
 * three *then* callbacks: *onFulfilled*, *onRejected*, *onNotified*.\n
 *\n
 * When `cancel()` is executed, each then promises are cancelled at the same\n
 * time.\n
 *\n
 * @param  {Array} thens An array of *then* callbacks\n
 * @return {Promise} A new promise\n
 */\n
function sequence(thens) {\n
  var promises = [];\n
  return new RSVP.Promise(function (resolve, reject, notify) {\n
    var i;\n
    promises[0] = new RSVP.Promise(function (resolve) {\n
      resolve();\n
    });\n
    for (i = 0; i < thens.length; i += 1) {\n
      if (Array.isArray(thens[i])) {\n
        promises[i + 1] = promises[i].\n
          then(thens[i][0], thens[i][1], thens[i][2]);\n
      } else {\n
        promises[i + 1] = promises[i].then(thens[i]);\n
      }\n
    }\n
    promises[i].then(resolve, reject, notify);\n
  }, function () {\n
    var i;\n
    for (i = 0; i < promises.length; i += 1) {\n
      promises[i].cancel();\n
    }\n
  });\n
}\n
\n
\n
  return to_export;\n
}));

]]></string> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>jio_complex_queries.js</string> </value>
        </item>
        <item>
            <key> <string>version</string> </key>
            <value> <string>001</string> </value>
        </item>
        <item>
            <key> <string>workflow_history</string> </key>
            <value>
              <persistent> <string encoding="base64">AAAAAAAAAAI=</string> </persistent>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="2" aka="AAAAAAAAAAI=">
    <pickle>
      <global name="PersistentMapping" module="Persistence.mapping"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>data</string> </key>
            <value>
              <dictionary>
                <item>
                    <key> <string>document_publication_workflow</string> </key>
                    <value>
                      <persistent> <string encoding="base64">AAAAAAAAAAM=</string> </persistent>
                    </value>
                </item>
                <item>
                    <key> <string>edit_workflow</string> </key>
                    <value>
                      <persistent> <string encoding="base64">AAAAAAAAAAQ=</string> </persistent>
                    </value>
                </item>
                <item>
                    <key> <string>processing_status_workflow</string> </key>
                    <value>
                      <persistent> <string encoding="base64">AAAAAAAAAAU=</string> </persistent>
                    </value>
                </item>
              </dictionary>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="3" aka="AAAAAAAAAAM=">
    <pickle>
      <global name="WorkflowHistoryList" module="Products.ERP5Type.patches.WorkflowTool"/>
    </pickle>
    <pickle>
      <tuple>
        <none/>
        <list>
          <dictionary>
            <item>
                <key> <string>action</string> </key>
                <value> <string>publish_alive</string> </value>
            </item>
            <item>
                <key> <string>actor</string> </key>
                <value> <string>romain</string> </value>
            </item>
            <item>
                <key> <string>comment</string> </key>
                <value> <string></string> </value>
            </item>
            <item>
                <key> <string>error_message</string> </key>
                <value> <string></string> </value>
            </item>
            <item>
                <key> <string>time</string> </key>
                <value>
                  <object>
                    <klass>
                      <global name="DateTime" module="DateTime.DateTime"/>
                    </klass>
                    <tuple>
                      <none/>
                    </tuple>
                    <state>
                      <tuple>
                        <float>1406898405.92</float>
                        <string>GMT</string>
                      </tuple>
                    </state>
                  </object>
                </value>
            </item>
            <item>
                <key> <string>validation_state</string> </key>
                <value> <string>published_alive</string> </value>
            </item>
          </dictionary>
        </list>
      </tuple>
    </pickle>
  </record>
  <record id="4" aka="AAAAAAAAAAQ=">
    <pickle>
      <global name="WorkflowHistoryList" module="Products.ERP5Type.patches.WorkflowTool"/>
    </pickle>
    <pickle>
      <tuple>
        <none/>
        <list>
          <dictionary>
            <item>
                <key> <string>action</string> </key>
                <value> <string>edit</string> </value>
            </item>
            <item>
                <key> <string>actor</string> </key>
                <value> <string>zope</string> </value>
            </item>
            <item>
                <key> <string>comment</string> </key>
                <value>
                  <none/>
                </value>
            </item>
            <item>
                <key> <string>error_message</string> </key>
                <value> <string></string> </value>
            </item>
            <item>
                <key> <string>serial</string> </key>
                <value> <string>936.8906.38062.29081</string> </value>
            </item>
            <item>
                <key> <string>state</string> </key>
                <value> <string>current</string> </value>
            </item>
            <item>
                <key> <string>time</string> </key>
                <value>
                  <object>
                    <klass>
                      <global name="DateTime" module="DateTime.DateTime"/>
                    </klass>
                    <tuple>
                      <none/>
                    </tuple>
                    <state>
                      <tuple>
                        <float>1405933455.12</float>
                        <string>GMT</string>
                      </tuple>
                    </state>
                  </object>
                </value>
            </item>
          </dictionary>
        </list>
      </tuple>
    </pickle>
  </record>
  <record id="5" aka="AAAAAAAAAAU=">
    <pickle>
      <global name="WorkflowHistoryList" module="Products.ERP5Type.patches.WorkflowTool"/>
    </pickle>
    <pickle>
      <tuple>
        <none/>
        <list>
          <dictionary>
            <item>
                <key> <string>action</string> </key>
                <value> <string>detect_converted_file</string> </value>
            </item>
            <item>
                <key> <string>actor</string> </key>
                <value> <string>romain</string> </value>
            </item>
            <item>
                <key> <string>comment</string> </key>
                <value> <string></string> </value>
            </item>
            <item>
                <key> <string>error_message</string> </key>
                <value> <string></string> </value>
            </item>
            <item>
                <key> <string>external_processing_state</string> </key>
                <value> <string>converted</string> </value>
            </item>
            <item>
                <key> <string>serial</string> </key>
                <value> <string>0.0.0.0</string> </value>
            </item>
            <item>
                <key> <string>time</string> </key>
                <value>
                  <object>
                    <klass>
                      <global name="DateTime" module="DateTime.DateTime"/>
                    </klass>
                    <tuple>
                      <none/>
                    </tuple>
                    <state>
                      <tuple>
                        <float>1405087262.84</float>
                        <string>GMT</string>
                      </tuple>
                    </state>
                  </object>
                </value>
            </item>
          </dictionary>
        </list>
      </tuple>
    </pickle>
  </record>
</ZopeData>
