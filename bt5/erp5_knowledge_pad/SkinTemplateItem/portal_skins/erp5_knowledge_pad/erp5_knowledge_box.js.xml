<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts87651539.15</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>erp5_knowledge_box.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/x-javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// global layout is saved here\n
var last_layout = \'\';\n
\n
// enable or disable integration with server\n
var is_knowledge_template_used = 0;\n
\n
function createCustomKnowledgePadOnServer(){\n
  url = "ERP5Site_createDefaultKnowledgePadListForUser";\n
  d = MochiKit.Async.doSimpleXMLHttpRequest(url, \n
                 {\'mode\': mode,\n
                  \'default_pad_group\': default_pad_group});\n
  d.addCallback(handleServerSuccess);\n
  function handleServerSuccess(res){\n
    response = res.responseText;\n
    window.location=cancel_url + \'/view?active_pad_url=\'+response;\n
  }\n
}\n
\n
function showCreateDefaultKnowledgePadWarningMessage(){\n
  user_choice = confirm("In order to complete operation you must have your own tab on server instead of the default one which you are currently using and which you can not change.\\nIs it OK to create new one for you now?");\n
  if (user_choice==true){\n
    createCustomKnowledgePadOnServer();\n
  }\n
}\n
\n
function handleServerError(res){\n
  /*alert(\'Error on server\');*/\n
};\n
\n
function createCookie(name, value, days, path) {\n
  if (days) {\n
          var date = new Date();\n
          date.setTime(date.getTime()+(days*24*60*60*1000));\n
          var expires = "; expires="+date.toGMTString();\n
  }\n
  else var expires = "";\n
  if (!path){var path=\'/\';}\n
  document.cookie = name+"="+value+expires+"; path="+path;\n
}\n
\n
function updater(url, box_relative_url, dom_id, \n
                 parent_web_section_url, editable_mode, additionnal_request_params){\n
  /* request box content from server */\n
 request_params = {};\n
 /* getting parameters for the request in the form\'s hidden inputs */\n
 inputs =  getElement(dom_id).getElementsByTagName(\'input\');\n
 forEach(inputs, function (input){\n
   if(input.type == \'hidden\'){\n
     // turn \'gadget_form_id\' into \'form_id\'\n
     if(input.name == \'gadget_form_id\'){\n
       request_params[\'form_id\'] = input.value;}\n
     else if(input.name.substring(input.name.length,input.name.length-5) == \':list\'){\n
       if(typeof(request_params[input.name]) == \'undefined\'){\n
         request_params[input.name] = new Array()\n
       }\n
       request_params[input.name].push(input.value);\n
     }\n
     else{\n
       request_params[input.name] = input.value;\n
     }\n
   }\n
});\n
\n
 /*getting parameters for request from the parameter additionnal_request_params*/\n
 forEach(keys(additionnal_request_params), function (key){\n
   request_params[key] = additionnal_request_params[key];\n
 });\n
\n
 request_params[\'box_relative_url\'] = box_relative_url;\n
 request_params[\'parent_web_section_url\'] = parent_web_section_url; \n
 request_params[\'is_gadget_mode:int\'] = 1; \n
 request_params[\'editable_mode:int\'] = editable_mode; \n
\n
 getElement(dom_id).style.opacity = 0.5;\n
 d = MochiKit.Async.doSimpleXMLHttpRequest(url, request_params);\n
 d.addCallbacks(handleServerSuccess, handleServerError);\n
 function handleServerSuccess(res){\n
      getElement(dom_id).innerHTML = res.responseText;\n
      getElement(dom_id).style.opacity = 1.0;};\n
 function handleServerError(res){\n
      getElement(dom_id).innerHTML = \'Server side error.\';\n
      getElement(dom_id).style.opacity = 1.0;};\n
}\n
\n
function checkForActivitiesOnServer(timeout, return_url, mode, default_pad_group){\n
  /* check if activities are over and refresh current page */\n
  window.setInterval(\n
    function () {\n
      d = MochiKit.Async.doSimpleXMLHttpRequest(\'ERP5Site_hasUserActivity\',\n
                                                {\'js_call\': 1,\n
                                                 \'mode\': mode,\n
                                                 \'default_pad_group\': default_pad_group});\n
      d.addCallback(handleServerSuccess);\n
      function handleServerSuccess(res){\n
         if(res.responseText==\'False\'){window.location=return_url;}\n
         }}, \n
    timeout);\n
}\n
\n
function stickPadOnWebSection(create_url,\n
                              knowledge_pad_url,\n
                              websection_url,\n
                              cancel_url){\n
  /* stick pad on Web Section and then check if \n
     activities are over and refresh current page */\n
  d = doSimpleXMLHttpRequest(\n
           create_url, \n
           {\'knowledge_pad_url\': knowledge_pad_url,\n
            \'cancel_url\': cancel_url});\n
  d.addCallbacks(handleServerSuccess, handleServerError);\n
  function handleServerSuccess(res){\n
      window.location=cancel_url+\'?active_pad_url=\'+res.responseText;\n
      };\n
};\n
\n
function createDefaultPadOnServer(timeout, create_url,\n
                                  default_pad_group, return_url, mode){\n
  /* create default tab on server and then check if \n
     activities are over and refresh current page */\n
  d = doSimpleXMLHttpRequest(\n
           create_url, \n
           {\'default_pad_group\': default_pad_group,\n
            \'mode\': mode});\n
  d.addCallbacks(handleServerSuccess, handleServerError);\n
  function handleServerSuccess(res){\n
      checkForActivitiesOnServer(timeout, return_url);};\n
};\n
\n
// This function can be used to submit gadget preferences form whenever\n
// an enter is pressed in form\n
function submitGadgetPreferenceFormOnEnter(event, form_fields_main_prefix, box_relative_url){\n
  if(event.keyCode == 13){\n
    submitSynchronousGadgetPreferenceForm(form_fields_main_prefix, box_relative_url);\n
  }\n
}\n
\n
function submitSynchronousGadgetPreferenceForm(\n
                                form_fields_main_prefix, \n
                                box_relative_url){\n
  /* this will add respective gadget knowledge box relative url and\n
     gadget ERP5 preference form field_prefix (so multiple gadgets can \n
     safely coexist in one HTML page with one HTML form */\n
  appendChildNodes(document.forms[0], \n
                   INPUT({\'value\':box_relative_url, \n
                          \'name\': \'box_relative_url\', \n
                          \'type\':\'hidden\'}));\n
  appendChildNodes(document.forms[0], \n
                   INPUT({\'value\':form_fields_main_prefix, \n
                          \'name\': \'form_fields_main_prefix\', \n
                          \'type\':\'hidden\'}));\n
  clickSaveButton(\'KnowledgeBox_baseEdit\');\n
};\n
\n
function submitAsynchronousGadgetPreferenceForm(\n
                                 form_dom_id, \n
                                 view_form_url, \n
                                 box_relative_url, \n
                                 visual_block_dom_id, \n
                                 form_fields_main_prefix){\n
  // iterate over all possible form elements within edit form,\n
  // collect them and send to server\n
  var request_str = "?box_relative_url=" + box_relative_url+ "&form_fields_main_prefix=" + form_fields_main_prefix + "&";\n
  var url="KnowledgeBox_baseEdit";\n
  forEach(getElementsByTagAndClassName(\'input\', null, form_dom_id) , function (item) {\n
    if (item.type == "checkbox"){\n
      if (item.checked){request_str+=item.name + \':boolean=True&\';}\n
      else {request_str+=item.name + \':boolean=False&\';}}\n
    if (item.type == "radio"){\n
      if (item.checked){request_str+=item.name + \'=\'+item.value+\'&\';}}\n
    if (item.type == "text"){request_str+=item.name + \'=\' + item.value + \'&\';}\n
    if (item.type == "password"){request_str+=item.name + \'=\' + item.value + \'&\';}\n
  });\n
  forEach(getElementsByTagAndClassName(\'select\', null, form_dom_id), function (item) {\n
    //support multifield in gadget edit form\n
    if (item.multiple){\n
      forEach(getElementsByTagAndClassName(\'option\', null, item), function (selection) {\n
        if(selection.selected){\n
          request_str+=item.name + \'=\' + selection.value + \'&\';\n
        }\n
      });\n
    }else{\n
      request_str+=item.name + \'=\' + item.value + \'&\';\n
    }\n
  });\n
\n
  /* save form preferences to remote server*/\n
  url = url + request_str;\n
  d = MochiKit.Async.doSimpleXMLHttpRequest(url);\n
  d.addCallback(handleServerSuccess);\n
  function handleServerSuccess(res){\n
    /* update content view area back from server */\n
    updater(view_form_url, box_relative_url, visual_block_dom_id);\n
    toggle(form_dom_id);}\n
  };\n
\n
function updateServerBoxColumnLayout(container){\n
  // read columns structure from DOM  ..\n
  var columns_arr = new Array;\n
  var columns = getElementsByTagAndClassName(\'div\', \'portal-column\');\n
  // sort alphabetically as it\'s required to get proper layout from DOM\n
  columns.sort(keyComparator("id")); \n
  for (var i = 0; i < columns.length; i++){\n
    column_items = getElementsByTagAndClassName(\'div\', \'block\', columns[i]);\n
    var items_arr = new Array;\n
    for (var j = 0; j < column_items.length; j++){\n
        items_arr[j] = column_items[j].id;};\n
    columns_arr[i] = items_arr.join(\'|\')\n
  };\n
  var layout = columns_arr.join(\'##\');\n
  // .. and send it to server only if it\'s different\n
  // XXX: This may bloat ZODB as everry change is a chnage to an ZODB object.\n
  if (layout!=last_layout){\n
    last_layout = layout;\n
    doSimpleXMLHttpRequest("KnowledgePad_saveBoxColumnLayout", {user_layout: layout});\n
    }\n
  return\n
}\n
\n
function addBoxToServer(url, dom_id, gadget_relative_url){\n
  /* add gadget to knowledge pad */\n
  d = doSimpleXMLHttpRequest(url, {gadget_relative_url: gadget_relative_url});\n
  d.addCallback(handleServerSuccess);\n
  function handleServerSuccess(res){\n
    button = getElement(dom_id);\n
    button.innerHTML = res.responseText;\n
    button.disabled = true;}\n
}\n
\n
function addPadOnServer(create_url,\n
                        base_path,\n
                        mode,\n
                        cancel_url){\n
  /* add pad on server and set cookie as its relative url this way we \n
     can show it immediately in UI */\n
  pad_title = getElement(\'new_pad_title\');\n
  pad_title_value = pad_title.value\n
  d = doSimpleXMLHttpRequest(\n
           create_url, \n
           {\'pad_title\': pad_title_value,\n
            \'mode\': mode});\n
  d.addCallbacks(handleServerSuccess, handleServerError);\n
  function handleServerSuccess(res){\n
      window.location = cancel_url+\'?active_pad_url=\'+res.responseText;\n
    };\n
};\n
\n
function removeKnowledgePadFromServer(knowledge_pad_relative_url, mode, base_path){\n
  /* remove pad from server*/\n
  if (is_knowledge_template_used){\n
    showCreateDefaultKnowledgePadWarningMessage();}\n
  else{\n
    var user_choice = true;\n
    user_choice = confirm("Are you sure you want to remove this pad from your home?");\n
    if (user_choice==true){\n
      location.href=\'ERP5Site_deleteKnowledgePad?knowledge_pad_relative_url=\' + knowledge_pad_relative_url+\'&mode=\'+mode;}\n
    }\n
}\n
\n
function renameKnowledgePadToServer(dialog_id, title_id, \n
                                    input_id, knowledge_pad_relative_url){\n
  if (is_knowledge_template_used){\n
    showCreateDefaultKnowledgePadWarningMessage();}\n
  else{\n
    // rename it locally and update server asynchonously\n
    title_element = getElement(title_id)\n
    input_element = getElement(input_id)\n
    var knowledge_pad_title = input_element.value;\n
    title_element.innerHTML = knowledge_pad_title;\n
    doSimpleXMLHttpRequest("ERP5Site_renameKnowledgePad", \n
                          {knowledge_pad_relative_url: knowledge_pad_relative_url,\n
                            knowledge_pad_title: knowledge_pad_title});\n
  }\n
  //anyway toggle show dialog\n
  toggle(dialog_id);\n
}\n
\n
function toggleElementById(dom_id){\n
  /* Toggle element by its Id. */\n
  MochiKit.Visual.toggle(dom_id);\n
}\n
\n
function initialize(){\n
  // define sortable columns\n
  if (is_knowledge_template_used==0){\n
    // allow drag and drop only if we are dealing with a pad we can modify\n
    var sortables = getElementsByTagAndClassName(\'div\', \'portal-column\');\n
    forEach(sortables, function (item) {\n
      MochiKit.Sortable.create(item.id,  {"constraint"  : false,\n
                                          "containment" : sortables,\n
                                          "handle": "handle",\n
                                          "only": "block",\n
                                          "tag": "div",\n
                                          "scroll": "true",\n
                                          "hoverclass": "block-hover",\n
                                          "dropOnEmpty": "true",\n
                                          "onUpdate": updateServerBoxColumnLayout,\n
                                          "starteffect" : MochiKit.Base.noop,\n
                                          "endeffect"   : MochiKit.Base.noop\n
                                        });\n
    })}\n
\n
  // enable show/hide tabs\n
  tabs = getElement(\'tabs\');\n
  tabs_switcher = getElement(\'tabs_switcher\');\n
  add_gadget = getElement(\'add_new_gadget_link\')\n
  if(tabs_switcher){\n
    connect(tabs_switcher, \'onclick\', function (){\n
      var is_tabs_visible=0;\n
      if(tabs.style.display!=\'block\'){\n
        is_tabs_visible=1;\n
        getElement("tab_switcher_visible").style.display = "block";\n
        getElement("tab_switcher_hidden").style.display = "none";\n
        add_gadget.className = "border_bottom1px";\n
        tabs_switcher.className = "border_bottom1px";\n
      }\n
      else{\n
        getElement("tab_switcher_hidden").style.display = "block";\n
        getElement("tab_switcher_visible").style.display = "none";\n
        add_gadget.className = "border_bottom0px";\n
        tabs_switcher.className = "border_bottom0px";\n
      }\n
      toggle(tabs);\n
      createCookie("is_tabs_visible", is_tabs_visible, 365);\n
    });}\n
\n
  // for each box (gadget) add respective event handlers\n
  var boxes = getElementsByTagAndClassName(\'div\', \'block\');\n
  forEach(boxes, function (box) {\n
     var edit = getFirstElementByTagAndClassName(\'a\',\n
                                                 \'block-edit-form\', box);\n
     var edit_form = getFirstElementByTagAndClassName(\'div\', \n
                                                      \'edit-form\', box);\n
     var remove = getFirstElementByTagAndClassName(\'a\', \n
                                                   \'block-remove\', box);\n
     var minimize = getFirstElementByTagAndClassName(\'a\', \n
                                                     \'block-minimize\', box);\n
     var minimize_wrapper = getFirstElementByTagAndClassName(\'div\', \n
                                                             \'minimize_wrapper\', box);\n
     if(minimize){\n
       connect(minimize, \'onclick\', function (){\n
         if (is_knowledge_template_used){\n
           showCreateDefaultKnowledgePadWarningMessage();}\n
         else{\n
           toggle(minimize_wrapper);\n
           doSimpleXMLHttpRequest("KnowledgeBox_toggleVisibility", \n
                                  {box_relative_url: box.id});}});\n
       }\n
     if(edit){\n
       connect(edit, \'onclick\', function (){\n
         if (is_knowledge_template_used){\n
           showCreateDefaultKnowledgePadWarningMessage();}\n
         else{toggle(edit_form);}});\n
      }\n
\n
     if(remove){\n
       connect(remove, \'onclick\', function (){\n
         if (is_knowledge_template_used){\n
           showCreateDefaultKnowledgePadWarningMessage();}\n
         else{\n
              user_choice = confirm("Are you sure you want to remove this gadget from your personalized page?");\n
              if (user_choice==true){\n
                toggle(box);\n
                doSimpleXMLHttpRequest("KnowledgePad_deleteBox", \n
                                     {box_relative_url: box.id});}}});\n
      }\n
  });\n
}\n
\n
// call function after load of document\n
MochiKit.DOM.addLoadEvent(initialize);\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>15083</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
