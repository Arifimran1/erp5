<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <tuple>
          <string>Products.PythonScripts.PythonScript</string>
          <string>PythonScript</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Python_magic</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>__ac_local_roles__</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string># This script returns a list of dictionnaries containing XML tag name and value\n
# It builds this list by analysing \'properties\'\n
# For each line of \'properties\', it searchs the first true condition,\n
# and calls the corresponding method to obtain the value\n
\n
\n
\n
condition_second_is_wlan = ( context.getSecondNetworkType() == \'wireless\' )\n
condition_second_is_ethernet = ( context.getSecondNetworkType() == \'ethernet\' )\n
condition_third_is_ethernet = ( context.getThirdNetworkType() == \'ethernet\' )\n
\n
\n
properties = [ \n
   {\'XML_name\':\'modem_type\',          \'name\':({ \'method\':\'getModemType\', \'condition\':1                                         }, ) },\n
   {\'XML_name\':\'modem_device\',        \'name\':({ \'method\':\'getNetworkInterface\', \'condition\':1                                  }, ) },\n
   {\'XML_name\':\'connection_type\',     \'name\':({ \'method\':\'getConnectionType\', \'condition\':1                                    }, ) },\n
   {\'XML_name\':\'ppp_user\',            \'name\':({ \'method\':\'getPppUser\', \'condition\':1                                           }, ) },\n
   {\'XML_name\':\'ppp_password\',        \'name\':({ \'method\':\'getPppPassword\', \'condition\':1                                       }, ) },\n
   {\'XML_name\':\'external_ip_address\', \'name\':({ \'method\':\'getExternalIpAddress\', \'condition\':1                                 }, ) },\n
   {\'XML_name\':\'bridge_device\',       \'name\':({ \'method\':\'getBridgeDevice\', \'condition\':1                                      }, ) },\n
   {\'XML_name\':\'lan_device\',          \'name\':({ \'method\':\'getSecondNetworkInterface\', \'condition\':condition_second_is_ethernet },\n
                                              { \'method\':\'getThirdNetworkInterface\', \'condition\':condition_third_is_ethernet   } ) },\n
   {\'XML_name\':\'wlan_device\',         \'name\':({ \'method\':\'getSecondNetworkInterface\', \'condition\':condition_second_is_wlan     }, ) },\n
   {\'XML_name\':\'wlan_wep_key\',        \'name\':({ \'method\':\'getSecondWlanWepKey\', \'condition\':condition_second_is_wlan           }, ) },\n
   {\'XML_name\':\'wlan_essid\',          \'name\':({ \'method\':\'getSecondWlanEssid\', \'condition\':condition_second_is_wlan            }, ) },\n
   {\'XML_name\':\'wlan_channel\',        \'name\':({ \'method\':\'getSecondWlanChannel\', \'condition\':condition_second_is_wlan          }, ) },\n
   {\'XML_name\':\'ip_address\',          \'name\':({ \'method\':\'getIpAddress\', \'condition\':1                                         }, ) },\n
   {\'XML_name\':\'netmask\',             \'name\':({ \'method\':\'getNetmask\', \'condition\':1                                           }, ) },\n
   {\'XML_name\':\'netmask_bits\',        \'name\':({ \'method\':\'getNetmaskBits\', \'condition\':1                                       }, ) },\n
   {\'XML_name\':\'network_address\',     \'name\':({ \'method\':\'getNetworkAddress\', \'condition\':1                                    }, ) },\n
   {\'XML_name\':\'broadcast_address\',   \'name\':({ \'method\':\'getBroadcastAddress\', \'condition\':1                                  }, ) },\n
\n
\n
   {\'XML_name\':\'lan_network_address\',   \'name\':({ \'method\':\'getSecondNetworkAddress\', \'condition\':condition_second_is_ethernet  },\n
                                                { \'method\':\'getThirdNetworkAddress\', \'condition\':condition_third_is_ethernet    } ) },\n
   {\'XML_name\':\'lan_netmask_bits\',      \'name\':({ \'method\':\'getSecondNetmaskBits\', \'condition\':condition_second_is_ethernet     },\n
                                                { \'method\':\'getThirdNetmaskBits\', \'condition\':condition_third_is_ethernet       } ) },\n
   {\'XML_name\':\'dhcp_lan_range_start\',  \'name\':({ \'method\':\'getSecondDhcpRangeStart\', \'condition\':condition_second_is_ethernet  },\n
                                                { \'method\':\'getThirdDhcpRangeStart\', \'condition\':condition_third_is_ethernet    } ) },\n
   {\'XML_name\':\'dhcp_lan_range_end\',    \'name\':({ \'method\':\'getSecondDhcpRangeEnd\', \'condition\':condition_second_is_ethernet    },\n
                                                { \'method\':\'getThirdDhcpRangeEnd\', \'condition\':condition_third_is_ethernet      } ) },\n
   {\'XML_name\':\'dhcp_lan_extra_config\', \'name\':({ \'method\':\'getSecondDhcpExtraConfig\', \'condition\':condition_second_is_ethernet },\n
                                                { \'method\':\'getThirdDhcpExtraConfig\', \'condition\':condition_third_is_ethernet   } ) },\n
\n
\n
   {\'XML_name\':\'wlan_network_address\',  \'name\':({ \'method\':\'getSecondNetworkAddress\', \'condition\':condition_second_is_wlan }, ) },\n
   {\'XML_name\':\'wlan_netmask_bits\',     \'name\':({ \'method\':\'getSecondNetmaskBits\', \'condition\':condition_second_is_wlan    }, ) },\n
   {\'XML_name\':\'dhcp_wlan_port\',        \'name\':({ \'method\':\'getSecondDhcpWlanPort\', \'condition\':condition_second_is_wlan   }, ) },\n
   {\'XML_name\':\'dhcp_wlan_range_start\', \'name\':({ \'method\':\'getSecondDhcpRangeStart\', \'condition\':condition_second_is_wlan }, ) },\n
   {\'XML_name\':\'dhcp_wlan_range_end\',   \'name\':({ \'method\':\'getSecondDhcpRangeEnd\', \'condition\':condition_second_is_wlan   }, ) },\n
\n
   {\'XML_name\':\'bind_shared_key\',              \'name\':({ \'method\':\'getBindSharedKey\', \'condition\':1             }, ) },\n
   {\'XML_name\':\'bind_zone\',                    \'name\':({ \'method\':\'getBindZone\', \'condition\':1                  }, ) },\n
   {\'XML_name\':\'bind_records\',                 \'name\':({ \'method\':\'getBindRecords\', \'condition\':1               }, ) },\n
   {\'XML_name\':\'bind_reverse_records\',         \'name\':({ \'method\':\'getBindReverseRecords\', \'condition\':1        }, ) },\n
   {\'XML_name\':\'vpn_type\',                     \'name\':({ \'method\':\'getVpnType\', \'condition\':1                   }, ) },\n
   {\'XML_name\':\'ipsec_extra_config\',           \'name\':({ \'method\':\'getIpsecExtraConfig\', \'condition\':1          }, ) },\n
   {\'XML_name\':\'shorewall_rules_extra_config\', \'name\':({ \'method\':\'getShorewallRulesExtraConfig\', \'condition\':1 }, ) },\n
   {\'XML_name\':\'root_password\',                \'name\':({ \'method\':\'getRootPassword\', \'condition\':1              }, ) },\n
   {\'XML_name\':\'web_password\',                 \'name\':({ \'method\':\'getWebPassword\', \'condition\':1               }, ) }\n
 ]\n
\n
\n
return_value = []\n
\n
\n
for i in range(len(properties)):\n
  property_line = properties[i]\n
\n
  # Search for the first true condition\n
  for j in range(len(property_line[\'name\'])):\n
    name_line = property_line[\'name\'][j]\n
    if name_line[\'condition\']:\n
      method = getattr(context,name_line[\'method\'])\n
      value = method()\n
      return_value.append( { \'XML_tag\':property_line[\'XML_name\'], \'XML_value\':value } )\n
      break\n
\n
\n
return return_value\n
</string> </value>
        </item>
        <item>
            <key> <string>_code</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_owner</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>errors</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>func_code</string> </key>
            <value>
              <object>
                <klass>
                  <global name="FuncCode" module="Shared.DC.Scripts.Signature"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>co_argcount</string> </key>
                        <value> <int>0</int> </value>
                    </item>
                    <item>
                        <key> <string>co_varnames</string> </key>
                        <value>
                          <tuple>
                            <string>_getattr_</string>
                            <string>context</string>
                            <string>condition_second_is_wlan</string>
                            <string>condition_second_is_ethernet</string>
                            <string>condition_third_is_ethernet</string>
                            <string>properties</string>
                            <string>return_value</string>
                            <string>_getiter_</string>
                            <string>range</string>
                            <string>len</string>
                            <string>i</string>
                            <string>_getitem_</string>
                            <string>property_line</string>
                            <string>j</string>
                            <string>name_line</string>
                            <string>getattr</string>
                            <string>method</string>
                            <string>value</string>
                          </tuple>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>func_defaults</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>VPN_getXMLList</string> </value>
        </item>
        <item>
            <key> <string>warnings</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
