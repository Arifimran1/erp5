<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
        <tuple/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

from Products.ERP5Subversion.SubversionClient import SubversionSSLTrustError\n
from Products.ERP5Subversion.SubversionClient import SubversionLoginError\n
from Products.ERP5Type.Message import translateString\n
from ZTUtils import make_query\n
request = container.REQUEST\n
\n
\n
# XXX: To be compatible with commit from diff view\n
if same_type(added, []):\n
  added = \',\'.join(added)\n
if same_type(modified, []):\n
  modified = \',\'.join(modified)\n
if same_type(removed, []):\n
  removed = \',\'.join(removed)\n
\n
commit_non_recurs = added\n
if commit_non_recurs != \'\' and commit_non_recurs != \'none\':\n
  if modified != \'\' and modified != \'none\':\n
    commit_non_recurs = commit_non_recurs+\',\'+modified  \n
else:\n
    if modified != \'\' and modified != \'none\':\n
      commit_non_recurs = modified\n
\n
if commit_non_recurs != \'\' and commit_non_recurs != \'none\':\n
  commit_non_recurs = commit_non_recurs.split(\',\')\n
if removed != \'\' and removed != \'none\':\n
  commit_recurs = context.getPortalObject()["portal_subversion"].cleanChildrenInList(removed.split(\',\'))\n
else:\n
  commit_recurs = removed\n
\n
if changelog is None :\n
  request.set(\'portal_status_message\', translateString(\'Please set a ChangeLog message.\'))\n
  request.set(\'cancel_url\', context.absolute_url() + \'/BusinessTemplate_viewSvnStatus?do_extract=False&portal_status_message=Commit%20cancelled.\')\n
  return context.asContext(added=added, modified=modified, removed=removed).BusinessTemplate_viewSvnChangelog()\n
\n
if changelog.strip() == \'\' :\n
  request.set(\'portal_status_message\', translateString("Error: ChangeLog message can not be empty."))\n
  request.set(\'cancel_url\', context.absolute_url() + \'/BusinessTemplate_viewSvnStatus?do_extract=False&portal_status_message=Commit%20cancelled.\')\n
  return context.asContext(added=added, modified=modified, removed=removed).BusinessTemplate_viewSvnChangelog()\n
\n
def getRevisionNumber(revision):\n
  """get the revision number from a revision, with backward compatibility support.\n
  """\n
  if hasattr(revision, \'getNumber\'):\n
    return revision.getNumber()\n
  return str(revision)\n
\n
try:\n
  revision_string = \'\'\n
  if commit_non_recurs != \'none\' and commit_non_recurs != \'\':\n
    revision = context.getPortalObject()["portal_subversion"].checkin(path=commit_non_recurs, business_template=context, recurse=False, log_message=changelog)\n
    revision_string = \'%s\' % getRevisionNumber(revision)\n
  if commit_recurs != \'none\' and commit_recurs != \'\':\n
    revision = context.getPortalObject()["portal_subversion"].checkin(path=commit_recurs, business_template=context, recurse=True, log_message=changelog)\n
    if revision_string:\n
      revision_string = \'%s, %s\' % (revision_string, getRevisionNumber(revision))\n
    else:\n
      revision_string = \'%s\' % getRevisionNumber(revision)\n
except SubversionSSLTrustError, error:\n
  request.set(\'portal_status_message\', \'SSL Certificate was not recognized\')\n
  request.set(\'cancel_url\', context.absolute_url() + \'/BusinessTemplate_viewSvnStatus?do_extract=False&portal_status_message=Commit%20cancelled.\')\n
  return context.asContext(added=added, modified=modified, removed=removed, changelog=changelog, trust_dict = error.getTrustDict(), caller=\'commit\').BusinessTemplate_viewSvnSSLTrust()\n
except SubversionLoginError, error1 :\n
  request.set(\'portal_status_message\', \'Server needs authentication, no cookie found\')\n
  request.set(\'cancel_url\', context.absolute_url() + \'/BusinessTemplate_viewSvnStatus?do_extract=False&portal_status_message=Commit%20cancelled.\')\n
  return context.asContext(added=added, modified=modified, removed=removed, changelog=changelog, caller=\'commit\', realm = error1.getRealm(), username = context.getPortalObject()["portal_subversion"].getPreferredUsername()).BusinessTemplate_viewSvnLogin()\n
\n
return request.RESPONSE.redirect(\'%s/view?%s\' % (\n
       context.absolute_url(),\n
       make_query(portal_status_message=translateString(\'Files commited successfully in revision ${revision}.\',\n
                                                        mapping=dict(revision=revision_string)))))\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_code</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>added=\'\',modified=\'\',removed=\'\', changelog=None, **kw</string> </value>
        </item>
        <item>
            <key> <string>errors</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>func_code</string> </key>
            <value>
              <object>
                <klass>
                  <global name="FuncCode" module="Shared.DC.Scripts.Signature"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>co_argcount</string> </key>
                        <value> <int>4</int> </value>
                    </item>
                    <item>
                        <key> <string>co_varnames</string> </key>
                        <value>
                          <tuple>
                            <string>added</string>
                            <string>modified</string>
                            <string>removed</string>
                            <string>changelog</string>
                            <string>kw</string>
                            <string>Products.ERP5Subversion.SubversionClient</string>
                            <string>SubversionSSLTrustError</string>
                            <string>SubversionLoginError</string>
                            <string>Products.ERP5Type.Message</string>
                            <string>translateString</string>
                            <string>ZTUtils</string>
                            <string>make_query</string>
                            <string>_getattr_</string>
                            <string>container</string>
                            <string>request</string>
                            <string>same_type</string>
                            <string>commit_non_recurs</string>
                            <string>_getitem_</string>
                            <string>context</string>
                            <string>commit_recurs</string>
                            <string>None</string>
                            <string>getRevisionNumber</string>
                            <string>revision_string</string>
                            <string>False</string>
                            <string>revision</string>
                            <string>True</string>
                            <string>error</string>
                            <string>error1</string>
                            <string>dict</string>
                          </tuple>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>func_defaults</string> </key>
            <value>
              <tuple>
                <string></string>
                <string></string>
                <string></string>
                <none/>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>BusinessTemplate_doSvnCommit</string> </value>
        </item>
        <item>
            <key> <string>warnings</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
