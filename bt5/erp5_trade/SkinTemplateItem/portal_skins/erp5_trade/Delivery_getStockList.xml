<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

def getOrderStr(movement_list, resource_value):\n
  order_str = \'\'\n
  sum_quantity = movement_idx = 0\n
  for movement_idx, movement in enumerate(movement_list):\n
    quantity = movement.getQuantity()\n
    quantity_unit_value = movement.getQuantityUnitValue()\n
    if quantity_unit_value is None:\n
      continue\n
\n
    order_str += \'%s%.f%s\' % (movement_idx and \', \' or \'\', quantity,\n
                              quantity_unit_value.getShortTitle())\n
\n
    converted_quantity = resource_value.convertQuantity(quantity,\n
                                                        movement.getQuantityUnit(),\n
                                                        resource_value.getDefaultQuantityUnit())\n
\n
    if converted_quantity:\n
      sum_quantity += converted_quantity\n
\n
  if not sum_quantity:\n
    return None\n
  elif movement_idx > 0:\n
    order_str += \' \' + context.Base_translateString(\'(${quantity}${quantity_unit} total)\',\n
                                                    mapping={\'quantity\': sum_quantity,\n
                                                             \'quantity_unit\': resource_value.getShortTitle()})\n
\n
  return order_str\n
\n
movement_dict = {}\n
for movement in context.getMovementList():\n
  movement_dict_key = movement.getResourceUid(), tuple(sorted(movement.getVariationCategoryList()))\n
  if movement_dict_key in movement_dict:\n
    movement_dict[movement_dict_key].append(movement)\n
  else:\n
    movement_dict[movement_dict_key] = [movement]\n
\n
line_list = []\n
order_dict = {}\n
for inventory in context.getFutureInventoryList(*args, **kwargs):\n
  resource_value = inventory.getResourceValue()\n
  dict_key = resource_value.getUid(), tuple(sorted(inventory.getVariationCategoryList()))\n
\n
  try:\n
    movement_list = movement_dict[dict_key]\n
    del movement_dict[dict_key]\n
  except KeyError:\n
    pass\n
  else:\n
    order_dict[inventory.getUid()] = getOrderStr(movement_list, resource_value)\n
\n
  line_list.append(inventory)\n
\n
if movement_dict:\n
  for movement_list in movement_dict.values():\n
    for movement in movement_list:\n
      resource_value = movement.getResourceValue()\n
      if resource_value is None:\n
        continue\n
\n
      temp_movement = movement.asContext(getCurrentInventory=str,\n
                                         getAvailableInventory=str,\n
                                         inventory=\'\')\n
\n
      line_list.append(temp_movement)\n
      order_str = getOrderStr([movement], resource_value)\n
      if not order_str:\n
        continue\n
\n
      order_dict[movement.getUid()] = order_str\n
\n
context.REQUEST.set(\'order_dict\', order_dict)\n
\n
return line_list\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>*args, **kwargs</string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>Delivery_getStockList</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
