<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts37252665.34</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>renderjs.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// fallback for IE\n
if (typeof console === "undefined" || typeof console.log === "undefined") {\n
  console = {};\n
  console.log = function() {};\n
}\n
\n
var is_ready;\n
is_ready = false; // dirty flag to be removed (indicates if ready event has been handled)\n
\n
\n
/*\n
 * This plugin saves within current page namespace.\n
 */\n
var NameSpaceStorageCachePlugin = function() {\n
  \n
  var namespace = {};\n
  \n
  return {\n
          get: function (cache_id, default_value) {\n
            /* Get cache key value */\n
            return namespace[cache_id];\n
          },\n
\n
          set: function (cache_id, data) {\n
            /* Set cache key value */\n
            namespace[cache_id] = data;\n
          }\n
\n
  }}();\n
\n
\n
/*\n
 * This plugin saves using HTML5 localStorage.\n
 */\n
var LocalStorageCachePlugin = function() {\n
  \n
  return {\n
          get: function (cache_id, default_value) {\n
            /* Get cache key value */\n
            return $.jStorage.get(cache_id, default_value);\n
          },\n
\n
          set: function (cache_id, data) {\n
            /* Set cache key value */\n
            $.jStorage.set(cache_id, data);\n
          }\n
  }}();\n
\n
  \n
/*\n
 * Generic cache implementation that can fall back to local namespace storage\n
 * if no "modern" storage like localStorage is available\n
 */  \n
var Cache = function() {\n
  \n
  return {\n
  \n
          ROOT_CACHE_ID: \'APP_CACHE\',\n
\n
          getCacheId: function (cache_id) {\n
            /* We should have a way to \'purge\' localStorage by setting a ROOT_CACHE_ID in all browser\n
            * instances\n
            */\n
            return this.ROOT_CACHE_ID + cache_id;\n
          },\n
\n
          hasLocalStorage: function() {\n
            /*\n
            * Feature test if localStorage is supported\n
            */\n
            var mod;\n
            mod = \'localstorage_test_12345678\';\n
            try {\n
                localStorage.setItem(mod, mod);\n
                localStorage.removeItem(mod);\n
                return true;\n
            }\n
            catch (e) {\n
                return false;\n
            }\n
          },\n
\n
          get: function (cache_id, default_value) {\n
            /* Get cache key value */\n
            cache_id = this.getCacheId(cache_id);\n
            if (this.hasLocalStorage()) {\n
              return LocalStorageCachePlugin.get(cache_id, default_value);\n
            }\n
            //fallback to javscript namespace cache\n
            return NameSpaceStorageCachePlugin.get(cache_id, default_value);\n
          },\n
\n
          set: function (cache_id, data) {\n
            /* Set cache key value */\n
            cache_id = this.getCacheId(cache_id);\n
            if (this.hasLocalStorage()){\n
              LocalStorageCachePlugin.set(cache_id, data);}\n
            else{\n
              NameSpaceStorageCachePlugin.set(cache_id, data);}\n
          }\n
\n
  }}();\n
\n
/*\n
 * Generic tabular gadget\n
 */\n
var TabbularGadget = function () {\n
  \n
  return {\n
\n
          toggleVisibility: function(visible_dom) {\n
            /*\n
            * Set tab as active visually and mark as not active rest.\n
            */\n
            $(".selected").addClass("not_selected"); $(".selected").removeClass("selected");\n
            visible_dom.addClass("selected");\n
            visible_dom.removeClass("not_selected");\n
          },\n
\n
          addNewTabGadget: function(dom_id, gadget, gadget_data_handler, gadget_data_source) {\n
            /*\n
            * add new gadget and render it\n
            */\n
            var html_string;\n
            tab_container=$(\'#\'+dom_id);\n
            tab_container.empty();\n
            html_string =[\'<div class="gadget" \',\n
                          \'gadget="\' + gadget + \'"\',\n
                          \'gadget:data-handler="\' + gadget_data_handler + \'" \',\n
                          \'gadget:data-source="\' + gadget_data_source +\'"></div>\'].join(\'\\n\');\n
\n
            tab_container.append(html_string);\n
            tab_gadget = tab_container.find(".gadget");\n
\n
            // render new gadget\n
            is_ready = false;\n
            RenderJs.loadGadgetFromUrl(tab_gadget);\n
            // clear previous events\n
            GadgetIndex.getRootGadget().getDom().bind("ready", function (){\n
              if (!is_ready){\n
                RenderJs.updateGadgetData(tab_gadget);\n
                is_ready = true;\n
              }\n
            });\n
          }\n
  \n
}}();\n
\n
\n
\n
/*\n
 * Javascript Gadget representation\n
 */\n
function Gadget(id, dom) {\n
  this.id = id;\n
  this.dom = dom;\n
  this.is_ready = false;\n
}\n
\n
Gadget.prototype.getId = function() {\n
  return this.id;\n
};\n
\n
Gadget.prototype.getDom = function() {\n
  return this.dom;\n
};\n
\n
Gadget.prototype.isReady = function() {\n
  /*\n
   * Return True if remote gadget is loaded into DOM.\n
   */\n
  return this.is_ready;\n
};\n
\n
Gadget.prototype.setReady = function() {\n
  /*\n
   * Return True if remote gadget is loaded into DOM.\n
   */\n
  this.is_ready = true;\n
};\n
\n
\n
Gadget.prototype.getParent = function() {\n
  /*\n
   * Get Gadget\'s parent by using DOM\n
   */\n
  // XXX:\n
};\n
\n
\n
/*\n
 * Generic gadget index placeholder\n
 */\n
var GadgetIndex = function () {\n
  \n
  var gadget_list = [];\n
  \n
  return  {\n
\n
          getGadgetList: function() {\n
            /*\n
            * Return list of registered gadgets\n
            */\n
            return gadget_list;\n
          },\n
\n
          registerGadget: function(gadget) {\n
            /*\n
            * Register gadget\n
            */\n
            gadget_list.push(gadget);\n
          },\n
\n
          unregisterGadget: function(gadget) {\n
            /*\n
            * Unregister gadget\n
            */\n
            index = jQuery.inArray(gadget, gadget_list);\n
            if (index!=-1) {\n
              gadget_list.splice(index, 1);\n
            }\n
          },\n
\n
          getGadgetById: function (gadget_id) {\n
            /*\n
            * Get gadget javascript representation by its Id\n
            */\n
            var gadget;\n
            gadget = undefined;\n
            $(GadgetIndex.getGadgetList()).each(\n
              function (index, value) {\n
                if (value.getId()===gadget_id) {\n
                  gadget = value;\n
                }});\n
            return gadget;\n
          },\n
\n
          getRootGadget: function () {\n
            /*\n
            * Return root gadget (always first one in list)\n
            */\n
            return this.getGadgetList()[0];\n
          },\n
\n
          isGadgetListLoaded: function () {\n
            /*\n
            * Return True if all gadgets were loaded from network or cache\n
            */\n
            var result;\n
            result = true;\n
            $(this.getGadgetList()).each(\n
              function (index, value) {\n
                if (value.isReady()===false) {\n
                  result = false;\n
                }\n
              });\n
            return result;\n
          },\n
\n
          getSelf: function (){\n
            /*\n
            * Return Gadget\'s Javascript representation\n
            */\n
            // XXX:\n
          }\n
  \n
}}();\n
\n
\n
/*\n
 * Basic gadget interaction gadget implementation.\n
 */\n
var InteractionGadget = function () {\n
  \n
  return {\n
\n
          bind: function (gadget_dom){\n
            /*\n
            * Bind event between gadgets.\n
            */\n
            gadget_id = gadget_dom.attr("id");\n
            gadget_dom.find("connect").each(function (key, value){\n
              source = $(value).attr("source").split(".");\n
              source_gadget_id = source[0];\n
              source_method_id = source[1];\n
              source_gadget = GadgetIndex.getGadgetById(source_gadget_id);\n
\n
              destination = $(value).attr("destination").split(".");\n
              destination_gadget_id = destination[0];\n
              destination_method_id = destination[1];\n
              destination_gadget = GadgetIndex.getGadgetById(destination_gadget_id);\n
\n
              if (source_gadget.hasOwnProperty(source_method_id)){\n
                // direct javascript use case\n
                func_body = \'GadgetIndex.getGadgetById("\' + source_gadget_id + \'")["original_\' + source_method_id + \'"]();\';\n
                func_body = func_body + \'\\nGadgetIndex.getGadgetById("\' + destination_gadget_id + \'")["\' + destination_method_id + \'"]();\';\n
                func = new Function(func_body);\n
                source_gadget["original_" + source_method_id] = source_gadget[source_method_id];\n
                source_gadget[source_method_id] =  func;\n
              }\n
              else{\n
                // this is a custom event attached to HTML gadget representation\n
                func_body = \'GadgetIndex.getGadgetById("\' + destination_gadget_id + \'")["\' + destination_method_id + \'"]();\';\n
                func = new Function(func_body);\n
                source_gadget.dom.bind(source_method_id, func);\n
              }\n
              console.log(source_gadget_id, \'.\', source_method_id, \'-->\', destination_gadget_id, \'.\', destination_method_id);\n
            }\n
            );\n
          }\n
  }}();\n
\n
\n
/*\n
 * Generic Gadget library renderer\n
 */\n
\n
var RenderJs = function () {\n
  \n
  return  {\n
   \n
          bootstrap: function (root){\n
                    /* initial load application gadget */\n
                    RenderJs.loadGadgetFromUrl(root);\n
                    RenderJs.load(root);\n
          },\n
\n
          load: function (root) {\n
                    /* Load gadget layout by traversing DOM */\n
                    var gadget_list;\n
                    gadget_list = root.find("[gadget]");\n
                    // Load chilren\n
                    gadget_list.each(function() {\n
                      RenderJs.loadGadgetFromUrl($(this));\n
                    });\n
          },\n
\n
          updateAndRecurse: function(gadget, data){\n
                    /* Update current gadget and recurse down */\n
                    gadget.append(data);\n
                    // a gadget may contain sub gadgets\n
                    this.load(gadget);\n
          },\n
\n
          loadGadgetFromUrl: function(gadget) {\n
                    /* Load gadget\'s SPECs from URL */\n
                    var url, gadget_id, gadget_property, cacheable, cache_id, app_cache, data, gadget_js;\n
                    url = gadget.attr("gadget");\n
                    gadget_id = gadget.attr("id");\n
\n
                    // register gadget in javascript namespace\n
                    gadget_js = new Gadget(gadget_id, gadget);\n
                    GadgetIndex.registerGadget(gadget_js);\n
\n
                    if (url!==undefined && url!==""){\n
                      gadget_property = gadget.attr("gadget:property");\n
                      cacheable = false;\n
                      if (gadget_property!==undefined) {\n
                        gadget_property = $.parseJSON(gadget_property);\n
                        cacheable = Boolean(gadget_property.cacheable);\n
                      }\n
                      //cacheable = false ; // to develop faster\n
                      if (cacheable) {\n
                          // get from cache if possible, use last part from URL as cache_key\n
                          cache_id = gadget_property.cache_id;\n
                          app_cache = Cache.get(cache_id, undefined);\n
                          if(app_cache===undefined || app_cache===null){\n
                            // not in cache so we pull from network and cache\n
                            //console.log("not in cache: " + cache_id + "  " + url);\n
                            $.ajax({url:url,\n
                                    yourCustomData: {"gadget_id": gadget_id, "cache_id": cache_id},\n
                                    success: function (data) {\n
                                                cache_id = this.yourCustomData.cache_id;\n
                                                gadget_id = this.yourCustomData.gadget_id;\n
                                                //console.log("set in cache: " + cache_id);\n
                                                Cache.set(cache_id, data);\n
                                                GadgetIndex.getGadgetById(gadget_id).setReady();\n
                                                RenderJs.updateAndRecurse(gadget, data);\n
                                                RenderJs.checkAndTriggerReady();\n
                                      }});\n
                          }\n
                          else {\n
                            // get from cache\n
                            data = app_cache;\n
                            gadget_js.setReady();\n
                            this.updateAndRecurse(gadget, data);\n
                            this.checkAndTriggerReady();\n
                          }\n
                        }\n
                      else {\n
                        // not to be cached\n
                        //console.log("Not to be cached " + url + gadget_id);\n
                        $.ajax({url:url,\n
                                yourCustomData: {"gadget_id": gadget_id},\n
                                success: function (data) {\n
                                  gadget_id = this.yourCustomData.gadget_id;\n
                                  GadgetIndex.getGadgetById(gadget_id).setReady();\n
                                  RenderJs.updateAndRecurse(gadget, data);\n
                                  RenderJs.checkAndTriggerReady();\n
                                }});\n
                      }\n
                    }\n
                    else {\n
                      // gadget is an inline one so no need to load it from network\n
                      gadget_js.setReady();\n
                      RenderJs.checkAndTriggerReady();\n
                    }\n
          },\n
\n
          checkAndTriggerReady: function() {\n
            /*\n
            * Trigger "ready" event only if all gadgets were marked as "ready"\n
            */\n
            var is_gadget_list_loaded;\n
            is_gadget_list_loaded = GadgetIndex.isGadgetListLoaded();\n
            if (is_gadget_list_loaded){\n
              if (!is_ready) {\n
                //console.log("trigger");\n
                GadgetIndex.getRootGadget().getDom().trigger("ready");\n
              }\n
              is_ready = true;\n
            }\n
            return is_gadget_list_loaded;\n
          },\n
\n
          update: function (root) {\n
                    /* update gadget with data from remote source */\n
                    root.find("[gadget]").each(function(i,v){RenderJs.updateGadgetData($(this));});\n
          },\n
\n
          updateGadgetWithDataHandler: function (result) {\n
                                        var data_handler;\n
                                        data_handler = this.yourCustomData.data_handler;\n
                                        if (data_handler!==undefined){\n
                                          eval(data_handler+ "(result)");\n
                                        }\n
          },\n
\n
          updateGadgetData: function(gadget) {\n
                    /* Do real gagdet update here */\n
                    var data_source, data_handler;\n
                    data_source = gadget.attr("gadget:data-source");\n
                    data_handler = gadget.attr("gadget:data-handler");\n
                    // acquire data and pass it to method handler\n
                    if (data_source!==undefined){\n
                      $.ajax({url:data_source,\n
                              dataType: "json",\n
                              yourCustomData: {"data_handler": data_handler},\n
                              success: RenderJs.updateGadgetWithDataHandler});}\n
        }\n
\n
  }}();

]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>15221</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>renderjs.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
