<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <tuple>
          <string>Products.PythonScripts.PythonScript</string>
          <string>PythonScript</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Python_magic</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>__ac_local_roles__</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

"""Returns the difference between the original total payable price of this\n
invoice and all payments that have been made on this invoice.\n
For this, we use both causality relation between transactions and grouping\n
reference for lines.\n
If `detailed` argument is set to a true value, instead of returning the price\n
as a float value, it returns a mapping (node, mirror_section) -> total_price.\n
The `at_date` paremeter is when you want to know the remaining amount at a\n
particuliar date. This simply ignores related payments or transactions after\n
this date.\n
"""\n
portal = context.getPortalObject()\n
total_payable_price_per_node_section = dict()\n
\n
if context.AccountingTransaction_isSourceView():\n
  is_source = 1\n
  section = context.getSourceSection()\n
else:\n
  is_source = 0\n
  section = context.getDestinationSection()\n
\n
# rememeber payable / receivable lines in context.\n
accounts_in_context = []\n
\n
# calculate the total price of this invoice (according to accounting\n
# transaction lines)\n
groupped_line_list = []\n
for line in context.getMovementList(\n
          portal_type=portal.getPortalAccountingMovementTypeList()):\n
  \n
  if line.getGroupingReference():\n
    continue\n
\n
  if is_source:\n
    node_value = line.getSourceValue(portal_type=\'Account\')\n
    line_section = line.getSourceSection()\n
    mirror_section = line.getDestinationSection()\n
    amount = line.getSourceInventoriatedTotalAssetPrice() or 0\n
  else:\n
    node_value = line.getDestinationValue(portal_type=\'Account\')\n
    line_section = line.getDestinationSection()\n
    mirror_section = line.getSourceSection()\n
    amount = line.getDestinationInventoriatedTotalAssetPrice() or 0\n
\n
  \n
  if node_value is not None and \\\n
      node_value.getAccountTypeId() in (\'payable\', \'receivable\'):\n
    key = (node_value.getRelativeUrl(), mirror_section)\n
    total_payable_price_per_node_section[key] =\\\n
          total_payable_price_per_node_section.get(key, 0) + amount\n
    accounts_in_context.append(node_value)\n
    if line.getGroupingReference():\n
      # we rememeber this line to check if there is any line grouped with it\n
      groupped_line_list.append(line)\n
\n
\n
# substract all causalities\n
for related_transaction in context.getCausalityRelatedValueList(\n
      portal_type=context.getPortalAccountingTransactionTypeList()):\n
  if related_transaction.getSimulationState() in (\n
              \'draft\', \'cancelled\', \'deleted\'):\n
    continue\n
  \n
  # if we have a payment related to multiple invoices, we cannot say the\n
  # remaining price on those invoices.\n
  for other_invoice in [ tr for tr in related_transaction.getCausalityValueList(\n
             portal_type=context.getPortalAccountingTransactionTypeList())\n
             if tr != context ]:\n
    other_invoice_is_source = \\\n
                    other_invoice.AccountingTransaction_isSourceView()\n
    for other_line in other_invoice.getMovementList(\n
            portal_type=portal.getPortalAccountingMovementTypeList()):\n
      if other_line.getGroupingReference():\n
        continue\n
      if other_invoice_is_source:\n
        other_invoice_line_account = other_line.getSourceValue()\n
      else:\n
        other_invoice_line_account = other_line.getDestinationValue()\n
        \n
      if other_invoice_line_account in accounts_in_context:\n
        raise ValueError(\'Unable to calculate\')\n
  \n
  related_transaction_is_source = related_transaction.\\\n
                                        AccountingTransaction_isSourceView()\n
  for line in related_transaction.getMovementList(\n
            portal_type=portal.getPortalAccountingMovementTypeList()):\n
    \n
    if line.getGroupingReference():\n
      continue\n
    \n
    if related_transaction_is_source:\n
      node_value = line.getSourceValue(portal_type=\'Account\')\n
      line_section = line.getSourceSection()\n
      mirror_section = line.getDestinationSection()\n
      amount = line.getSourceInventoriatedTotalAssetPrice() or 0\n
      date = line.getStartDate().earliestTime()\n
    else:\n
      node_value = line.getDestinationValue(portal_type=\'Account\')\n
      line_section = line.getDestinationSection()\n
      mirror_section = line.getSourceSection()\n
      amount = line.getDestinationInventoriatedTotalAssetPrice() or 0\n
      date = line.getStopDate().earliestTime()\n
    \n
    if node_value is not None and \\\n
        node_value.getAccountTypeId() in (\'payable\', \'receivable\'):\n
      if at_date and date > at_date:\n
        continue\n
      if node_value in accounts_in_context:\n
        key = (node_value.getRelativeUrl(), mirror_section)\n
        total_payable_price_per_node_section[key] =\\\n
            total_payable_price_per_node_section.get(key, 0) + amount\n
\n
if detailed:\n
  return total_payable_price_per_node_section\n
else:\n
  return sum(total_payable_price_per_node_section.values())\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_code</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_filepath</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_owner</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>detailed=0, at_date=None</string> </value>
        </item>
        <item>
            <key> <string>errors</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>func_code</string> </key>
            <value>
              <object>
                <klass>
                  <global name="FuncCode" module="Shared.DC.Scripts.Signature"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>co_argcount</string> </key>
                        <value> <int>2</int> </value>
                    </item>
                    <item>
                        <key> <string>co_varnames</string> </key>
                        <value>
                          <tuple>
                            <string>detailed</string>
                            <string>at_date</string>
                            <string>_getattr_</string>
                            <string>context</string>
                            <string>portal</string>
                            <string>dict</string>
                            <string>total_payable_price_per_node_section</string>
                            <string>is_source</string>
                            <string>section</string>
                            <string>accounts_in_context</string>
                            <string>groupped_line_list</string>
                            <string>_getiter_</string>
                            <string>line</string>
                            <string>node_value</string>
                            <string>line_section</string>
                            <string>mirror_section</string>
                            <string>amount</string>
                            <string>None</string>
                            <string>key</string>
                            <string>_write_</string>
                            <string>related_transaction</string>
                            <string>append</string>
                            <string>$append0</string>
                            <string>tr</string>
                            <string>other_invoice</string>
                            <string>other_invoice_is_source</string>
                            <string>other_line</string>
                            <string>other_invoice_line_account</string>
                            <string>ValueError</string>
                            <string>related_transaction_is_source</string>
                            <string>date</string>
                            <string>sum</string>
                          </tuple>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>func_defaults</string> </key>
            <value>
              <tuple>
                <int>0</int>
                <none/>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>Invoice_getRemainingTotalPayablePrice</string> </value>
        </item>
        <item>
            <key> <string>warnings</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
