<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <tuple>
          <string>Products.PythonScripts.PythonScript</string>
          <string>PythonScript</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Python_magic</string> </key>
            <value> <string encoding="base64">O/INCg==</string> </value>
        </item>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>__ac_local_roles__</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

#\n
# This method returns a list of accounts virtually expanded, ie. payable and receivable accounts\n
# are split by \'destination_section\' categories and bank accounts are split by \'source_payment\'\n
#\n
\n
from DateTime import DateTime\n
import math\n
\n
LOG = lambda msg : context.getPortalObject().log(\n
        "AccountModule_getAccountListForTrialBalance", msg)\n
\n
from_date = kw.get(\'from_date\', DateTime(\'1970/01/01\'))\n
simulation_state = kw[\'transaction_simulation_state\']\n
section_category = kw[\'transaction_section_category\']\n
at_date = kw[\'at_date\']\n
kw[\'accounting_transaction_line_currency\'] = \'TODO\'\n
\n
\n
getInventory = context.getPortalObject().portal_simulation.getInventory\n
getInventoryList = context.getPortalObject().portal_simulation.getInventoryList\n
        \n
# wether we should or not expand accounts into virtual accounts \n
# (payable & receivable with other parties / bank with bank account)\n
expand_accounts = kw.get("expand_accounts", 1)\n
\n
# the gap tree to use\n
gap_root = kw["gap_root"]\n
\n
# extra arguments for getInventory :\n
extra_kw = {}\n
if kw.get(\'from_date\', None) is not None:\n
  extra_from_date = from_date\n
\n
# shall we display a summary line for expanded accounts ?\n
display_summary_account_line = 0\n
\n
def formatValues(dict) :\n
  for k, v in dict.items():\n
    if not(same_type(v, "") or same_type(v, u"")) :\n
      if round(v) == 0.00 :\n
        dict[k] = ""\n
      else :\n
        negative = v < 0\n
        if k in (\'opening_balance\', \'closing_balance\') and negative :\n
          v = - v\n
        # FIXME: this part is a copy of Floatfield format_value\n
        value = str(float(v))\n
        value_list = value.split(\'.\')\n
        integer = value_list[0]\n
        i = len(integer)%3\n
        value = integer[:i]\n
        while i != len(integer):\n
          value += \' \' + integer[i:i+3]\n
          i += 3\n
        dict[k] = \'%s.%s\'%(value, str(value_list[1])[:2])\n
        # XXX ohada l10n local hack, we only use integer part !\n
        #dict[k] = \'%s\'%(value)\n
        if k in (\'opening_balance\', \'closing_balance\') :\n
          if negative:\n
            dict[k] = \'%s CR\'%(value)\n
          else :\n
            dict[k] = \'%s   \'%(value)\n
        dict[k]\n
  return dict \n
\n
# organisations for expandBankAccountsForAccount\n
organisations = context.portal_categories.restrictedTraverse(\n
                        section_category\n
                      ).getGroupRelatedValueList(portal_type=\'Organisation\')\n
\n
\n
def getDefaultColumnValues(node_uid = 0, **kw): \n
  """ returns then opening balance, debit movements sum, credit movements\n
  sum and closing balance using defaults categories. """\n
  values = {}\n
  values[\'opening_balance\']  = getInventory( node_uid = node_uid,\n
                                             to_date = from_date,\n
                                             simulation_state = simulation_state,\n
                                             omit_simulation = 1,\n
                                            # TODOcurrency = kw[\'accounting_transaction_line_currency\'],\n
                                             **kw )\n
  values[\'debit_movement\']  = getInventory( node_uid = node_uid,\n
                                            from_date = from_date,\n
                                            at_date = at_date,\n
                                            simulation_state = simulation_state,\n
                                            omit_simulation = 1,\n
                                            omit_output = 1,\n
                                           # TODOcurrency = kw[\'accounting_transaction_line_currency\'],\n
                                            **kw )\n
  values[\'credit_movement\']  = - getInventory( node_uid = node_uid,\n
                                               from_date = from_date,\n
                                               at_date = at_date,\n
                                               simulation_state = simulation_state,\n
                                               omit_simulation = 1,\n
                                               omit_input = 1,\n
                                           #    TODOcurrency = kw[\'accounting_transaction_line_currency\'],\n
                                               **kw )\n
  values[\'closing_balance\'] = values[\'opening_balance\'] + \\\n
                              values[\'debit_movement\'] - \\\n
                              values[\'credit_movement\']\n
  return values\n
\n
def expandBankAccountsForAccount(account, **kw) :\n
  tmp_accounts = []\n
  orga_and_banks = []\n
  for orga in organisations :\n
     orga_and_banks += [(orga, o.getObject()) for o in \\\n
                        orga.searchFolder(portal_type=[\'Bank Account\', \'Cash Register\'])]\n
  for orga ,bank in orga_and_banks :\n
    this_tmp_account = {\n
         \'uid\'   : account.getUid(),\n
         \'id\'    : \'%s-%s-%s\' % ( account.getGapId(),\n
                                  orga.getTitle().decode(\'utf8\')[:8].upper(),\n
                                  bank.getTitle().decode(\'utf8\')[:8].upper() ),\n
         \'title\' : \'%s (%s / %s)\' % ( account.getTitle(),\n
                                      orga.getTitle(), bank.getTitle()),\n
    }\n
    this_tmp_account.update(\n
              getDefaultColumnValues( node_uid = account.getUid(),\n
                                      payment_uid = bank.getUid() ) )\n
    if ( this_tmp_account[\'opening_balance\'] != 0 or\n
         this_tmp_account[\'credit_movement\'] != 0 or \n
         this_tmp_account[\'debit_movement\'] != 0 or\n
         this_tmp_account[\'closing_balance\'] != 0 ) :\n
      tmp_accounts.append( account.asContext( **formatValues(this_tmp_account) ) )\n
  return tmp_accounts\n
\n
def expandThirdPartiesForAccount(account, **kw) :\n
  tmp_accounts = []\n
  # get all entities that are destination section related to this account.\n
  entities = [o.getObject() for o in \\\n
        context.Account_zDistinctSectionList( node_uid = account.getUid(), \n
                                              at_date = at_date,\n
                                              simulation_state = simulation_state)]\n
  for entity in entities :\n
    this_tmp_account = {\n
         \'uid\' : account.getUid(),\n
         \'id\'  : \'%s-%s\'%(account.getGapId(),\n
                  entity.getTitle().decode(\'utf8\')[:12].upper()),\n
         \'title\' : \'%s (%s)\'%(account.getTitle(),\n
                  entity.getTitle()),\n
    }\n
    this_tmp_account.update(\n
              getDefaultColumnValues( node_uid = account.getUid(),\n
                                      mirror_section_uid = entity.getUid() ) )\n
    if ( this_tmp_account[\'opening_balance\'] != 0 or\n
         this_tmp_account[\'credit_movement\'] != 0 or \n
         this_tmp_account[\'debit_movement\'] != 0 ) :\n
      tmp_accounts.append( account.asContext( **formatValues(this_tmp_account) ) )\n
  return tmp_accounts\n
\n
accounts = [ o.getObject() for o in context.portal_catalog(**kw) ]\n
accounts = filter(lambda account: account.getGapId() is not None, accounts )\n
\n
def gap_sort_func(a, b) :\n
  """ simple function to sort accounts. """\n
  a_gap = a.Account_getGapId()\n
  b_gap = b.Account_getGapId()\n
  while len(a_gap) < 7 :\n
    a_gap += \'0\'\n
  while len(b_gap) < 7 :\n
    b_gap += \'0\'\n
  return cmp(a_gap, b_gap)\n
\n
accounts.sort(gap_sort_func)\n
\n
accounts_to_expand_by_third_parties = context.portal_categories\\\n
        .account_type.asset.receivable.getAccountTypeRelatedValueList(\n
         portal_type=\'Account\', strict_membership=1) + \\\n
    context.portal_categories.account_type.liability.payable\\\n
        .getAccountTypeRelatedValueList(\n
        # we use strict_membership because we do not want VAT\n
         portal_type=\'Account\', strict_membership=1)\n
\n
# use a dict for faster lookup\n
accounts_to_expand_by_third_parties_dict = {}\n
for account in accounts_to_expand_by_third_parties :\n
  accounts_to_expand_by_third_parties_dict[account.getId()] = 1\n
\n
accounts_to_expand_by_bank_accounts = context.portal_categories\\\n
      .account_type.asset.bank.getAccountTypeRelatedValueList(\n
       portal_type=\'Account\')\n
accounts_to_expand_by_bank_accounts_dict = {}\n
for account in accounts_to_expand_by_bank_accounts :\n
  accounts_to_expand_by_bank_accounts_dict[account.getId()] = 1\n
\n
report_items = []\n
results = []\n
for account in accounts :\n
  if expand_accounts and account.getId() in accounts_to_expand_by_third_parties_dict :\n
    # get all organisations with this account\n
    # and create a "virtual-Account" for each organisation\n
    virtual_accounts = expandThirdPartiesForAccount(account, **kw)\n
    report_items += virtual_accounts\n
    if display_summary_account_line or not len(virtual_accounts) :\n
      # then display the aggregate account\n
      item = { \'title\': account.getTitle(), }\n
      item.update( getDefaultColumnValues( node_uid = account.getUid() ) )\n
\n
      # provide a clearly different display when it is a summary account \n
      # (TODO: it should be in itallic ?).\n
      if len(virtual_accounts) :\n
        item[\'id\'] = "   %s **TOTAL**" % account.getGapId()\n
      else :\n
        item[\'id\'] = account.getGapId()\n
      item[\'closing_balance\'] = item[\'opening_balance\'] + \\\n
                                item[\'debit_movement\'] - \\\n
                                item[\'credit_movement\']\n
\n
      report_items.append( account.asContext( **formatValues(item) ) )\n
\n
  elif expand_accounts and account.getId() in accounts_to_expand_by_bank_accounts_dict :\n
    virtual_accounts = expandBankAccountsForAccount(account, **kw)\n
    report_items += virtual_accounts\n
    if display_summary_account_line or not len(virtual_accounts)  :\n
      # then display the aggregate account\n
      item = { \'title\': account.getTitle(), }\n
      item.update( getDefaultColumnValues( node_uid = account.getUid() ) )\n
\n
      # provide a clearly different display when it is a summary account \n
      # (TODO: it should be in itallic ?).\n
      if len(virtual_accounts) :\n
        item[\'id\'] = "   %s **TOTAL**" % account.getGapId()\n
      else :\n
        item[\'id\'] = account.getGapId()\n
      item[\'closing_balance\'] = item[\'opening_balance\'] + \\\n
                                item[\'debit_movement\'] - \\\n
                                item[\'credit_movement\']\n
\n
      report_items.append(account.asContext(**formatValues(item)))    \n
  else :\n
    item = { \'id\' : account.getGapId(),\n
             \'title\': account.getTitle(), }\n
    item.update( getDefaultColumnValues( node_uid = account.getUid() ) )\n
    report_items.append( account.asContext( **formatValues(item) ) )\n
\n
return report_items\n
# vim: syntax=python\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_code</string> </key>
            <value> <string encoding="base64">YwAAAAAAAAAAAQAAAEAAAABzDQAAAGQBAIQAAFoAAGQAAFMoAgAAAE5jAQAAACwAAAA+AAAACwAA
AHN7BgAAZAEAawAAbAAAfQIAAWQCAGsBAH0DAGQDAIQAAH0EAHQDAHwBAGQEAIMCAGQFAHwCAGQG
AIMBAIMCAIkBAHQGAHwBAGQHAIMCAIkDAHQGAHwBAGQIAIMCAH0JAHQGAHwBAGQJAIMCAIkEAGQK
AHQKAHwBAIMBAGQLADx0AwB0AwB0AwB0CwBkDACDAgCDAABkDQCDAgBkDgCDAgCJAgB0AwB0AwB0
AwB0CwBkDACDAgCDAABkDQCDAgBkDwCDAgB9DgB0AwB8AQBkBACDAgBkEABkEQCDAgB9DwB0BgB8
AQBkEgCDAgB9EABoAAB9EQB0AwB8AQBkBACDAgBkBQB0EQCDAgB0EQBqCQBvCgABiAEAfRMAbgEA
AWQTAH0UAGQUAIQAAIkGAHQDAHQDAHQDAHQLAGQVAIMCAGQWAIMCAHwJAIMBAGQXAIMCAGQYAGQZ
AIMAAYkAAGQTAIcEAIcBAIcCAIcDAGQaAIYBAIkFAIcAAIcFAIcGAGQbAIYAAH0YAIcEAIcGAIcF
AIcDAGQcAIYAAH0ZAGcAAARpGQB9GwB0GwB0HAB0AwB0CwBkHQCDAgB8AQCNAQCDAQBEXRwAfR4A
fBsAdAMAfB4AZB4AgwIAgwAAgwEAAXG8AX4bAH0fAHQfAGQfAIQAAHwfAIMCAH0fAGQgAIQAAH0h
AHQDAHwfAGQhAIMCAHwhAIMBAAF0AwB0AwB0AwB0AwB0AwB0CwBkFQCDAgBkIgCDAgBkIwCDAgBk
JACDAgBkJQCDAgBkGABkJgBkJwBkEQCDAAJ0AwB0AwB0AwB0AwB0AwB0CwBkFQCDAgBkIgCDAgBk
KACDAgBkKQCDAgBkJQCDAgBkGABkJgBkJwBkEQCDAAIXfSIAaAAAfSMAeDAAdBsAfCIAgwEARF0i
AH0kAGQRAHQKAHwjAIMBAHQDAHwkAGQqAIMCAIMAADxxpAJXdAMAdAMAdAMAdAMAdAMAdAsAZBUA
gwIAZCIAgwIAZCMAgwIAZCsAgwIAZCUAgwIAZBgAZCYAgwABfSUAaAAAfSYAeDAAdBsAfCUAgwEA
RF0iAH0kAGQRAHQKAHwmAIMBAHQDAHwkAGQqAIMCAIMAADxxGQNXZwAAfScAZwAAfSgAeCUDdBsA
fB8AgwEARF0XA30kAHwPAG8WAAF0AwB8JABkKgCDAgCDAAB8IwBqBgBvJwEBdBwAfBkAfCQAfAEA
jQIAfSkAfCcAfCkAN30nAHwUAHALAAF0KQB8KQCDAQAMb/IAAWgAAARkLAB0AwB8JABkLQCDAgCD
AAADPH0rAHQDAHwrAGQuAIMCAIgFAGQvAHQDAHwkAGQwAIMCAIMAAIMAAYMBAAF0KQB8KQCDAQBv
JAABZDEAdAMAfCQAZDIAgwIAgwAAFnQKAHwrAIMBAGQzADxuHQABdAMAfCQAZDIAgwIAgwAAdAoA
fCsAgwEAZDMAPHQGAHwrAGQ0AIMCAHQGAHwrAGQ1AIMCABd0BgB8KwBkNgCDAgAYdAoAfCsAgwEA
ZDcAPHQDAHwnAGQ4AIMCAHQcAHQDAHwkAGQ5AIMCAIgGAHwrAIMBAI0BAIMBAAFxbwYBcVgDAXwP
AG8WAAF0AwB8JABkKgCDAgCDAAB8JgBqBgBvJwEBdBwAfBgAfCQAfAEAjQIAfSkAfCcAfCkAN30n
AHwUAHALAAF0KQB8KQCDAQAMb/IAAWgAAARkLAB0AwB8JABkLQCDAgCDAAADPH0rAHQDAHwrAGQu
AIMCAIgFAGQvAHQDAHwkAGQwAIMCAIMAAIMAAYMBAAF0KQB8KQCDAQBvJAABZDEAdAMAfCQAZDIA
gwIAgwAAFnQKAHwrAIMBAGQzADxuHQABdAMAfCQAZDIAgwIAgwAAdAoAfCsAgwEAZDMAPHQGAHwr
AGQ0AIMCAHQGAHwrAGQ1AIMCABd0BgB8KwBkNgCDAgAYdAoAfCsAgwEAZDcAPHQDAHwnAGQ4AIMC
AHQcAHQDAHwkAGQ5AIMCAIgGAHwrAIMBAI0BAIMBAAFxbwYBcVgDAWgAAARkMwB0AwB8JABkMgCD
AgCDAAADPARkLAB0AwB8JABkLQCDAgCDAAADPH0rAHQDAHwrAGQuAIMCAIgFAGQvAHQDAHwkAGQw
AIMCAIMAAIMAAYMBAAF0AwB8JwBkOACDAgB0HAB0AwB8JABkOQCDAgCIBgB8KwCDAQCNAQCDAQAB
cVgDV3wnAFNkAgBTKDoAAABzIwAAACBzaW1wbGUgZnVuY3Rpb24gdG8gc29ydCBhY2NvdW50cy4g
KAEAAABzCAAAAERhdGVUaW1lTmMBAAAAAwAAAAQAAABDAAAAcyIAAAB0AAB0AAB0AQBkAQCDAgCD
AABkAgCDAgBkAwB8AACDAgBTKAQAAABOcw8AAABnZXRQb3J0YWxPYmplY3RzAwAAAGxvZ3MrAAAA
QWNjb3VudE1vZHVsZV9nZXRBY2NvdW50TGlzdEZvclRyaWFsQmFsYW5jZSgDAAAAcwkAAABfZ2V0
YXR0cl9zBwAAAGNvbnRleHRzAwAAAG1zZygDAAAAcwMAAABtc2dzCQAAAF9nZXRhdHRyX3MHAAAA
Y29udGV4dCgAAAAAKAAAAABzDwAAAFNjcmlwdCAoUHl0aG9uKXMLAAAAPGxhbWJkYS4xNz4JAAAA
cwIAAAAbAXMDAAAAZ2V0cwkAAABmcm9tX2RhdGVzCgAAADE5NzAvMDEvMDFzHAAAAHRyYW5zYWN0
aW9uX3NpbXVsYXRpb25fc3RhdGVzHAAAAHRyYW5zYWN0aW9uX3NlY3Rpb25fY2F0ZWdvcnlzBwAA
AGF0X2RhdGVzBAAAAFRPRE9zJAAAAGFjY291bnRpbmdfdHJhbnNhY3Rpb25fbGluZV9jdXJyZW5j
eXMPAAAAZ2V0UG9ydGFsT2JqZWN0cxEAAABwb3J0YWxfc2ltdWxhdGlvbnMMAAAAZ2V0SW52ZW50
b3J5cxAAAABnZXRJbnZlbnRvcnlMaXN0cw8AAABleHBhbmRfYWNjb3VudHNpAQAAAHMIAAAAZ2Fw
X3Jvb3RpAAAAAGMBAAAAEQAAABgAAABDAAAAc94BAAB40wF0AAB0AQB8AABkAQCDAgCDAACDAQBE
XbkBXAIAfQMAfQQAdAUAfAQAZAIAgwIAcA0AAXQFAHwEAGQDAIMCAAxvjAEBdAYAfAQAgwEAZAQA
agIAbxQAAWQCAHQHAHwAAIMBAHwDADxx0gEBfAQAZAUAagAAfQgAfAMAZAYAZAcAZgIAagYAbwQA
AXwIAG8LAAF8BAALfQQAbgEAAXQJAHQKAHwEAIMBAIMBAH0LAHQBAHwLAGQIAIMCAGQJAIMBAH0M
AHQNAHwMAGQFAIMCAH0OAHQPAHwOAIMBAGQKABZ9EAB0DQB8DgBkAAB8EACFAgCDAgB9CwB4QwB8
EAB0DwB8DgCDAQBqAwBvLwABfAsAZAsAdA0AfA4AfBAAfBAAZAoAF4UCAIMCABc3fQsAfBAAZAoA
N30QAHH8AAFXZAwAfAsAdA0AdAkAdA0AfAwAZA0AgwIAgwEAZAAAZA4AhQIAgwIAZgIAFnQHAHwA
AIMBAHwDADx8AwBkBgBkBwBmAgBqBgBvNwABfAgAbxgAAWQPAHwLABZ0BwB8AACDAQB8AwA8ccEB
AWQQAHwLABZ0BwB8AACDAQB8AwA8bgEAAXQNAHwAAHwDAIMCAAFxGQABcRkAV3wAAFNkAABTKBEA
AABOcwUAAABpdGVtc3MAAAAAdQAAAABmAzAuMGkAAAAAcw8AAABvcGVuaW5nX2JhbGFuY2VzDwAA
AGNsb3NpbmdfYmFsYW5jZXMFAAAAc3BsaXRzAQAAAC5pAwAAAHMBAAAAIHMFAAAAJXMuJXNpAQAA
AGkCAAAAcwUAAAAlcyBDUnMFAAAAJXMgICAoEQAAAHMJAAAAX2dldGl0ZXJfcwkAAABfZ2V0YXR0
cl9zBAAAAGRpY3RzAQAAAGtzAQAAAHZzCQAAAHNhbWVfdHlwZXMFAAAAcm91bmRzBwAAAF93cml0
ZV9zCAAAAG5lZ2F0aXZlcwMAAABzdHJzBQAAAGZsb2F0cwUAAAB2YWx1ZXMKAAAAdmFsdWVfbGlz
dHMJAAAAX2dldGl0ZW1fcwcAAABpbnRlZ2VycwMAAABsZW5zAQAAAGkoEQAAAHMEAAAAZGljdHMJ
AAAAX2dldGl0ZXJfcwkAAABfZ2V0YXR0cl9zAQAAAGtzAQAAAHZzCQAAAHNhbWVfdHlwZXMFAAAA
cm91bmRzBwAAAF93cml0ZV9zCAAAAG5lZ2F0aXZlcwMAAABzdHJzBQAAAGZsb2F0cwUAAAB2YWx1
ZXMKAAAAdmFsdWVfbGlzdHMJAAAAX2dldGl0ZW1fcwcAAABpbnRlZ2VycwMAAABsZW5zAQAAAGko
AAAAACgAAAAAcw8AAABTY3JpcHQgKFB5dGhvbilzDAAAAGZvcm1hdFZhbHVlcyUAAABzMAAAAAAB
GQAMASEBEwEUAgwBGgELAhIBFQEPARABFQEDABMBIQEPATgDEwEHARgCGwESAXMRAAAAcG9ydGFs
X2NhdGVnb3JpZXNzEgAAAHJlc3RyaWN0ZWRUcmF2ZXJzZXMYAAAAZ2V0R3JvdXBSZWxhdGVkVmFs
dWVMaXN0cwsAAABwb3J0YWxfdHlwZXMMAAAAT3JnYW5pc2F0aW9uYwEAAAAKAAAAEAAAAAsAAABz
7QAAAGgAAH0CAHQBAIgCAGQBAHwAAGQCAIgBAGQDAIgDAGQEAGQFAHwBAI0BBHQHAHwCAIMBAGQG
ADx0AQCIAgBkAQB8AABkBwCIAQBkCACIAABkAwCIAwBkBABkBQBkCQBkBQB8AQCNAQZ0BwB8AgCD
AQBkCgA8dAEAiAIAZAEAfAAAZAcAiAEAZAgAiAAAZAMAiAMAZAQAZAUAZAsAZAUAfAEAjQEGC3QH
AHwCAIMBAGQMADx0CQB8AgBkBgCDAgB0CQB8AgBkCgCDAgAXdAkAfAIAZAwAgwIAGHQHAHwCAIMB
AGQNADx8AgBTZA4AUygPAAAAc3oAAAAgcmV0dXJucyB0aGVuIG9wZW5pbmcgYmFsYW5jZSwgZGVi
aXQgbW92ZW1lbnRzIHN1bSwgY3JlZGl0IG1vdmVtZW50cwogIHN1bSBhbmQgY2xvc2luZyBiYWxh
bmNlIHVzaW5nIGRlZmF1bHRzIGNhdGVnb3JpZXMuIHMIAAAAbm9kZV91aWRzBwAAAHRvX2RhdGVz
EAAAAHNpbXVsYXRpb25fc3RhdGVzDwAAAG9taXRfc2ltdWxhdGlvbmkBAAAAcw8AAABvcGVuaW5n
X2JhbGFuY2VzCQAAAGZyb21fZGF0ZXMHAAAAYXRfZGF0ZXMLAAAAb21pdF9vdXRwdXRzDgAAAGRl
Yml0X21vdmVtZW50cwoAAABvbWl0X2lucHV0cw8AAABjcmVkaXRfbW92ZW1lbnRzDwAAAGNsb3Np
bmdfYmFsYW5jZU4oCgAAAHMGAAAAdmFsdWVzcwcAAABfYXBwbHlfcwwAAABnZXRJbnZlbnRvcnlz
CAAAAG5vZGVfdWlkcwkAAABmcm9tX2RhdGVzEAAAAHNpbXVsYXRpb25fc3RhdGVzAgAAAGt3cwcA
AABfd3JpdGVfcwcAAABhdF9kYXRlcwkAAABfZ2V0aXRlbV8oCgAAAHMIAAAAbm9kZV91aWRzAgAA
AGt3cwYAAAB2YWx1ZXNzBwAAAF9hcHBseV9zDAAAAGdldEludmVudG9yeXMJAAAAZnJvbV9kYXRl
cxAAAABzaW11bGF0aW9uX3N0YXRlcwcAAABfd3JpdGVfcwcAAABhdF9kYXRlcwkAAABfZ2V0aXRl
bV8oBAAAAHMHAAAAYXRfZGF0ZXMJAAAAZnJvbV9kYXRlcwwAAABnZXRJbnZlbnRvcnlzEAAAAHNp
bXVsYXRpb25fc3RhdGUoAAAAAHMPAAAAU2NyaXB0IChQeXRob24pcxYAAABnZXREZWZhdWx0Q29s
dW1uVmFsdWVzSAAAAHMmAAAAAAMGAQ8BBgEJAxMBDwEGAQYBDwQTAQ8BBgEGAQ8EFAEPAQ0BFwFj
AQAAABEAAAAWAAAACwAAAHNHAgAAZwAAfQIAZwAAfQMAeG8AdAIAiAAAgwEARF1hAH0GAHwDAGcA
AARpBQB9CAB0AgB0BwB8BgBkAQCDAgBkAgBkAwBkBABnAgCDAAGDAQBEXSIAfQoAfAgAfAYAdAcA
fAoAZAUAgwIAgwAAZgIAgwEAAXFOAH4IADd9AwBxGQBXeL4BdAIAfAMAgwEARF2wAVwCAH0GAH0L
AGgAAARkBgB0BwB8AABkBwCDAgCDAAADPARkCABkCQB0BwB8AABkCgCDAgCDAAB0BwB0CwB0BwB0
BwB8BgBkCwCDAgCDAABkDACDAgBkDQCDAQBkAABkDgCFAgCDAgBkDwCDAgCDAAB0BwB0CwB0BwB0
BwB8CwBkCwCDAgCDAABkDACDAgBkDQCDAQBkAABkDgCFAgCDAgBkDwCDAgCDAABmAwAWAzwEZBAA
ZBEAdAcAfAAAZAsAgwIAgwAAdAcAfAYAZAsAgwIAgwAAdAcAfAsAZAsAgwIAgwAAZgMAFgM8fQ0A
dAcAfA0AZBIAgwIAiAEAZBMAdAcAfAAAZAcAgwIAgwAAZBQAdAcAfAsAZAcAgwIAgwAAgwACgwEA
AXQLAHwNAGQVAIMCAGQWAGoDAHA/AAF0CwB8DQBkFwCDAgBkFgBqAwBwKQABdAsAfA0AZBgAgwIA
ZBYAagMAcBMAAXQLAHwNAGQZAIMCAGQWAGoDAG8vAAF0BwB8AgBkGgCDAgB0DgB0BwB8AABkGwCD
AgCIAgB8DQCDAQCNAQCDAQABcYsAAXGLAFd8AgBTZAAAUygcAAAATnMMAAAAc2VhcmNoRm9sZGVy
cwsAAABwb3J0YWxfdHlwZXMMAAAAQmFuayBBY2NvdW50cw0AAABDYXNoIFJlZ2lzdGVycwkAAABn
ZXRPYmplY3RzAwAAAHVpZHMGAAAAZ2V0VWlkcwIAAABpZHMIAAAAJXMtJXMtJXNzCAAAAGdldEdh
cElkcwgAAABnZXRUaXRsZXMGAAAAZGVjb2RlcwQAAAB1dGY4aQgAAABzBQAAAHVwcGVycwUAAAB0
aXRsZXMMAAAAJXMgKCVzIC8gJXMpcwYAAAB1cGRhdGVzCAAAAG5vZGVfdWlkcwsAAABwYXltZW50
X3VpZHMPAAAAb3BlbmluZ19iYWxhbmNlaQAAAABzDwAAAGNyZWRpdF9tb3ZlbWVudHMOAAAAZGVi
aXRfbW92ZW1lbnRzDwAAAGNsb3NpbmdfYmFsYW5jZXMGAAAAYXBwZW5kcwkAAABhc0NvbnRleHQo
EAAAAHMMAAAAdG1wX2FjY291bnRzcw4AAABvcmdhX2FuZF9iYW5rc3MJAAAAX2dldGl0ZXJfcw0A
AABvcmdhbmlzYXRpb25zcwQAAABvcmdhcwYAAABhcHBlbmRzCAAAACRhcHBlbmQwcwkAAABfZ2V0
YXR0cl9zAQAAAG9zBAAAAGJhbmtzBwAAAGFjY291bnRzCQAAAF9nZXRpdGVtX3MQAAAAdGhpc190
bXBfYWNjb3VudHMWAAAAZ2V0RGVmYXVsdENvbHVtblZhbHVlc3MHAAAAX2FwcGx5X3MMAAAAZm9y
bWF0VmFsdWVzKBEAAABzBwAAAGFjY291bnRzAgAAAGt3cwwAAAB0bXBfYWNjb3VudHNzDgAAAG9y
Z2FfYW5kX2JhbmtzcwkAAABfZ2V0aXRlcl9zDQAAAG9yZ2FuaXNhdGlvbnNzBAAAAG9yZ2FzBgAA
AGFwcGVuZHMIAAAAJGFwcGVuZDBzCQAAAF9nZXRhdHRyX3MBAAAAb3MEAAAAYmFua3MJAAAAX2dl
dGl0ZW1fcxAAAAB0aGlzX3RtcF9hY2NvdW50cxYAAABnZXREZWZhdWx0Q29sdW1uVmFsdWVzcwcA
AABfYXBwbHlfcwwAAABmb3JtYXRWYWx1ZXMoAwAAAHMNAAAAb3JnYW5pc2F0aW9uc3MWAAAAZ2V0
RGVmYXVsdENvbHVtblZhbHVlc3MMAAAAZm9ybWF0VmFsdWVzKAAAAABzDwAAAFNjcmlwdCAoUHl0
aG9uKXMcAAAAZXhwYW5kQmFua0FjY291bnRzRm9yQWNjb3VudGcAAABzMAAAAAABBgEGAQ0ABgET
AUwBDQAMAQoBFQEbATkBOgESAScCCQEbARMBGQEWARYBFgEwAWMBAAAAEgAAABoAAAALAAAAc84B
AABnAAB9AgBnAAAEaQEAfQQAdAMAdAQAdAUAZAEAgwIAZAIAdAQAfAAAZAMAgwIAgwAAZAQAiAAA
ZAUAiAMAgwADgwEARF0cAH0KAHwEAHQEAHwKAGQGAIMCAIMAAIMBAAFxRAB+BAB9CwB4WgF0AwB8
CwCDAQBEXUwBfQwAaAAABGQHAHQEAHwAAGQDAIMCAIMAAAM8BGQIAGQJAHQEAHwAAGQKAIMCAIMA
AHQEAHQMAHQEAHQEAHwMAGQLAIMCAIMAAGQMAIMCAGQNAIMBAGQAAGQOAIUCAIMCAGQPAIMCAIMA
AGYCABYDPARkEABkEQB0BAB8AABkCwCDAgCDAAB0BAB8DABkCwCDAgCDAABmAgAWAzx9DgB0BAB8
DgBkEgCDAgCIAgBkAgB0BAB8AABkAwCDAgCDAABkEwB0BAB8DABkAwCDAgCDAACDAAKDAQABdAwA
fA4AZBQAgwIAZBUAagMAcCkAAXQMAHwOAGQWAIMCAGQVAGoDAHATAAF0DAB8DgBkFwCDAgBkFQBq
AwBvLwABdAQAfAIAZBgAgwIAdA8AdAQAfAAAZBkAgwIAiAEAfA4AgwEAjQEAgwEAAXF2AAFxdgBX
fAIAU2QAAFMoGgAAAE5zHAAAAEFjY291bnRfekRpc3RpbmN0U2VjdGlvbkxpc3RzCAAAAG5vZGVf
dWlkcwYAAABnZXRVaWRzBwAAAGF0X2RhdGVzEAAAAHNpbXVsYXRpb25fc3RhdGVzCQAAAGdldE9i
amVjdHMDAAAAdWlkcwIAAABpZHMFAAAAJXMtJXNzCAAAAGdldEdhcElkcwgAAABnZXRUaXRsZXMG
AAAAZGVjb2RlcwQAAAB1dGY4aQwAAABzBQAAAHVwcGVycwUAAAB0aXRsZXMHAAAAJXMgKCVzKXMG
AAAAdXBkYXRlcxIAAABtaXJyb3Jfc2VjdGlvbl91aWRzDwAAAG9wZW5pbmdfYmFsYW5jZWkAAAAA
cw8AAABjcmVkaXRfbW92ZW1lbnRzDgAAAGRlYml0X21vdmVtZW50cwYAAABhcHBlbmRzCQAAAGFz
Q29udGV4dCgRAAAAcwwAAAB0bXBfYWNjb3VudHNzBgAAAGFwcGVuZHMIAAAAJGFwcGVuZDBzCQAA
AF9nZXRpdGVyX3MJAAAAX2dldGF0dHJfcwcAAABjb250ZXh0cwcAAABhY2NvdW50cwcAAABhdF9k
YXRlcxAAAABzaW11bGF0aW9uX3N0YXRlcwEAAABvcwgAAABlbnRpdGllc3MGAAAAZW50aXR5cwkA
AABfZ2V0aXRlbV9zEAAAAHRoaXNfdG1wX2FjY291bnRzFgAAAGdldERlZmF1bHRDb2x1bW5WYWx1
ZXNzBwAAAF9hcHBseV9zDAAAAGZvcm1hdFZhbHVlcygSAAAAcwcAAABhY2NvdW50cwIAAABrd3MM
AAAAdG1wX2FjY291bnRzcwYAAABhcHBlbmRzCAAAACRhcHBlbmQwcwkAAABfZ2V0aXRlcl9zCQAA
AF9nZXRhdHRyX3MHAAAAY29udGV4dHMHAAAAYXRfZGF0ZXMQAAAAc2ltdWxhdGlvbl9zdGF0ZXMB
AAAAb3MIAAAAZW50aXRpZXNzBgAAAGVudGl0eXMJAAAAX2dldGl0ZW1fcxAAAAB0aGlzX3RtcF9h
Y2NvdW50cxYAAABnZXREZWZhdWx0Q29sdW1uVmFsdWVzcwcAAABfYXBwbHlfcwwAAABmb3JtYXRW
YWx1ZXMoBAAAAHMHAAAAYXRfZGF0ZXMMAAAAZm9ybWF0VmFsdWVzcxYAAABnZXREZWZhdWx0Q29s
dW1uVmFsdWVzcxAAAABzaW11bGF0aW9uX3N0YXRlKAAAAABzDwAAAFNjcmlwdCAoUHl0aG9uKXMc
AAAAZXhwYW5kVGhpcmRQYXJ0aWVzRm9yQWNjb3VudIAAAABzKgAAAAABBgIQAR4BBgEvAQ0ABgEK
ARUBGwE6ARIBGAIJARsBEwEZARYBFgEwAXMOAAAAcG9ydGFsX2NhdGFsb2dzCQAAAGdldE9iamVj
dGMBAAAAAwAAAAMAAABDAAAAcxYAAAB0AAB8AABkAQCDAgCDAAB0AgBqCQBTKAIAAABOcwgAAABn
ZXRHYXBJZCgDAAAAcwkAAABfZ2V0YXR0cl9zBwAAAGFjY291bnRzBAAAAE5vbmUoAwAAAHMHAAAA
YWNjb3VudHMJAAAAX2dldGF0dHJfcwQAAABOb25lKAAAAAAoAAAAAHMPAAAAU2NyaXB0IChQeXRo
b24pcwsAAAA8bGFtYmRhLjE4PpkAAABzAAAAAGMCAAAABwAAAAcAAABDAAAAc38AAAB0AAB8AABk
AQCDAgCDAAB9AwB0AAB8AQBkAQCDAgCDAAB9BAB4IgB0BQB8AwCDAQBkAgBqAABvDgABfAMAZAMA
N30DAHEnAAFXeCIAdAUAfAQAgwEAZAIAagAAbw4AAXwEAGQDADd9BABxTAABV3QGAHwDAHwEAIMC
AFNkBABTKAUAAABzIwAAACBzaW1wbGUgZnVuY3Rpb24gdG8gc29ydCBhY2NvdW50cy4gcxAAAABB
Y2NvdW50X2dldEdhcElkaQcAAABzAQAAADBOKAcAAABzCQAAAF9nZXRhdHRyX3MBAAAAYXMFAAAA
YV9nYXBzAQAAAGJzBQAAAGJfZ2FwcwMAAABsZW5zAwAAAGNtcCgHAAAAcwEAAABhcwEAAABicwkA
AABfZ2V0YXR0cl9zBQAAAGFfZ2FwcwUAAABiX2dhcHMDAAAAbGVucwMAAABjbXAoAAAAACgAAAAA
cw8AAABTY3JpcHQgKFB5dGhvbilzDQAAAGdhcF9zb3J0X2Z1bmObAAAAcxIAAAAAAhIBEgEDABMB
DwEDABMBDwFzBAAAAHNvcnRzDAAAAGFjY291bnRfdHlwZXMFAAAAYXNzZXRzCgAAAHJlY2VpdmFi
bGVzHgAAAGdldEFjY291bnRUeXBlUmVsYXRlZFZhbHVlTGlzdHMHAAAAQWNjb3VudHMRAAAAc3Ry
aWN0X21lbWJlcnNoaXBzCQAAAGxpYWJpbGl0eXMHAAAAcGF5YWJsZXMFAAAAZ2V0SWRzBAAAAGJh
bmtzBQAAAHRpdGxlcwgAAABnZXRUaXRsZXMGAAAAdXBkYXRlcwgAAABub2RlX3VpZHMGAAAAZ2V0
VWlkcw8AAAAgICAlcyAqKlRPVEFMKipzCAAAAGdldEdhcElkcwIAAABpZHMPAAAAb3BlbmluZ19i
YWxhbmNlcw4AAABkZWJpdF9tb3ZlbWVudHMPAAAAY3JlZGl0X21vdmVtZW50cw8AAABjbG9zaW5n
X2JhbGFuY2VzBgAAAGFwcGVuZHMJAAAAYXNDb250ZXh0KCsAAABzCAAAAERhdGVUaW1lcwQAAABt
YXRocwMAAABMT0dzCQAAAF9nZXRhdHRyX3MCAAAAa3dzCQAAAGZyb21fZGF0ZXMJAAAAX2dldGl0
ZW1fcxAAAABzaW11bGF0aW9uX3N0YXRlcxAAAABzZWN0aW9uX2NhdGVnb3J5cwcAAABhdF9kYXRl
cwcAAABfd3JpdGVfcwcAAABjb250ZXh0cwwAAABnZXRJbnZlbnRvcnlzEAAAAGdldEludmVudG9y
eUxpc3RzDwAAAGV4cGFuZF9hY2NvdW50c3MIAAAAZ2FwX3Jvb3RzCAAAAGV4dHJhX2t3cwQAAABO
b25lcw8AAABleHRyYV9mcm9tX2RhdGVzHAAAAGRpc3BsYXlfc3VtbWFyeV9hY2NvdW50X2xpbmVz
DAAAAGZvcm1hdFZhbHVlc3MNAAAAb3JnYW5pc2F0aW9uc3MWAAAAZ2V0RGVmYXVsdENvbHVtblZh
bHVlc3McAAAAZXhwYW5kQmFua0FjY291bnRzRm9yQWNjb3VudHMcAAAAZXhwYW5kVGhpcmRQYXJ0
aWVzRm9yQWNjb3VudHMGAAAAYXBwZW5kcwgAAAAkYXBwZW5kMHMJAAAAX2dldGl0ZXJfcwcAAABf
YXBwbHlfcwEAAABvcwgAAABhY2NvdW50c3MGAAAAZmlsdGVycw0AAABnYXBfc29ydF9mdW5jcyMA
AABhY2NvdW50c190b19leHBhbmRfYnlfdGhpcmRfcGFydGllc3MoAAAAYWNjb3VudHNfdG9fZXhw
YW5kX2J5X3RoaXJkX3BhcnRpZXNfZGljdHMHAAAAYWNjb3VudHMjAAAAYWNjb3VudHNfdG9fZXhw
YW5kX2J5X2JhbmtfYWNjb3VudHNzKAAAAGFjY291bnRzX3RvX2V4cGFuZF9ieV9iYW5rX2FjY291
bnRzX2RpY3RzDAAAAHJlcG9ydF9pdGVtc3MHAAAAcmVzdWx0c3MQAAAAdmlydHVhbF9hY2NvdW50
c3MDAAAAbGVucwQAAABpdGVtKCwAAABzCQAAAHNlbGVjdGlvbnMCAAAAa3dzCAAAAERhdGVUaW1l
cwQAAABtYXRocwMAAABMT0dzCQAAAF9nZXRhdHRyX3MJAAAAZnJvbV9kYXRlcwkAAABfZ2V0aXRl
bV9zEAAAAHNpbXVsYXRpb25fc3RhdGVzEAAAAHNlY3Rpb25fY2F0ZWdvcnlzBwAAAGF0X2RhdGVz
BwAAAF93cml0ZV9zBwAAAGNvbnRleHRzDAAAAGdldEludmVudG9yeXMQAAAAZ2V0SW52ZW50b3J5
TGlzdHMPAAAAZXhwYW5kX2FjY291bnRzcwgAAABnYXBfcm9vdHMIAAAAZXh0cmFfa3dzBAAAAE5v
bmVzDwAAAGV4dHJhX2Zyb21fZGF0ZXMcAAAAZGlzcGxheV9zdW1tYXJ5X2FjY291bnRfbGluZXMM
AAAAZm9ybWF0VmFsdWVzcw0AAABvcmdhbmlzYXRpb25zcxYAAABnZXREZWZhdWx0Q29sdW1uVmFs
dWVzcxwAAABleHBhbmRCYW5rQWNjb3VudHNGb3JBY2NvdW50cxwAAABleHBhbmRUaGlyZFBhcnRp
ZXNGb3JBY2NvdW50cwYAAABhcHBlbmRzCAAAACRhcHBlbmQwcwkAAABfZ2V0aXRlcl9zBwAAAF9h
cHBseV9zAQAAAG9zCAAAAGFjY291bnRzcwYAAABmaWx0ZXJzDQAAAGdhcF9zb3J0X2Z1bmNzIwAA
AGFjY291bnRzX3RvX2V4cGFuZF9ieV90aGlyZF9wYXJ0aWVzcygAAABhY2NvdW50c190b19leHBh
bmRfYnlfdGhpcmRfcGFydGllc19kaWN0cwcAAABhY2NvdW50cyMAAABhY2NvdW50c190b19leHBh
bmRfYnlfYmFua19hY2NvdW50c3MoAAAAYWNjb3VudHNfdG9fZXhwYW5kX2J5X2JhbmtfYWNjb3Vu
dHNfZGljdHMMAAAAcmVwb3J0X2l0ZW1zcwcAAAByZXN1bHRzcxAAAAB2aXJ0dWFsX2FjY291bnRz
cwMAAABsZW5zBAAAAGl0ZW0oAAAAACgHAAAAcw0AAABvcmdhbmlzYXRpb25zcwkAAABmcm9tX2Rh
dGVzDAAAAGdldEludmVudG9yeXMQAAAAc2ltdWxhdGlvbl9zdGF0ZXMHAAAAYXRfZGF0ZXMWAAAA
Z2V0RGVmYXVsdENvbHVtblZhbHVlc3MMAAAAZm9ybWF0VmFsdWVzcw8AAABTY3JpcHQgKFB5dGhv
bilzKwAAAEFjY291bnRNb2R1bGVfZ2V0QWNjb3VudExpc3RGb3JUcmlhbEJhbGFuY2UBAAAAc5IA
AAAABQ0BCQIJAx4BDwEPAQ8BEAMkASQEGAMPAwYBHwEKAwYCCR4YARgEGB8SGRUYJgAlARICDAoQ
Ak4DNAYGAQ0ABgEgAjwDBgENAAYBIAIGAQYBDQAGASADEgEKARUCHgElBA0BJAIcAQ8BDQEaAjAC
IAESAQoBFQIeASUEDQEkAhwBDwENARoCMAIfARQBKAEsAigBAAAAcysAAABBY2NvdW50TW9kdWxl
X2dldEFjY291bnRMaXN0Rm9yVHJpYWxCYWxhbmNlKAEAAABzKwAAAEFjY291bnRNb2R1bGVfZ2V0
QWNjb3VudExpc3RGb3JUcmlhbEJhbGFuY2UoAAAAACgAAAAAcw8AAABTY3JpcHQgKFB5dGhvbilz
CAAAADxtb2R1bGU+AQAAAHMAAAAA</string> </value>
        </item>
        <item>
            <key> <string>_dav_writelocks</string> </key>
            <value>
              <persistent> <string encoding="base64">AAAAAAAAAAI=</string> </persistent>
            </value>
        </item>
        <item>
            <key> <string>_filepath</string> </key>
            <value> <string>Script (Python):/nexedi/portal_skins/erp5_accounting/AccountModule_getAccountListForTrialBalance</string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>selection, **kw</string> </value>
        </item>
        <item>
            <key> <string>errors</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>func_code</string> </key>
            <value>
              <object>
                <klass>
                  <global name="FuncCode" module="Shared.DC.Scripts.Signature"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>co_argcount</string> </key>
                        <value> <int>1</int> </value>
                    </item>
                    <item>
                        <key> <string>co_varnames</string> </key>
                        <value>
                          <tuple>
                            <string>selection</string>
                            <string>kw</string>
                            <string>DateTime</string>
                            <string>math</string>
                            <string>LOG</string>
                            <string>_getattr_</string>
                            <string>from_date</string>
                            <string>_getitem_</string>
                            <string>simulation_state</string>
                            <string>section_category</string>
                            <string>at_date</string>
                            <string>_write_</string>
                            <string>context</string>
                            <string>getInventory</string>
                            <string>getInventoryList</string>
                            <string>expand_accounts</string>
                            <string>gap_root</string>
                            <string>extra_kw</string>
                            <string>None</string>
                            <string>extra_from_date</string>
                            <string>display_summary_account_line</string>
                            <string>formatValues</string>
                            <string>organisations</string>
                            <string>getDefaultColumnValues</string>
                            <string>expandBankAccountsForAccount</string>
                            <string>expandThirdPartiesForAccount</string>
                            <string>append</string>
                            <string>$append0</string>
                            <string>_getiter_</string>
                            <string>_apply_</string>
                            <string>o</string>
                            <string>accounts</string>
                            <string>filter</string>
                            <string>gap_sort_func</string>
                            <string>accounts_to_expand_by_third_parties</string>
                            <string>accounts_to_expand_by_third_parties_dict</string>
                            <string>account</string>
                            <string>accounts_to_expand_by_bank_accounts</string>
                            <string>accounts_to_expand_by_bank_accounts_dict</string>
                            <string>report_items</string>
                            <string>results</string>
                            <string>virtual_accounts</string>
                            <string>len</string>
                            <string>item</string>
                          </tuple>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>func_defaults</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>AccountModule_getAccountListForTrialBalance</string> </value>
        </item>
        <item>
            <key> <string>warnings</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="2" aka="AAAAAAAAAAI=">
    <pickle>
      <tuple>
        <tuple>
          <string>Persistence</string>
          <string>PersistentMapping</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_container</string> </key>
            <value>
              <dictionary/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
