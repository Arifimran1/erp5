<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <tuple>
          <string>Products.PythonScripts.PythonScript</string>
          <string>PythonScript</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Python_magic</string> </key>
            <value> <string encoding="base64">O/INCg==</string> </value>
        </item>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>__ac_local_roles__</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string>src__ = False\n
if kw.has_key(\'src__\'): src__ = kw[\'src__\']\n
precision = context.Base_getPreferredPrecision()\n
r_ = lambda x: context.Base_getRoundValue(x, precision)\n
\n
# TODO: Selection override Preferences.\n
# Thanks to this, we can generate accounting reports based on generic listbox: from the ERP5 html view, no selection are set, so preferences are get as parameters to get the list of accounting lines. In case of accounting report (like AccountModule_getGeneralLedgerReportSectionList) we set the selection to pass parameters to the listbox.\n
selection_kw = {}\n
if selection != None:\n
  selection_kw = selection.getParams()\n
context.log("Selection must overide preference here for AccountModule_getGeneralLedgerReportSectionList !", repr(selection_kw))\n
\n
if selection_kw.has_key(\'is_accounting_report\'):\n
  request = context.REQUEST\n
  request.set(\'is_accounting_report\', True)\n
\n
# Read settings from user preference\n
preference       = context.getPortalObject().portal_preferences\n
simulation_state = kw.get(\'simulation_state\', preference.getPreferredAccountingTransactionSimulationStateList())\n
section_category = kw.get(\'section_category\', preference.getPreferredAccountingTransactionSectionCategory())\n
from_date        = kw.get(\'from_date\',        preference.getPreferredAccountingTransactionFromDate())\n
at_date          = kw.get(\'at_date\',          preference.getPreferredAccountingTransactionAtDate())\n
\n
# Build the common inventory dict\n
params = {}\n
\n
if kw.get(\'no_from_date\', False): from_date = None\n
\n
if simulation_state: params[\'simulation_state\'] = simulation_state\n
if section_category: params[\'section_category\'] = section_category\n
\n
# Get payment and mirror related parameters\n
MARKER = []\n
no_payment_uid        = kw.get(\'no_payment_uid\',        MARKER)\n
payment_uid           = kw.get(\'payment_uid\',           MARKER)\n
no_mirror_section_uid = kw.get(\'no_mirror_section_uid\', MARKER)\n
mirror_section_uid    = kw.get(\'mirror_section_uid\',    MARKER)\n
# Try alternate method to get payment_uid\n
if no_payment_uid is MARKER: no_payment_uid = kw.get(\'no_source_uid\', MARKER)\n
if payment_uid    is MARKER: payment_uid    = kw.get(\'source_uid\',    MARKER)\n
# Save results in the dict\n
if no_payment_uid        is not MARKER: params[\'no_payment_uid\']        = True\n
if payment_uid           is not MARKER: params[\'payment_uid\']           = payment_uid\n
if no_mirror_section_uid is not MARKER: params[\'no_mirror_section_uid\'] = True\n
if mirror_section_uid    is not MARKER: params[\'mirror_section_uid\']    = mirror_section_uid\n
\n
# Get node_uid parameters\n
params[\'node_uid\'] = kw.get(\'node_uid\', context.getUid())\n
\n
# Create the related accouting line list\n
new_result  = []\n
net_balance = 0.0\n
\n
# Create a new parameter list to get the previous balance\n
get_inventory_kw = params.copy()\n
get_inventory_kw.update({ \'omit_simulation\' : True\n
                        , \'to_date\'         : from_date\n
                        , \'where_expression\': " section.portal_type = \'Organisation\' "\n
                        , \'stat\'            : True\n
                        })\n
\n
# Get previous debit and credit\n
getInventoryAssetPrice = context.getPortalObject().portal_simulation.getInventoryAssetPrice\n
previous_total_debit  = getInventoryAssetPrice(omit_output=True, **get_inventory_kw)\n
previous_total_credit = getInventoryAssetPrice(omit_input =True, **get_inventory_kw)\n
\n
if previous_total_credit != 0:\n
  previous_total_credit = - previous_total_credit\n
\n
# Show the previous balance if not empty\n
if previous_total_credit != 0 or previous_total_debit != 0:\n
  from Products.ERP5Type.Document import newTempAccountingTransaction\n
\n
  net_balance = r_(previous_total_debit - previous_total_credit)\n
  previous_balance = newTempAccountingTransaction( context.getPortalObject()\n
                                                 , "temp_%s" % context.getUid()\n
                                                 )\n
  previous_balance.setUid(\'new_000\')\n
\n
  previous_balance.edit( \\\n
      title                  = context.Base_translateString("Previous Balance")\n
    , date                   = from_date - 1\n
    , portal_type            = ""\n
    , simulation_state_title = ""\n
    , debit                  = previous_total_debit\n
    , credit                 = previous_total_credit\n
    , balance                = net_balance\n
    , net_balance            = net_balance\n
    , is_previous_balance    = True\n
    )\n
  new_result.append(previous_balance)\n
\n
# FIXME:\n
# using listbox current page number * number of line per listbox page, you can call a\n
# ZSQL Method to initialize net_balance and calculate this only for this page.\n
#\n
# But this is just temporary because some day, erp5_accounting will be rewritten using\n
# only portal_catalog and getInventory. The Iventory API should provide a way to implement\n
# such a net_balance column (in one instruction, so that we do not need to write a wrapping\n
# list method like this one)\n
result = context.Account_zGetAccountingTransactionList( from_date = from_date\n
                                                      , at_date   = at_date\n
                                                      , src__     = src__\n
                                                      , **params\n
                                                      )\n
if src__:\n
  return result\n
\n
# Add related accounting lines one by one in order to calculate intermediate balance\n
for l in result:\n
  o = l.getObject()\n
  net_balance += l.balance or 0.0\n
  if o is not None:\n
    c = o.asContext( net_balance        = net_balance\n
                   , balance            = l.balance\n
                   , credit             = l.credit\n
                   , debit              = l.debit\n
                   , date               = l.date\n
                   , specific_reference = l.specific_reference\n
                   , current_transaction_line_path = l.current_transaction_line_path\n
                   , third_party                   = l.third_party\n
                   , payment                       = l.payment_uid\n
                   )\n
    new_result.append(c)\n
\n
return new_result\n
</string> </value>
        </item>
        <item>
            <key> <string>_code</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_dav_writelocks</string> </key>
            <value>
              <persistent> <string encoding="base64">AAAAAAAAAAI=</string> </persistent>
            </value>
        </item>
        <item>
            <key> <string>_filepath</string> </key>
            <value> <string>Script (Python):/nexedi/portal_skins/erp5_accounting/Account_getAccountingTransactionList</string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>**kw</string> </value>
        </item>
        <item>
            <key> <string>errors</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>func_code</string> </key>
            <value>
              <object>
                <klass>
                  <global name="FuncCode" module="Shared.DC.Scripts.Signature"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>co_argcount</string> </key>
                        <value> <int>0</int> </value>
                    </item>
                    <item>
                        <key> <string>co_varnames</string> </key>
                        <value>
                          <tuple>
                            <string>kw</string>
                            <string>False</string>
                            <string>src__</string>
                            <string>_getattr_</string>
                            <string>_getitem_</string>
                            <string>context</string>
                            <string>precision</string>
                            <string>r_</string>
                            <string>selection_kw</string>
                            <string>selection</string>
                            <string>None</string>
                            <string>repr</string>
                            <string>request</string>
                            <string>True</string>
                            <string>preference</string>
                            <string>simulation_state</string>
                            <string>section_category</string>
                            <string>from_date</string>
                            <string>at_date</string>
                            <string>params</string>
                            <string>_write_</string>
                            <string>MARKER</string>
                            <string>no_payment_uid</string>
                            <string>payment_uid</string>
                            <string>no_mirror_section_uid</string>
                            <string>mirror_section_uid</string>
                            <string>new_result</string>
                            <string>net_balance</string>
                            <string>get_inventory_kw</string>
                            <string>getInventoryAssetPrice</string>
                            <string>_apply_</string>
                            <string>previous_total_debit</string>
                            <string>previous_total_credit</string>
                            <string>Products.ERP5Type.Document</string>
                            <string>newTempAccountingTransaction</string>
                            <string>previous_balance</string>
                            <string>result</string>
                            <string>_getiter_</string>
                            <string>l</string>
                            <string>o</string>
                            <string>c</string>
                          </tuple>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>func_defaults</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>Account_getAccountingTransactionList</string> </value>
        </item>
        <item>
            <key> <string>warnings</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="2" aka="AAAAAAAAAAI=">
    <pickle>
      <tuple>
        <tuple>
          <string>Persistence</string>
          <string>PersistentMapping</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_container</string> </key>
            <value>
              <dictionary/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
