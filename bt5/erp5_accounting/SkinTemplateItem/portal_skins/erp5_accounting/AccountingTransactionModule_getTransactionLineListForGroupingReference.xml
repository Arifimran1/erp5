<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

from Products.ZSQLCatalog.SQLCatalog import Query, NegatedQuery, ComplexQuery\n
\n
request = container.REQUEST\n
portal = context.getPortalObject()\n
ctool = portal.portal_catalog\n
stool = portal.portal_simulation\n
\n
# we use a different selection for dialog params, because we never want this\n
# selection to be reseteted\n
dialog_selection_params = portal.portal_selections.getSelectionParamsFor(\n
                               \'grouping_reference_fast_input_selection\')\n
\n
# support pseudo sorting; sorting is done by uid.\n
orig_sort_on = portal.portal_selections.getSelectionSortOrder(\n
                 \'accounting_transaction_module_grouping_reference_fast_input\') or ((\'date\', \'ascending\'),)\n
sort_on = []\n
for sort_column, sort_order in orig_sort_on:\n
  if sort_column in (\'grouping_reference\', \'date\', \'parent_title\'):\n
    sort_on += [(sort_column, sort_order)]\n
  elif sort_column == \'node_title\':\n
    sort_on += [(\'stock.node_uid\', sort_order)]\n
  elif sort_column == \'Movement_getMirrorSectionTitle\':\n
    sort_on += [(\'stock.mirror_section_uid\', sort_order)]\n
\n
extra_query_keys = {}\n
section_uid = portal.Base_getSectionUidListForSectionCategory(\n
     portal.portal_preferences.getPreferredAccountingTransactionSectionCategory(),\n
     strict_membership=portal.portal_preferences.getPreferredAccountingSectionCategoryStrict())\n
\n
grouping = dialog_selection_params.get(\'grouping\', \'grouping\')\n
\n
search_kw = dict(portal_type=portal.getPortalAccountingMovementTypeList())\n
node = node or request.get(\'node\') or dialog_selection_params.get(\'node\')\n
if node:\n
  search_kw[\'node_uid\'] = portal.restrictedTraverse(node).getUid()\n
mirror_section = mirror_section or request.get(\'mirror_section\')\n
if mirror_section:\n
  search_kw[\'mirror_section_uid\'] = portal.restrictedTraverse(\n
                                          mirror_section).getUid()\n
\n
if grouping == \'grouping\':\n
  search_kw[\'grouping_reference\'] = None\n
else:\n
  assert grouping == \'ungrouping\', grouping\n
  search_kw[\'grouping_reference\'] = NegatedQuery(Query(grouping_reference=None))\n
\n
if title:\n
  search_kw[\'title_query\'] = ComplexQuery(Query(title=title),\n
                                          Query(parent_title=title),\n
                                          operator=\'OR\')\n
if delivery_reference:\n
  search_kw[\'parent_reference\'] = delivery_reference\n
if debit_price:\n
  search_kw[\'stock.total_price\'] = debit_price\n
if credit_price:\n
  try:\n
    search_kw[\'stock.total_price\'] = - float(credit_price[\'query\'])\n
  except ValueError, e:\n
    # happens when user entered a complex query (like "> 100 AND < 200")\n
    # in that case, there is not much we can do.\n
    search_kw[\'stock.total_price\'] = credit_price[\'query\']\n
if date:\n
  search_kw[\'stock.date\'] = date\n
\n
\n
return stool.getMovementHistoryList(\n
                          section_uid=section_uid,\n
                          simulation_state=[\'stopped\', \'delivered\'],\n
                          sort_on=sort_on,\n
                          **search_kw)\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>selection=None, grouping=\'grouping\', node=\'\', mirror_section=\'\', title=None, delivery_reference=None, debit_price=None, credit_price=None, date=None, **kw</string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>AccountingTransactionModule_getTransactionLineListForGroupingReference</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
