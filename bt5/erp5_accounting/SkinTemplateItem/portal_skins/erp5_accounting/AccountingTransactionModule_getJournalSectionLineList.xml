<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string>from Products.ZSQLCatalog.SQLCatalog import Query\n
from Products.PythonScripts.standard import Object\n
request = container.REQUEST\n
portal = context.getPortalObject()\n
\n
line_list = []\n
\n
extra_kw = dict()\n
if payment:\n
  extra_kw[\'payment\'] = payment\n
\n
if group_by:\n
  extra_kw[\'group_by\'] = group_by\n
  extra_kw[\'ignore_group_by\'] = True\n
\n
if project_uid:\n
  if project_uid == \'None\':\n
    extra_kw[\'project_uid\'] = Query(project_uid=None)\n
  else:\n
    extra_kw[\'project_uid\'] = project_uid\n
\n
account_title_cache = dict()\n
def getAccountId(node_relative_url):\n
  if node_relative_url not in account_title_cache:\n
    title = portal.restrictedTraverse(node_relative_url).Account_getGapId(gap_root=gap_root)\n
    account_title_cache[node_relative_url] = title\n
  return account_title_cache[node_relative_url]\n
\n
\n
# FIXME: this can be passed as node category to getMovementHistoryList\n
account_in_gap_root_cache = dict()\n
def isAccountInGapRoot(node_relative_url):\n
  if node_relative_url not in account_in_gap_root_cache:\n
    is_in = portal.restrictedTraverse(node_relative_url).isMemberOf(gap_root)\n
    account_in_gap_root_cache[node_relative_url] = is_in\n
  return account_in_gap_root_cache[node_relative_url]\n
\n
\n
displayed_transaction = dict()\n
total_credit = 0\n
total_debit = 0\n
\n
for brain in portal.portal_simulation.getMovementHistoryList(\n
                                from_date=from_date,\n
                                at_date=at_date,\n
                                section_uid=section_uid,\n
                                portal_type=portal.getPortalAccountingMovementTypeList(),\n
      # note that we pass both portal_type and parent_portal_type because some transactions\n
      # may contain some non accounting lines that are in stock table (eg. Pay Sheet Lines)\n
                                parent_portal_type=portal_type,\n
                                simulation_state=simulation_state,\n
                                sort_on=((\'stock.date\', \'ASC\'),\n
# FIXME: this should actually be sorted on parent_delivery_specific_reference\n
# a related key which does not exists, and would anyway not be efficient with\n
# current tables\n
                                         (\'parent_uid\', \'descending\'),\n
                                         (\'stock.total_price\', \'descending\')),\n
                                **extra_kw):\n
  if gap_root and not isAccountInGapRoot(brain.node_relative_url):\n
    continue\n
\n
  debit = max(brain.total_price, 0) or 0\n
  credit = max(-(brain.total_price or 0), 0) or 0\n
 \n
  mvt = brain.getObject()\n
  if payment_mode and not \\\n
        mvt.getPaymentMode(\'\').startswith(payment_mode):\n
    continue\n
  \n
  total_debit += debit\n
  total_credit += credit\n
  \n
  transaction = mvt.getParentValue()\n
  is_source = 0\n
  if transaction.getSourceSection():\n
    is_source = brain.section_relative_url.startswith(\n
                  transaction.getSourceSection())\n
  \n
  if is_source:\n
    mirror_section_title = mvt.getDestinationSectionTitle()\n
  else:\n
    mirror_section_title = mvt.getSourceSectionTitle()\n
\n
  if transaction.getUid() not in displayed_transaction:\n
    displayed_transaction[transaction.getUid()] = 1\n
    if is_source:\n
      specific_reference = transaction.getSourceReference()\n
    else:\n
      specific_reference = transaction.getDestinationReference()\n
    displayed_transaction[transaction.getUid()] = 1\n
    transaction_reference = transaction.getReference()\n
    title = mvt.hasTitle() and mvt.getTitle() or transaction.getTitle()\n
    date = brain.date\n
  else:\n
    specific_reference = \'\'\n
    transaction_reference = \'\'\n
    title = mvt.hasTitle() and mvt.getTitle() or \'\'\n
    date = None\n
\n
  line = Object(uid=\'new_\',\n
                title=title,\n
                portal_type=transaction.getTranslatedPortalType(),\n
                specific_reference=specific_reference,\n
                parent_reference=transaction_reference,\n
                mirror_section_title=mirror_section_title,\n
                node_title=getAccountId(brain.node_relative_url),\n
                date=date,\n
                debit=debit,\n
                credit=credit,)\n
  analytic_info = dict()\n
  for analytic_column, analytic_column_title in analytic_column_list:\n
    if analytic_column == \'project\':\n
      analytic_info[\'project\'] = brain.Movement_getProjectTitle()\n
    elif analytic_column == \'function\':\n
      analytic_info[\'function\'] = brain.Movement_getFunctionTitle()\n
    else:\n
      analytic_info[analytic_column] = mvt.getProperty(analytic_column)\n
\n
  line.update(analytic_info)\n
  line_list.append(line)\n
\n
request.set(\n
      \'AccountingTransactionModule_getJournalSectionLineList.total_debit\',\n
       total_debit)\n
request.set(\n
      \'AccountingTransactionModule_getJournalSectionLineList.total_credit\',\n
       total_credit)\n
\n
return line_list\n
</string> </value>
        </item>
        <item>
            <key> <string>_code</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>selection, at_date, from_date, portal_type, simulation_state, section_uid, payment_mode=None, payment=None, gap_root=None, group_by=None, analytic_column_list=[], project_uid=None, **kw</string> </value>
        </item>
        <item>
            <key> <string>errors</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>AccountingTransactionModule_getJournalSectionLineList</string> </value>
        </item>
        <item>
            <key> <string>warnings</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
