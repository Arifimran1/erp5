<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <tuple>
          <string>Products.PythonScripts.PythonScript</string>
          <string>PythonScript</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Python_magic</string> </key>
            <value> <string encoding="base64">O/INCg==</string> </value>
        </item>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>__ac_local_roles__</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

"""\n
Journal entries, for use with AccountingTransactionModule_viewJournal\n
\n
return a list of dictionnaries like that : \n
  \n
{\n
  \'date\' : Date\n
  \'description\' : String\n
  \'currency\' : String\n
  \'lines\' : {\n
     \'debtor\' : Bool, \n
     \'account_gap_id\' : String\n
     \'account_name\' : String # with extra-description (ie. bank name if a bank, organisation name if an other party)\n
     \'amount\' : Float\n
     }\n
}\n
"""\n
\n
request = context.REQUEST\n
at_date = request[\'at_date\']\n
transaction_section_category = request[\'transaction_section_category\']\n
transaction_simulation_state = request[\'transaction_simulation_state\']\n
transaction_portal_type = request[\'transaction_portal_type\']\n
from_date = request.get(\'from_date\', None)\n
\n
N_ = context.Base_TranslateString\n
\n
params = {\n
  \'sort_on\' : \'delivery.start_date\',\n
  \'at_date\' : at_date,\n
  \'simulation_state\': transaction_simulation_state,\n
  \'section_category\' : transaction_section_category,\n
  \'portal_type\': transaction_portal_type,\n
}\n
if from_date:\n
  params[\'from_date\'] = from_date\n
\n
result=[]\n
journal_total_debit = 0\n
journal_total_credit = 0\n
for transaction in context\\\n
        .AccountingTransactionModule_zGetAccountingTransactionList(\n
        selection_params = params, selection=None, **params):\n
    transaction = transaction.getObject()\n
    lines = []\n
    transaction_dict={ \'date\'        : context.Base_FormatDate(transaction.getStartDate()),\n
                       \'description\' : N_("${transaction_title} (Transaction Reference = ${transaction_source_reference},\\n Creation Date = ${creation_date} \\n Currency = ${currency_title})" ,\n
           mapping = { "transaction_title": unicode(transaction.getTitle() or \'\', \'utf8\'),\n
                       "transaction_source_reference": unicode(transaction.getSourceReference() or \'\', \'utf8\'),\n
                       "creation_date" : context.Base_FormatDate(transaction.getCreationDate()),\n
                       "currency_title" : transaction.getResourceTitle() or \'\'}),\n
                       \'lines\'       : lines, }\n
    \n
    result.append(transaction_dict)\n
    transaction_lines = transaction.contentValues(\n
      filter = {\'portal_type\' : context.getPortalAccountingMovementTypeList()})\n
\n
    transaction_lines.sort(lambda x,y: cmp(y.getObject().getSourceDebit(),\n
                                           x.getObject().getSourceDebit()))\n
    for line in transaction_lines :\n
       line = line.getObject()\n
       debtor = (line.getSourceDebit() > line.getSourceCredit())\n
       account = line.getSourceValue()\n
       if account is None: continue\n
       if account.isMemberOf( \'account_type/asset/cash\' ) :\n
          account_description = "%s (%s)"%(\n
                                      line.getSourceTitle(),\n
                                      line.getSourcePaymentTitle())\n
       elif account.getAccountType() in (\n
                                    \'asset/receivable\',\n
                                    \'liability/payable\'):\n
          account_description = "%s (%s)"%(\n
                                      line.getSourceTitle(),\n
                                      line.getDestinationSectionTitle())\n
       else :\n
          account_description = line.getSourceTitle()\n
       lines.append({\n
          \'debtor\' : debtor,\n
          \'account_gap_id\' : account.Account_getGapId(),\n
          \'account_name\' : account_description,\n
          \'amount\' : debtor  and (line.getSourceDebit() \\\n
                                    - line.getSourceCredit()) \\\n
                              or (line.getSourceCredit() \\\n
                                    - line.getSourceDebit())\n
          })\n
       if debtor :\n
         journal_total_debit += line.getSourceDebit()\n
       else:\n
         journal_total_credit += line.getSourceCredit()\n
       \n
       # internal mouvements, ie when we are destination and source\n
       # FIXME: here we should check only if we are destination.\n
       if line.getDestinationSection() == line.getSourceSection() :\n
         debtor = (line.getDestinationDebit() > line.getDestinationCredit())\n
         account = line.getDestinationValue()\n
         if account is None : continue\n
         if account.isMemberOf( \'account_type/asset/cash\' ) :\n
            account_description = "%s (%s)"%(\n
                                      line.getDestinationTitle(),\n
                                      line.getDestinationPaymentTitle())\n
         elif account.getAccountType() in (\n
                                  \'asset/receivable\',\n
                                  \'liability/payable\'):\n
            account_description = "%s (%s)"%(\n
                                      line.getDestinationTitle(),\n
                                      line.getSourceSectionTitle())\n
         else :\n
            account_description = line.getDestinationTitle()\n
         lines.append({\n
            \'debtor\' : debtor,\n
            \'account_gap_id\' : account.Account_getGapId(),\n
            \'account_name\' : account_description,\n
            \'amount\' : debtor  and (line.getDestinationDebit() \\\n
                                        - line.getDestinationCredit()) \\\n
                                or (line.getDestinationCredit() \\\n
                                        - line.getDestinationDebit())\n
            })\n
         if debtor :\n
           journal_total_debit += line.getSourceDebit()\n
         else:\n
           journal_total_credit += line.getSourceCredit()\n
         \n
return result + [{ "journal_total_debit": journal_total_debit,\n
                   "journal_total_credit": journal_total_credit }]\n
# vim: syntax=python\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_code</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_dav_writelocks</string> </key>
            <value>
              <persistent> <string encoding="base64">AAAAAAAAAAI=</string> </persistent>
            </value>
        </item>
        <item>
            <key> <string>_filepath</string> </key>
            <value> <string>Script (Python):/nexedi/portal_skins/erp5_accounting/AccountingTransactionModule_getJournalAccountingTransactionList</string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>errors</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>func_code</string> </key>
            <value>
              <object>
                <klass>
                  <global name="FuncCode" module="Shared.DC.Scripts.Signature"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>co_argcount</string> </key>
                        <value> <int>0</int> </value>
                    </item>
                    <item>
                        <key> <string>co_varnames</string> </key>
                        <value>
                          <tuple>
                            <string>_getattr_</string>
                            <string>context</string>
                            <string>request</string>
                            <string>_getitem_</string>
                            <string>at_date</string>
                            <string>transaction_section_category</string>
                            <string>transaction_simulation_state</string>
                            <string>transaction_portal_type</string>
                            <string>None</string>
                            <string>from_date</string>
                            <string>N_</string>
                            <string>params</string>
                            <string>_write_</string>
                            <string>result</string>
                            <string>journal_total_debit</string>
                            <string>journal_total_credit</string>
                            <string>_getiter_</string>
                            <string>_apply_</string>
                            <string>transaction</string>
                            <string>lines</string>
                            <string>unicode</string>
                            <string>transaction_dict</string>
                            <string>transaction_lines</string>
                            <string>line</string>
                            <string>debtor</string>
                            <string>account</string>
                            <string>account_description</string>
                          </tuple>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>func_defaults</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>AccountingTransactionModule_getJournalAccountingTransactionList</string> </value>
        </item>
        <item>
            <key> <string>warnings</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="2" aka="AAAAAAAAAAI=">
    <pickle>
      <tuple>
        <tuple>
          <string>Persistence</string>
          <string>PersistentMapping</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_container</string> </key>
            <value>
              <dictionary/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
