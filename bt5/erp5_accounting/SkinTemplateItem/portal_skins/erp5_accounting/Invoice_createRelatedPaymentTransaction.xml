<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <tuple>
          <string>Products.PythonScripts.PythonScript</string>
          <string>PythonScript</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Python_magic</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>__ac_local_roles__</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string>"""Create a related payment transaction, using the account `node`, the payment\n
`payment`, and setting the payment mode `payment_mode`. An optional `date` can\n
be provided, but by default the transaction is created at the system date.\n
"""\n
from DateTime import DateTime\n
# translate with Base_translateString which is a bit more robust during\n
# activities, because it doesn\'t rely on REQUEST[\'PARENTS\']\n
N_ = context.Base_translateString\n
\n
date = DateTime()\n
portal = context.getPortalObject()\n
payment_dict = {}\n
is_source = context.AccountingTransaction_isSourceView()\n
line_portal_type = \'Accounting Transaction Line\'\n
\n
# update selection params, because it\'ll be used in the selection dialog.\n
portal.portal_selections.setSelectionParamsFor(\n
          \'accounting_create_related_payment_selection\',\n
          params=dict(node_for_related_payment=node,\n
                      payment_mode_for_related_payment=payment_mode,\n
                      payment_for_related_payment=payment))\n
\n
related_payment = portal.accounting_module.newContent(\n
  portal_type="Payment Transaction",\n
  title = str(N_("Payment of ${invoice_title}",\n
          mapping=dict(invoice_title=unicode((context.getReference() or\n
                                              context.getTitle() or \'\'),\n
                                              \'utf8\', \'repr\')))),\n
  source_section=context.getSourceSection(),\n
  destination_section=context.getDestinationSection(),\n
  stop_date=date,\n
  start_date=date,\n
  resource=context.getResource(),\n
  causality_value=context,\n
  created_by_builder=1, # XXX this prevent init script from creating lines.\n
  payment_mode=payment_mode,\n
)\n
if is_source:\n
  related_payment.edit(destination_payment=context.getDestinationPayment(),\n
                        source_payment=payment)\n
else:\n
  related_payment.edit(destination_payment=payment,\n
              source_payment=context.getSourcePayment())\n
\n
\n
bank = related_payment.newContent(\n
   portal_type=line_portal_type,\n
   id=\'bank\',\n
)\n
\n
# Calculate the payable/receivable quantity, for this we sum all lines\n
# using a payable or receivable type account in this invoice ( unless this\n
# line have a "grouping reference") minus the sum of payable/receivable line on\n
# all causality related accounting transactions\n
bank_quantity = 0\n
receivable_or_payable_quantity_per_account = {}\n
for line in context.getMovementList(\n
            portal_type=portal.getPortalAccountingMovementTypeList()):\n
  if is_source:\n
    account = line.getSourceValue(portal_type=\'Account\')\n
    mirror_account = line.getDestinationValue(portal_type=\'Account\')\n
  else:\n
    account = line.getDestinationValue(portal_type=\'Account\')\n
    mirror_account = line.getSourceValue(portal_type=\'Account\')\n
  \n
  key = (account, mirror_account)\n
  if account is not None and \\\n
      account.getAccountTypeId() in (\'payable\', \'receivable\') and \\\n
      line.getSourceSection() == context.getSourceSection() and \\\n
      line.getDestinationSection() == context.getDestinationSection() and \\\n
      not line.getGroupingReference():\n
    receivable_or_payable_quantity_per_account[key] = \\\n
            receivable_or_payable_quantity_per_account.get(key, 0) \\\n
                            - line.getQuantity()\n
    bank_quantity += line.getQuantity()\n
\n
for related_transaction in context.getCausalityRelatedValueList(\n
      portal_type=context.getPortalAccountingTransactionTypeList()):\n
  if related_transaction.getSimulationState() in (\n
              \'draft\', \'cancelled\', \'deleted\'):\n
    continue\n
  related_transaction_is_source = related_transaction.\\\n
                                        AccountingTransaction_isSourceView()\n
  for line in related_transaction.getMovementList(\n
            portal_type=portal.getPortalAccountingMovementTypeList()):\n
    if related_transaction_is_source:\n
      account = line.getSourceValue(portal_type=\'Account\')\n
      mirror_account = line.getDestinationValue(portal_type=\'Account\')\n
    else:\n
      account = line.getDestinationValue(portal_type=\'Account\')\n
      mirror_account = line.getSourceValue(portal_type=\'Account\')\n
  \n
    key = (account, mirror_account)\n
    if account is not None and \\\n
        account.getAccountTypeId() in (\'payable\', \'receivable\'):\n
      if line.getSourceSection() == context.getSourceSection() and \\\n
         line.getDestinationSection() == context.getDestinationSection() and \\\n
         not line.getGroupingReference():\n
        receivable_or_payable_quantity_per_account[key] = \\\n
            receivable_or_payable_quantity_per_account.get(key, 0) \\\n
                       - line.getQuantity()\n
        bank_quantity += line.getQuantity()\n
      elif line.getSourceSection() == context.getDestinationSection() and \\\n
           line.getDestinationSection() == context.getSourceSection() and \\\n
           not line.getGroupingReference():\n
        receivable_or_payable_quantity_per_account[key] = \\\n
            receivable_or_payable_quantity_per_account.get(key, 0) \\\n
                       + line.getQuantity()\n
        bank_quantity -= line.getQuantity()\n
\n
# now create lines using the dictionnary\n
for (account, mirror_account), quantity in\\\n
        receivable_or_payable_quantity_per_account.items():\n
  if is_source:\n
    related_payment.newContent(\n
      portal_type=line_portal_type,\n
      source_value=account,\n
      destination_value=mirror_account,\n
      quantity=quantity)\n
  else:\n
    related_payment.newContent(\n
      portal_type=line_portal_type,\n
      source_value=mirror_account,\n
      destination_value=account,\n
      quantity=-quantity)\n
\n
\n
if is_source:\n
  bank.edit( source=node,\n
             quantity=bank_quantity )\n
else:\n
  bank.edit( destination=node,\n
             quantity=bank_quantity )\n
\n
if not batch_mode:\n
  return context.REQUEST.RESPONSE.redirect(\n
    "%s/view?portal_status_message=%s" % (\n
        related_payment.absolute_url(), N_(\'Related Payment Created\')))\n
else:\n
  return related_payment\n
</string> </value>
        </item>
        <item>
            <key> <string>_code</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_filepath</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>node, payment_mode, payment, date=None, batch_mode=0</string> </value>
        </item>
        <item>
            <key> <string>errors</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>func_code</string> </key>
            <value>
              <object>
                <klass>
                  <global name="FuncCode" module="Shared.DC.Scripts.Signature"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>co_argcount</string> </key>
                        <value> <int>5</int> </value>
                    </item>
                    <item>
                        <key> <string>co_varnames</string> </key>
                        <value>
                          <tuple>
                            <string>node</string>
                            <string>payment_mode</string>
                            <string>payment</string>
                            <string>date</string>
                            <string>batch_mode</string>
                            <string>DateTime</string>
                            <string>_getattr_</string>
                            <string>context</string>
                            <string>N_</string>
                            <string>portal</string>
                            <string>payment_dict</string>
                            <string>is_source</string>
                            <string>line_portal_type</string>
                            <string>dict</string>
                            <string>str</string>
                            <string>unicode</string>
                            <string>related_payment</string>
                            <string>bank</string>
                            <string>bank_quantity</string>
                            <string>receivable_or_payable_quantity_per_account</string>
                            <string>_getiter_</string>
                            <string>line</string>
                            <string>account</string>
                            <string>mirror_account</string>
                            <string>key</string>
                            <string>None</string>
                            <string>_write_</string>
                            <string>related_transaction</string>
                            <string>related_transaction_is_source</string>
                            <string>quantity</string>
                          </tuple>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>func_defaults</string> </key>
            <value>
              <tuple>
                <none/>
                <int>0</int>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>Invoice_createRelatedPaymentTransaction</string> </value>
        </item>
        <item>
            <key> <string>warnings</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
