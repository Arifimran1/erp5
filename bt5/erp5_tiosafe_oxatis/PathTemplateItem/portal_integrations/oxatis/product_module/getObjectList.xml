<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="Python Script" module="erp5.portal_type"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string># try type of id\n
if id:\n
  try:\n
    long(id)\n
  except ValueError:\n
    raise KeyError, "Item %s does not exists call by Python Script %s : not a long" % (id,\n
                                                                                               context.getTitle(),)\n
\n
product_list = context.getProductList(*args, **kw)\n
\n
product_dict = {}\n
variation_list = []\n
\n
# First build list of product which are not variation\n
for product in product_list:\n
  if id:\n
    if product.getId() == id:\n
      product_dict[product.getId()] = product\n
    elif getattr(product, "parent_id", None) == id:\n
      variation_list.append(product)\n
  else:\n
    if not getattr(product, "parent_id", None):\n
      product_dict[product.getId()] = product\n
    else:\n
      variation_list.append(product)\n
\n
variation_dict = {}\n
for variation in variation_list:\n
  parent_product_id = variation.parent_id\n
  product = product_dict[parent_product_id]\n
  if getattr(product, \'category\', None) is None:\n
    setattr(product, \'category\', [])\n
  # get options and their values\n
  product_category_combination = []\n
  for x in xrange(1, 4):\n
    base_category_id = getattr(variation, "base_category_id_%s" %(x), None)\n
    if base_category_id and int(base_category_id) != 0:\n
      context.log("trying to retrieve base category %s" %(base_category_id,))\n
      base_category = context.getBaseCategoryFromId(id=base_category_id)[0].id\n
      category_id = getattr(variation, "category_id_%s" %(x))\n
      category = context.getCategoryFromId(id=category_id)[0].id\n
      try:\n
        category = context.getParentValue().getCategoryFromMapping(\n
        category="%s/%s" %(base_category, category), create_mapping=True\n
        )\n
      except ValueError:\n
        context.log("impossible to get mapping for %s/%s" %(base_category, category))\n
        if id:\n
          return None\n
        else:\n
          return []\n
      if category not in product.category:\n
        product.category.append(category)\n
      product_category_combination.append(category)\n
  if len(product_category_combination):\n
    product_category_combination.sort()\n
    product.mapping_property_list.append({\'reference\' : getattr(variation, \'reference\'),\n
                                          \'category_list\' : product_category_combination,})\n
\n
if len(product_dict) == 0:\n
  return None\n
if id and len(product_dict):\n
 return product_dict.values()[0]\n
else:\n
  return product_dict.values()\n
</string> </value>
        </item>
        <item>
            <key> <string>_local_properties</string> </key>
            <value>
              <tuple>
                <dictionary>
                  <item>
                      <key> <string>id</string> </key>
                      <value> <string>comment</string> </value>
                  </item>
                  <item>
                      <key> <string>type</string> </key>
                      <value> <string>string</string> </value>
                  </item>
                </dictionary>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>id=None, *args, **kw</string> </value>
        </item>
        <item>
            <key> <string>comment</string> </key>
            <value> <string>Group products to get variation in just one product instead of one product per variation</string> </value>
        </item>
        <item>
            <key> <string>description</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>getObjectList</string> </value>
        </item>
        <item>
            <key> <string>portal_type</string> </key>
            <value> <string>Python Script</string> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>Return list of products</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
