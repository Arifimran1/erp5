<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <tuple>
        <tuple>
          <string>Products.PythonScripts.PythonScript</string>
          <string>PythonScript</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Python_magic</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>__ac_local_roles__</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string>from Products.ERP5Form.Report import ReportSection\n
N_ = context.Base_translateString\n
section_category = context.REQUEST[\'section_category\']\n
at_date = context.REQUEST[\'at_date\']\n
from_date = context.REQUEST.get(\'from_date\')\n
context.REQUEST.other[\n
    \'AccountingTransactionModule_viewGeneralJournalReportSection\'\n
    \'/listbox/ListBox_getColumnWithDict\'] = {\n
          \'delivery_portal_type\': 7,\n
          \'credit\': 3,\n
          \'debit\': 3,\n
          \'debit_balance\': 3,\n
          \'credit_balance\': 3, }\n
precision = 2\n
\n
account_journal_dict = {}\n
\n
for delivery_portal_type in context.getPortalAccountingTransactionTypeList():\n
  delivery_translated_portal_type = N_(delivery_portal_type)\n
\n
  for inventory in context.portal_simulation.getInventoryList(\n
                       node_category=[\'account_type\'],\n
                       section_category=section_category,\n
                       parent_portal_type=delivery_portal_type,\n
                       simulation_state=[\'delivered\'],\n
                       precision=precision,\n
                       omit_output=1,\n
                       from_date=from_date, at_date=at_date,\n
                       group_by_node=1):\n
    journal_dict = account_journal_dict.setdefault(\n
                          inventory[\'node_relative_url\'], {})\n
    account_props = journal_dict.setdefault(delivery_translated_portal_type,\n
                                            dict(debit=0, credit=0))\n
    account_props[\'node_title\'] = inventory[\'node_title\']\n
    account_props[\'debit\'] = inventory[\'total_price\']\n
\n
  for inventory in context.portal_simulation.getInventoryList(\n
                       node_category=[\'account_type\'],\n
                       section_category=section_category,\n
                       parent_portal_type=delivery_portal_type,\n
                       simulation_state=[\'delivered\'],\n
                       precision=precision,\n
                       omit_input=1,\n
                       from_date=from_date, at_date=at_date,\n
                       group_by_node=1):\n
    journal_dict = account_journal_dict.setdefault(\n
                          inventory[\'node_relative_url\'], {})\n
    account_props = journal_dict.setdefault(delivery_translated_portal_type,\n
                                            dict(debit=0, credit=0))\n
    account_props[\'node_title\'] = inventory[\'node_title\']\n
    account_props[\'credit\'] = -inventory[\'total_price\']\n
\n
from Products.PythonScripts.standard import Object\n
report_section_list = []\n
\n
getInventory = context.portal_simulation.getInventoryAssetPrice\n
restrictedTraverse = context.getPortalObject().restrictedTraverse\n
initial_balance_msg = N_(\'Initial Balance\')\n
total_msg = N_(\'Total\')\n
journal_list = [N_(journal) for journal in\n
                context.getPortalAccountingTransactionTypeList()]\n
journal_list.sort()\n
\n
total_debit_per_journal = {}\n
total_credit_per_journal = {}\n
for journal in journal_list:\n
  total_debit_per_journal[journal] = 0\n
  total_credit_per_journal[journal] = 0\n
\n
def account_comparator(a, b):\n
  try:\n
    a_index = a.split(\'/\')[-1].ljust(7, \'0\')\n
    b_index = b.split(\'/\')[-1].ljust(7, \'0\')\n
    return cmp(int(a_index), int(b_index))\n
  except ValueError:\n
    return 0\n
\n
account_keys = account_journal_dict.keys()\n
account_keys.sort(account_comparator)\n
\n
# All accounts\n
for url in account_keys:\n
  account_data = account_journal_dict[url]\n
  account_obj = restrictedTraverse(url)\n
  total_debit = getInventory(node_uid=account_obj.getUid(),\n
                               section_category=section_category,\n
                               simulation_state=[\'delivered\'],\n
                               precision=precision,\n
                               omit_output=1,\n
                               at_date=(from_date-1).latestTime())\n
\n
  total_credit = -getInventory(node_uid=account_obj.getUid(),\n
                               section_category=section_category,\n
                               simulation_state=[\'delivered\'],\n
                               precision=precision,\n
                               omit_input=1,\n
                               at_date=(from_date-1).latestTime())\n
\n
  line_list = [Object(delivery_portal_type=initial_balance_msg,\n
                      debit=total_debit or None,\n
                      credit=total_credit or None,\n
                      debit_balance=round(max(total_debit - total_credit,\n
                                              0), precision) or None,\n
                      credit_balance=round(max(total_credit - total_debit,\n
                                               0), precision) or None,)]\n
                      \n
  for journal in journal_list:\n
    account = account_data.get(journal, None)\n
    if account is not None:\n
      total_debit_per_journal[journal] = total_debit_per_journal[journal]\\\n
                                                  + account[\'debit\']\n
      total_credit_per_journal[journal] = total_credit_per_journal[journal] \\\n
                                                  + account[\'credit\']\n
      balance = round(account[\'debit\'] - account[\'credit\'], precision)\n
      line_list.append(Object(delivery_portal_type=journal,\n
                              debit=account[\'debit\'] or None,\n
                              credit=account[\'credit\'] or None,\n
                              debit_balance=max(balance, 0) or None,\n
                              credit_balance=max(-balance, 0) or None,))\n
      total_debit += account[\'debit\']\n
      total_credit += account[\'credit\']\n
\n
  stat_list = [Object(delivery_portal_type=total_msg,\n
                      debit=total_debit or None, credit=total_credit or None,\n
                      debit_balance=round(max(total_debit - total_credit,\n
                                              0), precision) or None,\n
                      credit_balance=round(max(total_credit - total_debit,\n
                                              0), precision) or None,)]\n
  \n
  report_section_list.append(\n
      ReportSection( path=url, level=4,\n
        title=account_obj.Account_getFormattedTitle(),\n
        form_id=\'AccountingTransactionModule_viewGeneralJournalReportSection\',\n
        selection_name=\'general_journal_report_selection\',\n
        selection_params=dict(line_list=line_list, stat_list=stat_list),))\n
\n
\n
# Total\n
total_debit = getInventory(section_category=section_category,\n
                           simulation_state=[\'delivered\'],\n
                           precision=precision,\n
                           omit_output=1,\n
                           at_date=(from_date-1).latestTime())\n
\n
total_credit = -getInventory(section_category=section_category,\n
                             simulation_state=[\'delivered\'],\n
                             precision=precision,\n
                             omit_input=1,\n
                             at_date=(from_date-1).latestTime())\n
\n
line_list = [Object(delivery_portal_type=initial_balance_msg,\n
                    debit=total_debit or None,\n
                    credit=total_credit or None,\n
                    debit_balance=round(max(total_debit - total_credit,\n
                                            0), precision) or None,\n
                    credit_balance=round(max(total_credit - total_debit,\n
                                             0), precision) or None,)]\n
                    \n
for journal in journal_list:\n
  debit = total_debit_per_journal[journal]\n
  credit = total_credit_per_journal[journal]\n
  total_credit += credit\n
  total_debit += debit\n
  balance = round(debit - credit, precision)\n
  if debit or credit:\n
    line_list.append(Object(delivery_portal_type=journal,\n
                            debit=debit or None,\n
                            credit=credit or None,\n
                            debit_balance=max(balance, 0) or None,\n
                            credit_balance=max(-balance, 0) or None,))\n
\n
stat_list = [Object(delivery_portal_type=total_msg,\n
                    debit=total_debit or None, credit=total_credit or None,\n
                    debit_balance=round(max(total_debit - total_credit,\n
                                            0), precision) or None,\n
                    credit_balance=round(max(total_credit - total_debit,\n
                                            0), precision) or None,)]\n
\n
report_section_list.append(\n
      ReportSection( path=context.getPhysicalPath(), level=4,\n
        title=total_msg,\n
        form_id=\'AccountingTransactionModule_viewGeneralJournalReportSection\',\n
        selection_name=\'general_journal_report_selection\',\n
        selection_params=dict(line_list=line_list, stat_list=stat_list),))\n
\n
return report_section_list\n
</string> </value>
        </item>
        <item>
            <key> <string>_code</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_filepath</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_owner</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>errors</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>func_code</string> </key>
            <value>
              <object>
                <klass>
                  <global name="FuncCode" module="Shared.DC.Scripts.Signature"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>co_argcount</string> </key>
                        <value> <int>0</int> </value>
                    </item>
                    <item>
                        <key> <string>co_varnames</string> </key>
                        <value>
                          <tuple>
                            <string>Products.ERP5Form.Report</string>
                            <string>ReportSection</string>
                            <string>_getattr_</string>
                            <string>context</string>
                            <string>N_</string>
                            <string>_getitem_</string>
                            <string>section_category</string>
                            <string>at_date</string>
                            <string>from_date</string>
                            <string>_write_</string>
                            <string>precision</string>
                            <string>account_journal_dict</string>
                            <string>_getiter_</string>
                            <string>delivery_portal_type</string>
                            <string>delivery_translated_portal_type</string>
                            <string>inventory</string>
                            <string>journal_dict</string>
                            <string>dict</string>
                            <string>account_props</string>
                            <string>Products.PythonScripts.standard</string>
                            <string>Object</string>
                            <string>report_section_list</string>
                            <string>getInventory</string>
                            <string>restrictedTraverse</string>
                            <string>initial_balance_msg</string>
                            <string>total_msg</string>
                            <string>append</string>
                            <string>$append0</string>
                            <string>journal</string>
                            <string>journal_list</string>
                            <string>total_debit_per_journal</string>
                            <string>total_credit_per_journal</string>
                            <string>account_comparator</string>
                            <string>account_keys</string>
                            <string>url</string>
                            <string>account_data</string>
                            <string>account_obj</string>
                            <string>total_debit</string>
                            <string>total_credit</string>
                            <string>None</string>
                            <string>round</string>
                            <string>max</string>
                            <string>line_list</string>
                            <string>account</string>
                            <string>balance</string>
                            <string>stat_list</string>
                            <string>debit</string>
                            <string>credit</string>
                          </tuple>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>func_defaults</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>AccountingTransactionModule_getGeneralJournalReportSectionList</string> </value>
        </item>
        <item>
            <key> <string>warnings</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
